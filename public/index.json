
[{"content":"","date":"15 maggio 2024","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":" JOINMARKET # Se avete trovato questa pagina cercando online \u0026ldquo;JoinTmarket\u0026rdquo; avete tutta la mia sincera stima. Siete capitati, per√≤, in una guida che tratta un argomento completamente differente, ma estremamente interessante! üö¨üçÅ\nL\u0026rsquo;obbiettivo di questo tutorial √© quello di illustrare il funzionamento teorico e pratico di JoinMarket.\nQuesta guida ha richiesto tantissimo lavoro, tempo e impegno per essere completata ed √© a disposizione in modo completamente gratuito. Se hai trovato i contenuti qui presenti interessanti e utili ti invito ad effettuare una donazione di un qualsiasi importo a sostegno del mio progetto di divulgazione. Questo sito non contiene analytics, pubblicit√† o elementi traccianti grazie a tutti coloro che supportano la mia divulgazione sostenendomi. üê¢ üíö\nDefinizione teorica Joinmarket # Possiamo definire JoinMarket come uno strumento, o un wallet, che permette di effettuare CoinJoin con altri utenti in maniera totalmente trustless e senza alcun coordinatore centrale.\nEssendo tutta la parte teorica di questo tool estremamente ampia, ho deciso di affrontarla in una puntata specifica del mio podcast. Consiglio vivamente di proseguire nella lettura dopo aver ascoltato l\u0026rsquo;episodio, cos√¨ da assimilare al meglio i concetti di base per utilizzare in maniera corretta questo programma.\nPotete recuperare la puntata a questi link diretti:\nSpotify Google podcast Amazon music Anchor (qua potrete ascoltarla direttamente da browser). Antenna pod √© un podcast manager gratuito e opensource che non richiede registrazione.\nPer trovare la puntata scaricate l\u0026rsquo;app, aggiungete manualmente il mio podcast incollando questo link nella sezione ¬®feed rss¬®, cercate poi la puntata dedicata a JoinMarket. Da questo punto in poi tutti gli argomenti affrontati nel podcast veranno considerati gi√† \u0026ldquo;conosciuti\u0026rdquo; e quindi non verranno ri-trattati.\nInstallazione # Sistemi operativi:\nRaspiblitz Dal menu principale del vostro sistema operativo (da questo punto in poi chiamato semplicemente OS) andate nella sezione \"SERVICES\" per installare i servizi aggiuntivi e mettete la spunta a \"JOINMARKET \u0026 JOININBOX\". Una volta installato, per accedere al terminale, dal menu iniziale andate su \u0026ldquo;EXIT\u0026rdquo; e poi inviate il comando jm nella shell per passare ad un utente dedicato all\u0026rsquo;utilizzo di solo joinmarket.\nDi default su raspiblitz si avvier√† Joininbox (una GUI per JM), per accedere alla linea di comando vi baster√† selezionare \u0026ldquo;Exit\u0026rdquo; nel menu.\nUmbrel Umbrel √© una delle distro plug \u0026 play pi√π conosciuta anche se personalmente non la ho mai utilizzata. Nello store delle app √© presente JAM (una versione con interfaccia grafica molto bella ma estremamente limitata nelle funzioni). Consiglio vivamente di usare JoinMarket (per fruire di tutte le sue possibilit√†) da shell seguendo questa guida. Per l'installazione √© presente un tutorial direttamente sul [Github ufficiale](https://github.com/JoinMarket-Org/joinmarket-clientserver). MyNode Su mynode basta aprire un terminale ssh al vostro nodo per accedere alla linea di comando, arrivati qua JoinMarket sar√† gi√† preinstallato sul vostro sistema e potrete andare nella cartella contenente gli script per usare le varie funzioni da shell oppure lanciare joininbox con il comando `sudo mynode-joininbox`. Questa guida coprir√† l'utilizzo di JM da terminale usando i vari script pre-installati. Raspibolt Tutta la parte di installazione e setup di Joinmarket √® gi√† coperta come parte opzionale all'interno della guida raspibolt. File di configurazione # JoinMarket √© un software personalizzabile e con un\u0026rsquo;infinit√° di settaggi; quest\u0026rsquo;ultimi sono specificati in un file di configurazione presente nella directory principale del programma chiamato ¬¥Joinmarket.cfg¬¥.\nIn questa sezione andremo ad analizzare alcuni campi che potrebbe essere interessante approfondire e/o modificare, in base alle proprie esigenze. Vorrei sottolineare che tutte le modifiche di seguito elencate sono utili da conoscere per adattare il funzionamento del software alle esigenze personali pur non essendo obbligatorie.\nPrima di tutto spostiamoci nella cartella joinmarket/scripts e lanciamo il comando:\npython wallet-tool.py generate.\nA questo punto dovremmo ottenere un errore, ma cos√¨ facendo il software ci generer√† un file di settings pre-impostato. Potremo andare a modificare il file di configurazione da terminale con:\nnano joinmarket.cfg\noppure\nvim joinmarket.cfg\nuna volta aperto noteremo numerose righe con varie impostazioni e relativa spiegazione in inglese. Nello specifico analizzeremo qua sotto le variabili pi√∫ interessanti:\nmerge_algorithm in caso facessimo da maker questo campo regola con quanta aggressivit√° il software consolider√° gli Output non spesi. In caso avessimo molti UTXO da consolidare, potrebbe aver senso switchare da ¬¥gradual¬¥ a ¬¥greedy¬¥ tx_fees regola come taker le FEE con cui pagare la transazione, √© molto utile modificare questo setting in caso usaste spesso il tumbler (ne parleremo in seguito) in quanto se ci fosse uno spike delle FEE durante l\u0026rsquo;esecuzione di quest\u0026rsquo;ultimo, se non settassimo correttamente questo campo, rischieremmo di andare a spendere tantissimi sats per i coinjoin. Settando valori in migliaia (come per esempio 2000) questo equivarr√° a 2 sats/vByte, 3500 a 3.5 sats/vByte e cosi via. Mi sentirei di consigliare un numero che va da 1500 a 6000 in base alle vostre necessit√°. max_cj_fee_abs serve a specificare quanto siamo disposti a pagare in termini assoluti i maker che scegliamo durante il coinjoin. Di default questo campo per i maker √© 200 sats, una buona opzione potrebbe essere un numero variabile da 200 a 1000 sats per controparte (questo in base a quanto volete spendere e quanto anon-set ricercate per i vostri coinjoin) max_cj_fee_rel ha la stessa funzione del campo sopra ma specifica le FEE relative (percentuali) che siamo disposti a pagare ad ogni controparte. Essendo questo un valore \u0026ldquo;percentuale\u0026rdquo;, state attenti a non settare valori alti per evitare costi elevati nei coinjoin con grossi importi. Il valore di default per i maker √© ¬¥0.00002¬¥, consiglio un valore simile o leggermente superiore. minimum_makers √© il campo che specifica con quante altre controparti facciamo CJ, di default joinmarket sceglie sempre da 4 a 9 controparti, volendo, per una maggiore privacy, possiamo alzare questo valore a 5 o 6 (render√° per√≤ le transazioni pi√∫ costose). cjfee_a specifica, in caso facessimo da maker, quanti sats in termini assoluti vogliamo incassare per l\u0026rsquo;affitto della nostra liquidit√°. Questo campo √© totalmente soggettivo, il valore di default √© gia ottimo (avremo cos√¨ miglior privacy come maker) possiamo valutare di portarlo a 0 se vogliamo fare pi√∫ coinjoin in meno tempo. cjfee_r uguale al campo sopra ma in termini percentuali e non assoluti. Anche qua consiglio di lasciare il valore di default o abbassarlo per attrarre pi√∫ takers. ordertype con questo campo scegliamo da maker se farci pagare in maniera assoluta (absoffer) o percentuale (reloffer). Solitamente i takers preferiscono le offerte assolute per questioni economiche. minsize se da maker non vogliamo avere UTXO troppo piccoli possiamo specificare il coinjoin minimo per partecipare. Questo campo √© espresso in satoshi ed √© totalmente soggettivo . Potremmo lasciare questo campo a 0 oppure aumentare fino a 500000 (sats), 1000000 (sats), ecc\u0026hellip; Prestate molta attenzione a non modificare per sbaglio i campi errati, alcune delle varibili presenti nel file joinmarket.cfg se impostate erroneamente potrebbero compromettere la funzionalit√° del software o annientare completamente la vostra privacy, occhi aperti e attenzione al massimo!\nSetup dell\u0026rsquo;ambiente di lavoro # Alcuni nodi impostano automaticamente i valori corretti per questi campi all\u0026rsquo;interno del file joinmarket.cfg Consiglio di ricontrollare manualmente:\nrpc_user = yourusername-as-in-bitcoin.conf\nrpc_password = yourpassword-as-in-bitcoin.conf\nrpc_host = localhost #default usually correct\nrpc_port = 8332 # default for mainnet\nA questo punto potremo procedere con la creazione del nostro wallet all\u0026rsquo;interno di JoinMarket:\npython wallet-tool.py generate\nQuesto comando ci far√° inserire una password con cui criptare il wallet e il nome che vogliamo dare ad esso, quando vi chieder√° se volete supportare o meno i fidelity bond consiglio di usare l\u0026rsquo;opzione ¬¥yes¬¥, l\u0026rsquo;output restituito sar√° simile a questo:\n(jmvenv)$ python wallet-tool.py generate Write down this wallet recovery mnemonic on paper: matter aim multiply december stove march wolf nuclear yard boost worth supreme Enter wallet encryption passphrase: Reenter wallet encryption passphrase: Input wallet file name (default: wallet.jmdat): saved to wallet.jmdat in caso dia errore √© molto probabile che abbiamo settato male i 4 campi RPC sopra specificati. Nel caso potrebbe aiutare seguire questa guida presente nella documentazione originale di JM.\nAbbiamo completato il setup del nostro ambiente di lavoro e possiamo cominciare ad esplorare i comandi che pi√∫ ci torneranno utili. Tutti gli script di cui parleremo possono essere lanciati in console seguiti da ¬¥\u0026ndash;help¬¥ per avere una spiegazione approfondita.\nPossiamo ora provare a lanciare:\npython wallet-tool.py *nome del wallet prima creato* esempio: python wallet-tool.py wallet.jmdat questo comando vi mostrer√° tutti i vari mixdepth del portafoglio con i vari indirizzi catalogati come:\nNew (address mai usato) Change-out (resto di una precedente transazione) Cj-out (output di un coinjoin) ecco un esempio pratico del risultato:\nora possiamo procedere a depositare i nostri primi satoshi all\u0026rsquo;interno di uno o pi√∫ indirizzi ricordando che, indipendendentemente da maker o taker, il software non andr√° mai a consolidare utxo in mixdepth diversi direttamente, in questo modo potremo tenere separati sats con diverso livello di privacy all\u0026rsquo;interno del wallet.\nInviare bitcoin con coinjoin singolo # Possiamo ora muovere i nostri satoshi. Uno dei comandi principali di questo software √© lo script:\npyhton sendpayment.py\nche ci permetter√° di inviare transazioni ad altri indirizzi con o senza coinjoin. Andiamo ad analizzare il suo funzionamento ed alcuni esempi pratici. Di default la formattazione del comando √©:\npython sendpayment.py *opzioni visionabili con --help* *nome del wallet* *ammontare di satoshi* *indirizzo di destinazione* un esempio basic di utilizzo potrebbe essere:\npython sendpayment.py wallet.jmdat 5000000 1mprGzBA9rQk82Ly41TsmpQGa8UPpZb2w8c in questo caso andremo ad inviare all\u0026rsquo;indirizzo 1mprGzBA9rQk82Ly41TsmpQGa8UPpZb2w8c 0.05 Btc ovvero 5000000 satoshi dal nostro mixdepth 0 (quello di default) andando a scegliere da 4 a 9 controparti per il coinjoin (opzione di default).\nPer avere maggior controllo su come e quali utxo spendere possiamo andare ad analizzare le opzioni aggiuntive a questo comando:\npython sendpayment.py -N 5 -m 1 wallet.jmdat 100000000 1mprGzBA9rQk82Ly41TsmpQGa8UPpZb2w8c in questo esempio abbiamo aggiunto due specifiche: -N indica con quante controparti andremo a mixare, -m il mixdepth da cui andremo a prelevare i fondi. Di fatto abbiamo inviato 100.000.000 sats (1 btc) all\u0026rsquo;indirizzo 1mprGzBA9rQk82Ly41TsmpQGa8UPpZb2w8c con i fondi presenti nel mixdepth 1 e mixando con 5 controparti.\nSe mettessimo come valore di invio 0 specificando un mixdepth, joinmarket effettuer√° un cosidetto ¬¥sweep¬¥, ovvero invier√° tutti i fondi presenti in quel mixdepth consolidandoli tra di loro:\npython sendpayment.py -N 7 -m 0 wallet.jmdat 0 1mprGzBA9rQk82Ly41TsmpQGa8UPpZb2w8c qu√¨ abbiamo inviato tutti i fondi dal mixdepth 0 (potevamo anche non specificalo perch√© √© quello di default) mixando con 7 controparti.\nIl comando sendpayment serve per muovere fondi da joinmarket a wallet esterni o per inviare satoshi ad una persona aggiungendo un layer di privacy tra noi e lui. Per guadagnare un sufficiente livello di privacy sui nostri UTXO √© pi√∫ indicato usare il comando tumbler.py che spiegheremo pi√∫ avanti in questa guida.\nFare da Maker # Lo script che andremo a trattare in questa sezione √®:\nyg-privacyenhanced.py\nQuesto programma serve per agire come maker nel marcato di joinmarket. Il software si connetter√° al nostro nodo bitcoin ed al mercato interno della piattaforma in cui i maker si presentano come offerenti di liquidit√° e i taker cercano le controparti.\nIn caso vogliate usare un fidelity bond potrete crearne uno con questa formattazione:\npython3 wallet-tool.py *nome del wallet* gettimelockaddress *data del blocco espressa in YYYY-MM* esempio:\npython3 wallet-tool.py testwallet.jmdat gettimelockaddress 2025-11 l\u0026rsquo;output che vi verr√° restituito sar√† un indirizzo bitcoin (ovvero quello su cui dovrete depositare i fondi che volete destinare al fidelity).\n!!ATTENZIONE!!\nCi sono due cose a cui fare molta attenzione se avete intenzione di creare un FB:\nUna volta depositati i fondi, questi non potranno essere pi√∫ mossi fino alla scadenza di esso. Prestate attenzione a quanti sats inviate all\u0026rsquo;indirizzo e a come formattate la data. Non sono ammessi errori! Il fidelity √© facilmente riconoscibile onchain, pertanto √© consigliabile depositare fondi attraverso un coinjoin e con provenienza non collegata alla vostra identit√°. La stessa cosa √© consigliabile farla anche una volta che vorrete spostare il bond scaduto fuori da JM. √â importante ricordare che √© possibile refillare il fidelity con una sola transazione, in caso di multipli UTXO solo il maggiore verr√† considerato valido per il FB.\nTrattiamo ora lo script citato all\u0026rsquo;inizio di questo paragrafo, una volta creato il bond (opzionale) siamo pronti per avviare l\u0026rsquo;eseguibile per fare da maker su joinmarket.\nUna volta depositati i satoshi ai vari indirizzi e mixdepth potremo dare il comando:\npython yg-privacyenhanced.py *nome del wallet*\nDa questo momento in poi (dopo qualche minuto di collegamento alla rete) e fino a quando non interromperemo lo script, il nostro client JM comparir√† sulla lista dei maker attivi sul protocollo e offrir√° la nostra liquidit√° a varie controparti per effettuare coinjoin. Non aspettatevi decine di coinjoin al giorno (a meno di fidlity enorme e grande liquidit√° depositata sul wallet), ricordate anche che fattori come le FEE richieste e i satoshi depositati influiscono sulla frequenza con cui farete da maker.\nEseguendo il comando sottostante potrete vedere lo storico di tutte le transazioni effettuate sul wallet e l\u0026rsquo;eventuale guadagno (se fate da maker) o spesa di FEE (se siete taker) che avete avuto in tutto l\u0026rsquo;arco di vita del portafoglio.\npython wallet-tool.py *nome del wallet* history\nUna volta che i vostri satoshi faranno dei coinjoin, si muoveranno da un mixdepth all\u0026rsquo;altro fino ad arrivare all\u0026rsquo;ultimo. Una volta superato il quarto torneranno al mixdepth 0, a voi la scelta di quanta privacy ottenere prima di spostarli su un cold wallet, √© consigliabile concludere un ciclo completo del wallet.\nTumbler # Eccoci finalmente alla parte pi√∫ succosa di JoinMarket, il tumbler!\nse avete ascoltato il podcast sapete gi√° di cosa si tratta. Una raccomandazione prima di inziare: ATTENTI ALLE FEE! Ricordatevi di settare i limiti nel file joinmarket.cfg (come spiegato all\u0026rsquo;inzio) e valutate di far girare il programma solo quando le fee onchain sono relativamente basse (sotto i 10 sats/vB).\nPer lanciare il tumbler √© necessario aver fermato lo script da maker (se era attivo), dopo potremo far partire il comando:\npython tumbler.py *nome del wallet* *indirizzo1 su cui ricevere* *indirizzo2 su cui ricevere* *indirizzo3 su cui ricevere* √â fondamentale inserire ALMENO 3 indirizzi di output per il tumbler: questo serve a garantire una buona privacy e a non creare link evidenti tra gli UTXO durante tutto il processo. Come al solito aggiungendo \u0026ndash;help al comando √© possibile andare a vedere tutti i dettagli aggiuntivi. Andiamo a visionare un esempio pi√∫ complesso con regole avanzate:\npyhton tumbler.py TestWallet.jmdat -N 7 2 -c 3 1 bc1qz3f80rtv0ux85d7rc06ldtvmpqyfx6ly48c9pa bc1qf3wljw44utyv7qd0z57zvdkfl20y470mva0nes bc1qw48asjpkwm3k2w8cketqhrre0uwq9f7ypwzmxl In questo caso abbiamo lanciato uno script di tumbling che non user√† il numero di controparti di default (il parametro -N indica che richiediamo 7 controparti con una varianza massima di 2, quindi un numero di maker random da 5 a 9) e con un numero maggiore di coinjoin per mixdepth (di default questo script effettua un numero random di coinjoin per sezione del wallet che va da 1 a 3, usando il comando -c 3 1 invece sar√° da 2 A 4).In questo modo spenderemo pi√∫ sats in fee ma avremo un anonimity set maggiore.\n√â possibile anche aggiungere quanti indirizzi di output si vogliono (minimo 3, non c√© un massimo se non il buon senso). Non √© invece possibile, per questioni di privacy, decidere come saranno distribuiti i satoshi tra gli indirizzi specificati come output.\nIl tumbler √© un processo volutamente lungo, occasionalmente potrebbe capitare che qualcosa smetta di funzionare, nella maggior parte dei casi questo si risolver√† in autonomia nel giro di poche ore. In caso di crash totale potremo tentare di riavviarlo con il comando:\npython tumbler.py --restart\noppure baster√° far ripartire un nuovo comando di tumbling. Questo non avvier√† lo scheduling del tumbler precedente ma inizier√° un nuovo ciclo di mixing.\nIn caso chiudendo il terminale SSH al vostro nodo si interrompa anche lo script potrete sfruttare il programma \u0026lsquo;TMUX\u0026rsquo; installabile con il comando:\nsudo apt install tmux\nLanciandolo da shell digitando \u0026rsquo;tmux\u0026rsquo; vi si aprir√° un terminale che rimarr√° attivo in background anche chiudendo la connessione remota. Quando vi ri-connetterete al vostro nodo con il comando: \u0026rsquo;tmux attach\u0026rsquo; ri-aprirete la shell lasciata aperta.\nConclusioni # JoinMarket √© un software sconfinato e personalizzabile. In questa guida abbiamo scoperto le funzioni principali in modo da rendere possibile per chiunque (o almeno ci ho provato, mi rendo conto che usare questo software non √© una passeggiata) l\u0026rsquo;utilizzo di questo programma. Uno dei maggiori problemi di JM √© proprio questo: il numero di persone che lo usano e che fanno da maker. Se pochi utenti sfruttano questo software, la privacy generale (anon-set) si abbassa. Ecco perch√© spero che questa guida possa incentivare l\u0026rsquo;uso e vi convinca a scaricare e installare il mio software preferito per fare coinjoin. In caso vogliate approfondire ancora di pi√∫ alcuni aspetti vi consiglio di dare una lettura ai vari docs di approfondimento presenti su github, sono vermanete ben fatti e li potete reperire qui.\nBuon mixing tartarughe!üê¢ üíö\nDonazione con ","date":"15 maggio 2024","externalUrl":null,"permalink":"/guides/joinmarket/","section":"Guide","summary":"JOINMARKET # Se avete trovato questa pagina cercando online \u0026ldquo;JoinTmarket\u0026rdquo; avete tutta la mia sincera stima.","title":"Come usare joinmarket per fare coinjoin","type":"guides"},{"content":" Android # Guida al De-Google e privacy su android.\nQuesta vuole essere una guida completa per ottenere un telefono Android completamente de-googled con la massima privacy e sicurezza possibile, pur mantenendo l\u0026rsquo;usabilit√† e comodit√† del dispositivo.\nLa guida √® aperta a miglioramenti e consigli, descriver√≤ la configurazione che trovo con il miglior rapporto usabilit√†/privacy, nel tempo ampier√≤ le varie sezioni introducendo anche varie alternative per chi magari non si trova bene con una determinata applicazione o servizio, Se volete darmi consigli, contribuire alla guida o effettuare traduzioni, potete trovare i miei contatti nella pagina Donazioni o effettuare una pull request su GitHub.\nSistema operativo # Esistono vari sistemi operativi Android privacy-oriented (GrapheneOS, CalixOS, etc). In questa guida tratteremo l‚Äôapproccio usando come base LineageOS 12, ma √® comunque compatibile con ogni altro sistema operativo AOSP.\nQuesta guida √® stata pensata e studiata per offrire la massima sicurezza e privacy nell\u0026rsquo;utilizzo del proprio telefono, procedure come il rooting e lo sblocco del bootloader riducono notevolmente la sicurezza del dispositivo e sono per questo fortemente sconsigliate.\nPer semplificare i passi per l‚Äôinstallazione di Lineage facciamo un brevissimo riassunto:\nSbloccare il bootloader Flashare una recovery Flashare Lineage OS versione microG Attenzione, la versione base senza Google apps √® di gran lunga preferibile (e fortemente consigliata), ma utilizzando microG senza aggiungere nessun account Google potremo almeno utilizzare i servizi base di Android senza andare incontro a crash e malfunzionamenti di app dipendenti da essi.\nA questo punto ci troveremo con un sistema operativo fresco e appena installato.\nModifica e setup del sistema # Per avere un dispositivo privacy-oriented cominceremo con il modificare i vari settings del sistema operativo, elenchiamo le principali impostazioni e accorgimenti, anche se questi possono cambiare da dispositivo a dispositivo:\nDisabilitare bluetooth e posizione ogni volta che non li utilizziamo Attivare la privacy nel blocco schermo e un metodo di protezione del dispotivo (pin e notifiche nascoste con telefono bloccato) Disabilitare tutti i dati telemetrici Abilitare se disattivata la criptazione del dispositivo Disabilitare i backup Rifiutare ogni volta, se possibile, la condivisione di dati di telemetria e crash in tutte le app installate Ricordarci di disattivare il debug USB ogni volta che lo utilizziamo (disabilitato di default), in quanto espone a grossi rischi di sicurezza Gestiremo in seguito i permessi delle applicazioni.\nStore per il download delle app # Essendo ora separati dal mondo Google dovremo trovare altri store da cui scaricare le applicazioni, le alternative principali sono:\nF-Droid: store alternativo di app FOSS/open source.\nPossibilmente installeremo da qua le applicazioni, ma non aspettatevi di trovare Instagram o Facebook, contiene solo app open source, quindi al massimo troverete delle loro alternative FOSS. Droid-ify: fork di F-Droid com una grafica pi√π curata e alcune funzioni aggiuntive, a mio parere la migliore alternativa se cercate una UI un po\u0026rsquo; pi√π elegante. Aurora Store: vi permette di usare il vecchio store Google ma attraverso account fittizi e automaticamente generati all\u0026rsquo;avvio dell\u0026rsquo;app, mi raccomando usate la modalit√† ospite/anonima o sar√† inutile. Shelter # Ora che abbiamo gli store configurati possiamo procedere al download di Shelter. Se avevate gi√† aperto F-Droid/Droid-ify in precedenza dovrebbe aprirvi il link direttamente in app.\nShelter √® un\u0026rsquo;applicazione open source che ci permette di creare un work profile, ovvero un secondo profilo nel telefono che funziona contemporaneamente al primo ma in modo totalmente isolato e indipendente\nImmaginate un tavolo (il nosto sistema operativo) su cui poggiano due scatole completamente chiuse e sigillate (i nostri due profili), queste due sono completamente indipendenti e separate, ma usano una base comune. Se l\u0026rsquo;OS del nostro telefono √® il primo ad essere sporco e pieno di app traccianti come i Google Play Services, l\u0026rsquo;utilizzo di Shelter diventa in buona parte inutile. Nel caso in cui non vogliate cambiare ROM, usate almeno questo Android Debloater che vi permette di disabilitare in pochi e semplici tap le principali app tossiche per la privacy incluse nei maggiori sistemi operativi di default (ATTENZIONE disabilitate le app, non disinstallatele, o rischierete di corrompere il sistema se avete il telefono criptato).\nUna volta aperto Shelter si aprir√† un menu di configurazione del profilo di lavoro, una volta attivato accederemo all\u0026rsquo;interfaccia dell\u0026rsquo;app, che √® divisa in 2 sezioni:\nMain: il profilo principale in cui installeremo solo app open source o senza accesso ad internet. Shelter: la sezione in cui isoleremo tutte le applicazioni malevole e traccianti come social, app bancarie o closed source. I 2 profili sono perfettamente separati e vedremo le app installate in quello principale come normali icone; quelle installate nel profilo di lavoro invece presenteranno un piccolo badge che le distingue dalle altre, esse coesisteranno all\u0026rsquo;interno dello stesso launcher. Per installare le app nel profilo desiderato ci baster√† usare uno di questi 3 metodi:\nDall\u0026rsquo;app Shelter clonare un\u0026rsquo;app da un profilo ad un altro (o dai settings usare la funzione installa APK). Scaricare le app da uno store installato in quel profilo (installate Droid-ify sul profilo principale e pulito mentre Aurora in quello sporco e con le app traccianti). Installare APK scaricati da internet (se possibile scaricate tutto da Droid-ify in quanto √® MOLTO piu sicuro). I due sistemi saranno perfettamente isolati, cosa abbastanza scomoda per la gestione dei contatti, galleria, file, ecc.. in quanto ognuno avr√† i suoi. Nelle impostazioni di Shelter √® possibile attivare una funzione che permette solo all\u0026rsquo;utente di far parzialmente parlare i due sistemi per la condivisione dei file. Nonostante questo la gestione del tutto rimarr√† un po\u0026rsquo; scomoda fino a quando non ci farete l\u0026rsquo;abitudine.\nGestione del threat model tra i profili # Ora che abbiamo due sistemi completamente diversi e isolati, applicheremo un threat model differente in entrambi. Nel primo (pulito ed open source) punteremo alla massima privacy facendo passare tutto il traffico dati attraverso Tor e DNScrypt, nel secondo (sporco e con elementi traccianti) invece punteremo a ridurre il pi√π possibile il leak dei nostri dati, coscienti di utilizzare comunque applicazioni che probabilmente hanno gi√† i nostri dati personali (andremo quindi a limitare il pi√π possibile pubblicit√† e trackers).\nCome prima cosa ci concentriamo sul main profile ed scarichiamo Invizible Pro, applicazione che reindirizza tutto il traffico sotto Tor e con anche ulteriori protezioni.\nUna volta aperta l\u0026rsquo;applicazione dal men√π in alto a destra con i 3 puntini attiviamo la modalit√† VPN. Rechiamoci quindi nelle impostazioni del telefono nella sezione Rete ‚Üí Avanzate/VPN ‚Üí Invizible Pro, qui attiviamo la modalit√† \u0026lsquo;VPN sempre attiva\u0026rsquo; e \u0026lsquo;blocca connessioni senza VPN\u0026rsquo;, in questo modo tutto il traffico passer√† attraverso Invizible ed eviteremo qualsiasi leak di dati.\nOra che abbiamo impostato correttamente la rete andiamo a modificare alcune impostazioni all\u0026rsquo;interno di Invizible:\nIn DNSCrypt settings nella terza sezione abilitiamo require_dnssec, nolog and nofilter, questo ci permetter√† di usare sempre i migliori server DNS possibili. Nella sezione Fast Settings abilitiamo \u0026lsquo;avvia DNSCrypt all\u0026rsquo;avvio\u0026rsquo; e \u0026lsquo;avvia TOR all\u0026rsquo;avvio\u0026rsquo;, in questo modo saremo sempre protetti al 100%. Sempre in Fast Settings, in fondo, abilitiamo l\u0026rsquo;update automatico attraverso TOR (facoltativo). Nelle impostazioni rechiamoci in Common Settings e abilitiamo tutte e 3 le protezioni della sezione MITM attack detection, queste proteggeranno il nostro dispositivo quando connessi a Wi-FI pubblici. Infine rechiamoci nella categoria Firewall e disabilitiamo l\u0026rsquo;accesso ad internet a tutte le applicazioni che non ne hanno bisogno (come per esempio la galleria, la tastiera, i giochi offline, ecc) A questo punto il main profile √® pronto per essere usato, ci possiamo ora dedicare al profilo di lavoro, quello con le applicazioni closed source.\nQui possiamo adottare due diverse tecniche per la protezione dei dati:\nUsare una VPN in caso cerchiamo protezione verso il nostro ISP (tramite essa possiamo anche filtrare pubblicit√† e tracker). Usare NetGuard per bloccare l\u0026rsquo;acceso ad internet alle applicazioni che non lo necessitano ed aggiungere il blocco delle pubblicit√† e tracker tramite l\u0026rsquo;implementazione di un Host filter. Entrambe le opzioni sono valide, la decisione dipende principalmente dalla vostra volont√† o meno di usare un servizio VPN. In caso vogliate approfondire l\u0026rsquo;argomento potete dare un occhio anticipatamente alla sezione apposita.\nSe invece preferite usare NetGuard consiglio di implementare gli Host file di Energized Protection.\nApplicazioni # Ora che abbiamo gli store e le reti ben configurate passiamo a scaricare alcune app fortemente consigliate:\nOpenBoard: tastiera Android open source esattamente uguale alla Gboard (faccio un piccolo discorso su questa app, so che molti sono abituati a Gboard o SwiftKey ma per l‚Äôamor del cielo evitatele, ho provato a bloccare vari processi e l‚Äôaccesso ad internet alla tastiera, ma analizzando i dati scambiati con la mia rete ho notato che riusciva comunque a comunicare con i server Google. Per favore usate OpenBoard o altre tastiere open source offline). Bromite: a mio parere il miglior broswer Android, purtroppo Firefox e tutti i suoi fork non supportano su Android l\u0026rsquo;isolamento delle pagine, questo crea un enorme problema di sicurezza, Bromite invece √® basato su Chromium e anche se non supporta le estensioni, ha gi√† internamente abilitato un ad block che supporta liste personalizzate e possiede anche vari tweak anti-fingerprinting. Omega launcher: ottimo launcher open source, fork di quello AOSP ma con piu\u0026rsquo; personalizzazioni, si integra perfettamente anche con Shelter creando 2 menu\u0026rsquo; delle applicazioni. A questo punto possiamo procedere al download delle applicazioni facendo attenzione al profilo nel quale le installiamo, personalmente uso F-Droid sul sistema pulito e Aurora in quello con le app traccianti, vi lascio una piccola lista di app open source e privacy-oriented che potrebbero tornarvi utili:\nAegis: alternativa open source ed offline a Authy/Google Authenticator AntennaPod: lettore di podcast totalmente open source, usa come fonte i principali lettori podcast esistenti Bitwarden: miglior password manager, estremamente sicuro, consente anche il self-hosting Crypto Prices: alternativa a CoinMarketCap Frost: per quanto disprezzi e sconsigli l‚Äôutilizzo di Facebook, se proprio non riuscite a farne a meno consiglio di utilizzare Frost, un client open source per Facebook Guerrilla Mail: client per Guerrilla Mail, una temp mail per gli spam Infinity: client di ottima qualit√† di Reddit, a mio parere meglio dell\u0026rsquo;app originale! LibreTorrent: semplice, comodo e veloce client Torrent per Android LessPass: permette di generare password derivate dalla combinazione di sito + nome utente + una password fissa, l\u0026rsquo;eccellenza per avere password sicure Molly: una versione hardened e ripulita dal codice Google di Signal, portebbe essere una buona idea registrarsi con una SIM comprata senza documenti se legale nel vostro stato Nekogram: client per Telegram che non si appoggia ai servizi Google ed implementa PGP NewPipe: client di PeerTube, tutti i video di YouTube ma senza Google! Nextcloud: client per usare e syncare nextcloud, a mio parere il miglior software per farsi un server multimediale in casa OpenKeychain: app per gestire le nostre chiavi PGP o per integrarle nelle applicazioni di messaggistica/e-mail Simple Bitcoin Wallet: wallet open source leggero, veloce e dalla ottima UI per gestire i vostri Bitcoin SimpleLogin: una sorta di proxy e-mail anti-spam, crea delle e-mail esca con cui registrarvi ai siti che automaticamente girano le e-mail ad altri indirizzi da voi scelti, in questo modo non dovrete dare la vostra e-mail a siti esterni. Inoltre potete eliminare o sospendere le e-mail esca quando volete in modo da interrompere la ricezione delle e-mail sul vostro account principale) Simple Crypto Widget: per avere i prezzi aggiornati della vosta criptoval\u0026hellip;COFF COFF di Bitcoin sulla vostra home page Simple File Manager: file manager dall‚Äôottima grafica e con permessi root opzionali Tor Browser: broswer Tor ufficiale con libreria Tor integrata, utile per navigare online senza rivelare l‚Äôindirizzo IP, non garantisce un anonimato al 100% come ogni cosa ma √® un ottimo scudo per la privacy, utile per navigare nei siti .onion Treecord: versione con tracker bloccati del client Discord per Android Voice: lettore offline e opensource di audiolibri Per ulteriori applicazioni, browser e servizi privacy friendly consiglio di dare un occhio a privacytools, privacyguides o cercare nelle varie categorie su Droid-ify.\nClient e provider email # Il discorso su quale sia il miglior client e provider email √® lungo e complesso, la migliore opzione sarebbe hostarsi da soli un\u0026rsquo;email, ma non e\u0026rsquo; sicuramente facile.\nIn caso volessimo un servizio rapido e comodo ma in cui dobbiamo riporre fiducia consiglio Proton Mail, da usare solo tramite Tor, oppure Tutanota, che sembra essere un\u0026rsquo;azienda pi√π trasparente, ma dichiara di loggare gli indirizi IP degli utenti; personalmente eviterei l\u0026rsquo;uso di entrambi questi provider in quanto promettono anonimato ma gia\u0026rsquo; in passato non hanno rispettato questa clausola e potrebbero essere degli honeypot( ?). Entrambe per√≤ auto-criptano i messaggi verso le email dello stesso provider (Tutanota con Tutanota e Proton con Proton).\nUn\u0026rsquo;opzione molto valida √® quella di usare come client (quindi come app su cui riceviamo le mail) K-9 Mail e come provider (quindi come servizio email da collegare a K-9) o un servizio a pagamento come FairEmail o provare a contattare/farci invitare da qualche gruppo/collettivo privacy friendly o anarchico come Riseup, Esiliati o Autistici, quest\u0026rsquo;ultimo per√≤ in passato ha subito vari hack, quindi consiglio altre alternative.\nMolto interessante all\u0026rsquo;interno delle impostazioni di K-9 √® l\u0026rsquo;opzione di auto-criptazione delle email: importando una chiave PGP da OpenKeychain (app sopra trattata), √® possibile criptare automaticamente le email verso le persone che a loro volta hanno importato una chiave PGP. Dopo una prima email non criptata, K-9 importa la public key dell\u0026rsquo;altra persona permettendoci cos√¨ di scambiare email criptate senza doversi passare le chiavi (da abilitare nei settings di K-9).\nA questo punto della guida dovreste aver gi√† installato tutte le vostre applicazioni personali e quelle da me indicate o consigliate, possiamo agire ora sui vari permessi. In caso installiate in futuro altre app, eseguite questa procedura anche per esse.\nGestione dei permessi delle app # Come primo passo ci rechiamo nelle impostazioni del nostro telefono e andiamo nella sezione Applicazioni ‚Üí Avanzate ‚Üí Gestione permessi e qui rimuoviamo ogni permesso superfluo delle applicazioni (ad esempio un\u0026rsquo;app come WhatsApp ha bisogno dei nostri contatti se vogliamo trovarli, quindi per il corretto funzionamento della stessa conviene lasciarglielo, ma possiamo tranquillamente disabilitare l‚Äôaccesso ai messaggi in quanto verr√† usato solo la prima volta quando faremo il login per velocizzare il primo accesso, dopodich√© se lasciato attivo concede a WhatsApp la possibilit√† di spiare tutti i nostri SMS).\nPrestiamo particolare attenzione ai permessi di geolocalizzazione, fotocamera e microfono.\nQuando un\u0026rsquo;app ci chiede un permesso che non √® utile o siete consapevoli di usare saltuariamente, concedete il permesso ‚Äòsolo per questa volta\u0026rsquo;, in modo che non ne abbia continuo accesso.\nDopo aver modificato tutti i permessi andiamo anche a disabilitare l‚Äôaccesso ad internet a tutte le applicazioni che non necessitano della rete (per esempio i vari file manager, calcolatrici, agende, note, tastiere, ecc). Possiamo farlo comodamente andando nelle informazioni di un\u0026rsquo;applicazione ‚Üí Dati e rete ‚Üí disabilitiamo ‚ÄòAccesso alla rete‚Äô.\nIn caso vogliate essere ulteriormente certi del blocco di internet a queste app, potete usare servizi come i precedentemente trattati NetGuard e Invizible per bloccarle dietro un firewall. Non sottovalutate l‚Äôaccesso ad internet delle app, molte, nonostante non ne abbiano bisogno per il loro funzionamento, lo usano di continuo per condividere nostri dati.\nCloud e Vpn # Faccio una piccola sezione a parte per questi due sotto-argomenti: La migliore soluzione cloud sarebbe il self hosting con Nextcloud (a mio parere la miglior scelta). In caso ci√≤ non sia possibile, la soluzione a mio parere piu semplice e veloce √® Mega.nz (20 GB gratis e 5 GB di bandwith ed accetta pagamento in bitcoin per i pro plans). Se vogliamo invece una sicurezza aggiuntiva possiamo usare un cloud con il supporto a WebDav come Icedrive in combinazione con Cryptomator (programma che cripta i file prima dell‚Äôupload in cloud).\nIl discorso VPN invece √® particolare, una VPN teoricamente cripta il nostro traffico e lo fa passare attraverso un suo nodo mettendosi tra noi e il nostro ISP dandoci maggiore privacy verso di esso ma obbligandoci a fidarci del servizio VPN stesso.\nTutte le aziende in questo settore promettono privacy e politiche di no-logging, ma praticamente il 99% delle VPN pi√π che darci privacy ce la fanno perdere. L‚Äôunica che mi sento davvero di consigliarvi √® Mullvad ( onion link), √® ovviamente obbligatorio pagarla in bitcoin per avere maggiore privacy.\nConclusioni Finali # Seguendo questa guida avremo ridotto drasticamente la condivisione di dati personali, tuttavia ci√≤ non garantisce in nessun modo l‚Äôanonimato ma aumenta decisamente la privacy e la sicurezza nell‚Äôutilizzo del dispositivo.\nL‚Äôutilizzo di MicroG lascia comunque che una piccola quantit√† di dati venga inviata a dei server Google, ma se seguite correttamente ci√≤ che ho scritto sopra i dati inviati saranno davvero pochi e non pi√π riconducibili direttamente alla vostra identit√†.\nSe voleste verificare quali app comunicano con internet e/o condividono vostri dati, potete utilizzare applicazioni come PCAPdroid per analizzare il traffico dati creando una VPN fittizia con cui filtrate il flusso di dati proveniente dal vostro cellulare. Un\u0026rsquo;altra opzione √® usare Wireshark sul vostro pc mentre siete connessi con il cellulare al Wi-Fi.\nAltri ottimi posti per rimanere aggiornati in ambito privacy e degoogle sono vari subreddit:\nDEGOOGLE PRIVACYTOOLS PRIVACY \u0026ldquo;Dire che la privacy e\u0026rsquo; inutile perch√© non si ha nulla da nascondere √® come dire che la libert√† di parola √® inutile perch√© non si ha nulla da dire\u0026rdquo;.\nDonazione con ","date":"15 maggio 2024","externalUrl":null,"permalink":"/guides/android/","section":"Guide","summary":"Android # Guida al De-Google e privacy su android.","title":"Guida al De-Google e privacy su android","type":"guides"},{"content":" Guide, ricette e tutorial riguardanti bitcoin e privacy Sei un bitcoiner o un amante delle libert√°? In questa pagina ci sono varie guide e tutorial che potranno aiutarti in vari aspetti della tua vita quotidiana, se ti sono state di aiuto valuta di fare una donazione.\n","date":"15 maggio 2024","externalUrl":null,"permalink":"/guides/","section":"Guide","summary":"Guide, ricette e tutorial riguardanti bitcoin e privacy Sei un bitcoiner o un amante delle libert√°?","title":"Guide","type":"guides"},{"content":" Bitcoin # Questa sar√† una guida completa sull\u0026rsquo;utilizzo privacy oriented di Bitcoin partendo dalle basi fino ad arrivare a livelli avanzati.\nPartiamo quindi con una breve introduzione a Bitcoin, se siete utenti avanzati potete saltare questa prefazione andando direttamente al primo punto della guida.\nSe vi piace il mio lavoro e/o lo trovate utile vi prego di valutare una donazione per sostenere questo progetto che mi occupa, anche se con mio grande piacere, una buona fetta del mio tempo, buona lettura!\nPrefazione # Bitcoin non √® facile da spiegare. Non esiste un paragrafo in grado di trasmettere tutte le sue propriet√† cruciali. Ogni breve spiegazione √® fuorviante in qualche modo.\nQuesto in parte perch√© nulla come Bitcoin √® mai esistito prima, quindi non c‚Äô√® nulla con cui le persone lo paragonino. I confronti vengono effettuati automaticamente per aiutare a comprendere i concetti, ma sono imprecisi e portano a conclusioni errate.\nQuindi come semplificare bitcoin?\nPossiamo provare a spiegarlo identificandolo in un protocollo informatico che ognuno di noi puo\u0026rsquo; installare sul proprio computer a casa, come un qualsiasi programma, partecipando cosi alla rete che e\u0026rsquo; decentralizzata (non c√© un server centrale che controlla bitcoin ma ognuno di noi partecipa attivamente alla rete come in una sorta di democrazia diretta).\nUtilizzando questo software possiamo inviare, ricevere e conservare bitcoin, che sono la moneta che si sposta su questo protocollo, ogni volta che effettuiamo una transazione ogni persona che partecipa al protocollo se la annota e la salva in un file chiamato blockchain, una sorta di \u0026rsquo;libro mastro\u0026rsquo; uguale per ogni persona al quale tutti aggiungono le proprie transazioni quando effettuate.\nFonti e raccolte di guide per entrare nel mondo Bitcoin # Per capire meglio il funzionamento generale di Bitcoin vi consiglio un paio di fonti in cui potete ottenere tutte le informazioni per cominciare a capire meglio questa tecnologia, tanto complicata da comprendere quanto facile da utilizzare:\nCose da sapere (dal sito bitcoin.org possiamo guardare alcune delle caratteristiche di Bitcoin) Github di MirSerena (Questa ragazza ha fatto una raccolta di tutte le fonti scritte, audio e video ordinate per difficolta, dateci assolutamente un occhio!) Insieme di video su bitcoin in italiano (raccolta di tutti, o quasi, i video piu\u0026rsquo;interessanti su Bitcoin in italiano, dall\u0026rsquo;ABC fino ad argomenti piu\u0026rsquo;complessi) Fare un nodo Bitcoin # Il primo argomento di vitale importanza da affrontare e\u0026rsquo;quello dei Full node ( ?), esistono diversi modi di implementarli piu\u0026rsquo; o meno facili ( Guida di Filippone, Usando RaspiBlitz, tramite Umbrel) o scaricando bitcoincore sul proprio pc. Quali sono i vantaggi di avere un nodo Bitcoin? in cosa e come migliora la nostra privacy?\nAvere un nodo Bitcoin ci permette di partecipare attivamente alla rete ma anche di non dover chiedere a nodi sconosciuti casuali nel network informazioni riguardanti il nostro wallet (senza un nodo andremmo a rivelare di quali indirizzi siamo proprietari, le quantita\u0026rsquo; di bitcoin presenti in ogni indirizzo, l\u0026rsquo;indirizzo IP e quindi anche la nostra localizzazione).\nPer raggiungere l\u0026rsquo;indipendenza finanziaria completa e partecipare al network e\u0026rsquo; fondamentale avere un nodo bitcoin, in caso non potessimo averne uno per varie motivazioni ci sono wallet (prossimo argomento trattato), che ci permettono per lo meno di arginare parzialmente i problemi lato privacy.\nAcquistare bitcoin # Esisistono vari modi per acquistare Bitcoin proteggendo la vostra privacy, ognuno con i propri pro e contro,\novviamente eviteremo exchange centralizzati e servizi KYC, lasciare i propri documenti ad enti terzi non e\u0026rsquo; mai una buona idea (vorrebbe dire esporre totalmente i nostri dati ad un ente terzo il quale potra\u0026rsquo;eventualmente vendere i nostri dati al miglior offerente o essere hackerato).\necco i quattro servizi che preferisco per l\u0026rsquo;acquisto di Bitcoin:\nBisq e\u0026rsquo; un software open-source che permette l\u0026rsquo;acquisto,vendita e scambio di bitcoin ed altre criptovalute in modo Peer to Peer, si connette automaticamente attraverso tor ed implementa vari sistemi di sicurezza e protezione degli acquisti.\nPRO\nTotalmente decentralizzato e P2P Buona liquidita per gli scambi Molti metodi di pagamento accetatti Self-hosted in quanto crea un client locale connesso tramite tor alla rete Bitcoin Non essendo web based non avete perdita di privacy attraverso cookie o fingerprinting CONTRO\nMolto complicato per una persona alle prime armi Richiede di mantere una quantita di BTC su un hot wallet dovete fare un piccolo deposito da mentere come una sorta di \u0026ldquo;caparra\u0026rdquo; supporta shitcoins Bitcoin Market e\u0026rsquo;un gruppo telegram italiano in cui effettuare acquisto e vendita di Bitcoin in modo P2P, la sicurezza e\u0026rsquo;garantita da un sistema di regole, arbitri e sposorizzazioni (in caso qualcuno scammi ha 2 persone che fanno da garante e pagano al posto suo). Regole.\nPRO\nTotalmente P2P Supporta solo bitcoin Di facile utilizzo una volta capite le regole Non essendo web based non avete perdita di privacy attraverso cookie o fingerprinting community molto attiva e aperta CONTRO\nFEE non bassissime Non molto liquido Riponete un minimo di trust alla piattaforma telegram Relai e\u0026rsquo; un servizio svizzero che permette l\u0026rsquo;acquisto e vendita di bitcoin a mercato fino a 900‚Ç¨ al giorno senza KYC (leggi svizzere). Se usate il codice \u0026rsquo;tartaruga\u0026rsquo; avrete lo 0.5% di sconto sulle FEE.\nPRO\nDi utilizzo super facile FEE molto basse (1%) Totalmente non custodial Permette di fare PAC CONTRO\nAnche se non forniamo documenti possono tracciare comunque il mittente del bonifico Piattaforma centralizzata Bitcoin voucher bot e\u0026rsquo; un bot su telegram che permette l\u0026rsquo;acquisto tramite bonifico di voucher bitcoin onchain, Lightining network e Liquid. Il vostro pagamento andra\u0026rsquo;ad una societa Offshore che a sua volta ordinera un Voucher bitcoin che vi verra\u0026rsquo;inviato su telegram sempre attraverso il bot ma emesso da un altra societa\u0026rsquo; andando cosi ad aggiungere un layer di sicurezza aggiuntivo (non stiamo comprando direttamente bitcoin ma voucher riscuotibili da tutti i principali wallet mobile LN).\nPRO\nDi utilizzo molto facile FEE accettabili (3%) Non p2p ma forse il migliore tra i metodi centralizzati Non essendo web based non avete perdita di privacy attraverso cookie o fingerprinting Bitcoin only Supporta lightning CONTRO\nAnche se non forniamo documenti possono tracciare comunque il mittente del bonifico( anche se con difficolta\u0026rsquo; aggiuntive rispetto a bity) Piattaforma centralizzata Riponete un minimo di trust alla piattaforma telegram Mi sento di consigliare tutti e 4 i servizi sopra citati, sono di ottima qualita\u0026rsquo;, dovete solo trovare quale di questi si adatta meglio alle vostre esigenze di privacy e facilita d\u0026rsquo;uso.\nI Wallet bitcoin # Esistono diverse categorie di wallet, li divideremo per comodit√† nelle principali:\nwallet custodial (assolutamente da evitare, not your keys not your coin) wallet non custodial (quelli che andremo a selezionare nella guida) che a loro volta si dividono in:\nwallet desktop (i migliori per l\u0026rsquo;HODL e la custodia dei propri bitcoin) wallet mobile (meglio usarli come \u0026ldquo;il portafoglio con cui andate in giro e non come il conto corrente che conserva tutti i vostri risparmi\u0026rdquo;) Possiamo notare come il wallet che il piu\u0026rsquo;possibile si adatti alle nostre esigenze debba essere obbligatoriamente non custodial e desktop, possibilmente usato in combinazione con un hardware wallet.\nIl programma che meglio si adatta alle nostre esigenze privacy oriented e\u0026rsquo;sicuramente Wasabi wallet ( Onion link), scaricatelo assolutamente dal link onion (tor) per rimanere il piu possibili anonimi. Se siete utenti un pochino pi√∫ esperti e sapete collgare un wallet al vostro nodo potete usare anche molti altri wallet famosi come sparrow, electrum, ecc\u0026hellip;\nLe principali features privacy di wasabi sono:\nProtezione contro il tracciamento degli indirizzi (un singolo wallet ha un numero enorme di indirizzi al suo interno, quando ci colleghiamo esso chiede al nodo a cui si connette la quantita\u0026rsquo; di bitcoin presenti su ogni indirizzo, con Wasabi non andremo a comunicare la lista degli address ma andremo a scaricare interamente i blocchi contenenti le nostre transazioni, cosi\u0026rsquo; da mitigare il tracciamento dei nostri indirizzi da parte del nodo a cui ci connettiamo).\nConnessione automatica sempre e solo attraverso TOR che e\u0026rsquo; direttamente incluso all\u0026rsquo;interno del software stesso.\nIndirizzi usa e getta automatici e descrizione degli indirizzi (come spiegheremo nella prossima sezione, per avere una buona privacy e\u0026rsquo; assolutamente obbligatorio usare gli indirizzi sempre e solo una volta, Wasabi wallet automaticamente quando andremo nella sezione \u0026lsquo;Ricevi\u0026rsquo; ci mostrera\u0026rsquo; un indirizzo nuovo e mai usato con anche una piccola sezione chiamata \u0026lsquo;Label\u0026rsquo; in cui potremo dare una sorta di etichetta all\u0026rsquo; indirizzo in mondo da ricordarci per cosa abbiamo usato o a chi abbiamo inviato quella transazione).\nParlando invece di wallet mobile esistono 2 buone alternative:\nBlueWallet Simple Bitcoin Wallet Entrambi pero\u0026rsquo; per un uso che protegga la nostra privacy necessitano di avere un full node proprio o di un conoscente in quanto in mancanza di esso il wallet si connettera\u0026rsquo; a nodi casuali, cosa che vogliamo assolutamente evitare; in caso vogliate usare uno dei due prima di creare/importare il vostro portafoglio connettetevi al vostro nodo ed abilitate TOR (su SBW attivabile dalle impostazioni e su blue abilitato automaticamente se lo si connette ad un nodo con link TOR).\nLe transazioni # Il primo consiglio che posso darvi quando effettuate transazioni e\u0026rsquo; quello di aumentare le euristiche coinvolte e fate il possibile per confondere un possibile ente che analizza la blockchain:\nnon inserite output di una transazioni ovvi e con resti minuscoli (esempio: evitate di inviare una transazione da 0.1 BTC, preferite cifre meno \u0026lsquo;umane\u0026rsquo; come per esempio 0.10127644), variate gli orari di invio delle TX e cambiate le impostazioni della transazione stessa spesso (come per esempio usate a volte la funzione RBF e a volte no), in questo modo eviterete il fingerprinting.\nLe transazioni bitcoin sono basate sugli UTXO (Unspent Transaction Output), la comprensione di quest\u0026rsquo;ultimi e\u0026rsquo; fondamentale per una buona privacy:\nI wallet non sono dei contenitori che hanno all\u0026rsquo; interno semplicemente i vostri bitcoin (come un normale portafoglio con le banconote), ma contengono le vostre monete divise per ogni singola transazione ricevuta (UTXO) ovvero separa metaforicamente il portafoglio in piccole tasche ed ognuna di queste contiene una transazione che avete ricevuto in passato; quando andremo ad inviare i nostri bitcoin, il wallet, o noi manualmente, potremo spendere una (o piu\u0026rsquo; in caso non bastino) vecchia transazione ricevuta ed in caso questa sia maggiore dell\u0026rsquo; importo che vogliamo inviare riceveremo un resto, spieghiamo meglio questa meccanica attraverso questa immagine:\nAlice vorrebbe inviare 4 btc a bob e possiede 3 UTXO: 1 btc, 2 btc e 5 btc; il miglior modo che ha alice per pagare bob e\u0026rsquo; usare il suo UTXO da 5 btc, che pero\u0026rsquo; eccede la quantita\u0026rsquo; che alice vorrebbe inviare, automaticamente il wallet e il protocollo Bitcoin gestiscono la cosa inviando i 5 btc a bob, ma immediatamente 1 btc torna indietro come resto, in modo che bob riceva la quantita\u0026rsquo; corretta di btc e alice ottenga indietro la parte in eccesso.\nIl resto di una transazione bitcoin viene accreditato su un altro indirizzo appartenente sempre al nostro wallet, infatti, per chi non lo sapesse, i Wallet bitcoin derivano da un unica chiave centinaia di migliaia di indirizzi, in questo modo ognuno di noi con un solo portafoglio puo\u0026rsquo; sempre usare per ogni transazione un indirizzo diverso, questa cosa e\u0026rsquo; ESTREMAMENTE IMPORTANTE E FONDAMENTALE in quanto ci fa apparire a livello di analisi on-chain come identita\u0026rsquo; separate (i vari address pur appatenendo allo stesso wallet non sono ricollegabili alla stessa identita\u0026rsquo; analizzando la blockchain).\nIl resto di una transazione (La parte di un UTXO che ci viene rimandata indietro nell\u0026rsquo;immagine precedente) e\u0026rsquo; una sorta di \u0026lsquo;Scoria tossica\u0026rsquo; per la nostra privacy in quanto e\u0026rsquo; direttamente ricollegabile utilizzando l\u0026rsquo;analisi della blockchain al nostro precedente indirizzo da cui era partita la transazione e permette ad un utente malevolo esterno di analizzare lo storico delle transazioni passate e future che coinvolgeranno questo resto, collegandole ad un unica identita\u0026rsquo;.\nCome fare quindi per \u0026lsquo;ripulire\u0026rsquo; questi resti? ci sono due modi principali e li analizzeremo a breve nelle sezioni successive della guida.\nIl coinjoin # In sostanza, un CoinJoin comporta la combinazione di input da diversi utenti in una singola transazione. Prima di spiegare il come (e il perch√©), diamo un\u0026rsquo;occhiata alla struttura di una transazione normale. Le transazioni Bitcoin sono costituite da input e output. Quando un utente vuole effettuare una transazione, prende i suoi UTXO come input, specifica gli output e firma gli input. E\u0026rsquo; importante sottolineare che ciascun input viene firmato in modo indipendente, e gli utenti possono impostare output multipli (destinati a diversi indirizzi).\nSe analizziamo una transazione composta da quattro input (0,2 BTC ciascuno) e due output (0,7 BTC e 0,09 BTC), possiamo fare alcune supposizioni. La prima √® che stiamo guardando lo svolgimento di un pagamento ‚Äì il mittente sta inviando uno degli output a qualcuno, e restituendo il resto a s√© stesso. Dato che ha usato quattro input, l\u0026rsquo;output pi√π grande √® probabilmente per il ricevente. Nota che mancano 0,01 BTC negli output, corrispondenti alla commissione pagata ai miner. E\u0026rsquo; anche possibile che il mittente voglia creare una UTXO grande riunendo diverse pi√π piccole, quindi consolida gli input pi√π piccoli per ottenere il risultato desiderato di 0,7 BTC. Un\u0026rsquo;altra supposizione che possiamo fare si basa sul fatto che ogni input viene firmato in modo indipendente. Questa transazione potrebbe avere fino a quattro partecipanti diversi che firmano gli input, e qui troviamo il principio che rende efficaci i CoinJoin.\nCome funziona il coinjoin # L\u0026rsquo;idea √® che pi√π parti si coordinano per creare una transazione, fornendo ciascuna gli input e gli output desiderati. Dato che tutti gli input vengono combinati, diventa impossibile dire con certezza quale output appartiene a quale utente. Considera il diagramma riportato sotto:\nQui, abbiamo quattro partecipanti che vogliono spezzare il collegamento tra transazioni. Si coordinano tra loro (o tramite un coordinatore dedicato) per annunciare gli input e gli output che vogliono includere.\nIl coordinatore prender√† tutte le informazioni, le user√† per creare una transazione, e far√† firmare ogni partecipante prima di trasmetterla al network. Quando gli utenti hanno firmato, la transazione non pu√≤ essere modificata senza diventare invalida. Quindi, non c\u0026rsquo;√® il rischio che il coordinatore scappi con i soldi.\nLa transazione funziona come una sorta di scatola nera per mischiare monete. Ricorda che di fatto distruggiamo UTXO per crearne di nuove. L\u0026rsquo;unico collegamento tra le vecchie e le nuove UTXO che abbiamo √® la transazione stessa, ma, ovviamente, non possiamo distinguere tra i partecipanti. Nella migliore delle ipotesi, possiamo dire che un partecipante ha fornito uno degli input e potrebbe forse essere il nuovo proprietario di un risultante output. Ma anche questo non √® affatto garantito. Chi pu√≤ dire, analizzando la transazione descritta sopra, che ci sono quattro partecipanti? Si tratta di una persona che invia i propri fondi a quattro suoi indirizzi? Due persone che effettuano due acquisti separati e restituiscono 0,2 BTC ciascuno nei propri indirizzi? Quattro persone che inviano a nuovi partecipanti, o rinviano indietro a s√© stessi? Non possiamo esserne sicuri.\nCome appare un coinjoin visto da un block explorer (blockstream)\nPossiamo sfruttare quindi il coinjoin (gi√† integrato all\u0026rsquo;interno del wallet consigliato precedentemente) per andare a ripulire tutti i nostri resti. Purtroppo su wasabi l\u0026rsquo;importo minimo per effettuare un coinjoin √® di 0.1 bitcoin, se non arriviamo a questa cifra possiamo usare HODL HODL, aspettare il nuovo aggiornamento di wasabi wallet che permetter√† coinjoin con qualsiasi cifra (in arrivo a breve) oppure provare a ri-guadagnare privacy utilizzando Lightning Network (da ora abbreviato in LN) come spiegato nella prossima sezione.\nLightning Network # In questo paragrafo non andremo direttamente a spiegare cosa √® e come funziona LN in quanto sarebbe davvero troppo lungo e complicato, analizzeremo invece come utilizzarlo praticamente per migliorare la nostra privacy.\nL\u0026rsquo;ideale sarebbe avere un nodo LN, in caso questo non sia possibile potremo usare un wallet compatibile con LN, ecco una piccola selezione di quelli che ritengo migliori:\nPhoenix probabilmente il miglior wallet pronto all\u0026rsquo;uso per quanto riguarda la privacy, il grosso \u0026lsquo;contro\u0026rsquo; √® l\u0026rsquo;alto costo che si trattiene l\u0026rsquo;azienda che lo ha creato come fee di utilizzo fee di phoenix). Breez Sarebbe uno dei migliori, 0 fee, solo quelle di rete, ottimi servizi integrati, non supporta tor ma possiamo usarlo con orbot o vpn ma ha un grosso difetto: effettua i backup del wallet solo su google drive o su un server personale se ne possedete uno, non ci sono alternative funzionanti, a mio parere un grosso difetto. Per guadagnare un minimo di privacy sui nostri resti accumulati nei nostri indirizzi possiamo depositarli sul nostro wallet LN con delle transazioni onchain\n!ATTENZIONE! E\u0026rsquo; fondamentale che prima di tutto usiate tor o vpn quando utilizzate il wallet LN, inoltre inviate i resti uno alla volta, in modo da non collegare tutti i vari resti alla vostra identita\u0026rsquo; (quando depositate fondi sul wallet LN con una transazione onchain il wallet utilizzera\u0026rsquo; i submarine swap e vi generera\u0026rsquo; un indirizzo diverso per ogni transazione di deposito, inviando un resto alla volta sembrerete identita\u0026rsquo; diverse sull blockchain).\nuna volta ricevuti i vari fondi sul wallet possiamo ri-mandarli on chain tramite siti come Boltz ( ONION LINK USATELO) sempre in piccole transazioni diverse e sempre con importi che non sembrino umani (come spiegato prima).\nConclusione # Riassumendo la guida possiamo ripassare i punti fondamentali:\nSe possibile facciamo girare un full node BTC e LN in casa nostra ed utilizziamo Wasabi come nostro wallet desktop, i mobile wallet se potete evitateli o per lo meno teneteli scollegati a livello di transazioni blockchain dal vostro portafoglio di HODL, usate sempre tor (wasabi lo integra automaticamente) e state attenti a come effettuate le transazioni, ogni indirizzo va usato una volta sola, effettuate transazioni diverse tra loro che non sembrino \u0026lsquo;umane\u0026rsquo; ed inoltre fate il possibile per evitare resti, in caso non ci riusciate ripuliteli con coinjoin o LN.\nSpero che la guida vi sia piaciuta e che vi abbia aiutato!\nDonazione con ","date":"13 maggio 2024","externalUrl":null,"permalink":"/guides/bitcoin/","section":"Guide","summary":"Bitcoin # Questa sar√† una guida completa sull\u0026rsquo;utilizzo privacy oriented di Bitcoin partendo dalle basi fino ad arrivare a livelli avanzati.","title":"Tutorial all'utilizzo di bitcoin tutelando la propria privacy","type":"guides"},{"content":" SEED # Calcolare una frase mnemonica di 24 parole usando dadi, carte e penna.\nTedesco üá©üá™\nInglese üá∫üá≤\nIntroduzione # Questo progetto ti aiuter√† a capire meglio il funzionamento delle chiavi riguardanti Bitcoin e a generarle in autonomia. Avrai bisogno di matita, carta, qualcosa per generare un output casuale in binario (come una moneta o un dado) e un computer. Invece di studiare gli aspetti teorici riguardanti il funzionamento dei seed, nella guida di oggi metteremo le mani \u0026lsquo;in pasta\u0026rsquo; e opereremo con un approccio pratico.\nIMPORTANTE PREAMBOLO # Prima di usare direttamente le chiavi generate, √® meglio fare un po\u0026rsquo; di pratica seguendo i passi di questa guida.\nQuando crei la tua vera chiave, quella che userai per custodire i tuoi bitcoin, devi generarla su un computer air-gapped. Il dispositivo non deve avere la capacit√† di connettersi a Internet. Non √® sufficiente disattivare temporaneamente la connessione Wi-Fi se si √® seriamente interessati alla sicurezza; esistono tecniche sofisticate che consentono di estrarre le tue chiavi private anche se sei temporaneamente disconnesso da Internet.\nOk, iniziamo\u0026hellip;\nPASSO 1 ‚Äì CREA NUMERI BINARI CON ENTROPIA # √â possibile generare entropia lanciando una moneta 256 volte, ma √® piu randomico e veloce usare i dadi. Puoi acquistare dadi da casin√≤ per garantire tiri equi e casuali, ma va benissimo usare qualsiasi vecchio dado. Anche se i tuoi dadi non sono perfetti e hanno qualche difetto, fintanto che ne usi diversi alla volta, otterrai una casualit√† sufficiente.\nQuesta √® la procedura (una delle tante possibili):\nPrendi circa quattro dadi (ad esempio da un vecchio gioco da tavolo). Considera i numeri 1, 2 o 3 come zero mentre 4, 5 o 6 saranno un uno. In questo modo otterrai un output binario (solo zeri e uno nel risultato finale) con i dadi (ad es. tira un 3, registra uno zero; tira un 6, registra un uno). Crea 23 righe di 11 cifre. La 24a riga avr√† bisogno solo di tre cifre. Per ogni riga, raggruppa le cifre in gruppi di 4-4-3 (vedi immagine sotto) per facilitare la lettura e il calcolo. Mantieni le colonne verticali allineate il pi√π possibile e lascia spazio tra ogni riga per i calcoli manuali. Tutto avr√† pi√π senso tra poco. Esempio:\nCi sono 256 cifre binarie: 23 serie complete di 11 cifre con la 24a riga che ne richiede solo tre.\nPer ora, tieni presente che le 11 cifre binarie verranno tradotte in una parola della mnemonic phrase che rappresenter√† il tuo seed. Siccome stiamo utilizzando un totale di 256 cifre casuali come entropia, e stiamo dividendo le cifre in gruppi di 11, se dividiamo 256 per 11 ci aspettiamo di ottenere il numero di parole della menmonic phrase. Ma il risultato di 256 diviso 11 non √® un numero intero bens√¨ 23 con un resto di 3.\nAbbiamo bisogno di altre 8 cifre, altri 8 bit, per creare la nostra 24a parola. Una volta che abbiamo 264 bit in totale, tutto si divide in 24 gruppi di 11 cifre, da cui ricavare una mnemonic phrase di 24 parole. Come vedremo in seguito, questi ultimi 8 bit extra avranno un importante ruolo da svolgere.\nUna nota sulla casualit√†:\nPossiamo creare questi 256 bit di dati casuali come preferiamo, purch√© siano effettivamente entropici. Se non sono randomici, qualcuno potrebbe essere in grado di riprodurre i dati. Sarebbe quindi in grado di ricreare la tua chiave privata e prendere tutti i tuoi bitcoin. Esempio: se crei 256 bit di tutti zeri (chiaramente non casuali), allora qualcuno sar√† in grado di indovinare la tua chiave privata. Ecco la prova: ho generato una chiave privata da quella terribile casualit√† di tutti zeri e ho trovato il portafoglio esistente di qualcuno. Se non fosse gi√† stato svuotato, avrei potuto rubare i fondi.\nSapevano chiaramente cosa stavano facendo perch√© si trattava di una piccola somma che non √® stata lasciata l√¨ per molto tempo. Potrebbe essere stata una dimostrazione, chiss√†. Ma altre persone hanno creato chiavi private non casuali facilmente indovinabili e di conseguenza hanno perso i loro bitcoin. Ma non preoccuparti, se crei una chiave privata veramente casuale, qualcuno dovrebbe ripetere esattamente i tuoi lanci di dadi binari o lanci di monete e, grazie alla matematica esponenziale, ci√≤ non accadr√† prima della fine dell\u0026rsquo;universo.\nPASSO 2 ‚Äì CALCOLARE IL CHECKSUM # Questi ultimi 8 bit mancanti devono essere calcolati per formare quello che viene chiamato \u0026ldquo;checksum\u0026rdquo;.\nCos\u0026rsquo;√® un checksum? Un checksum √® il modo in cui i computer sanno che hai commesso un errore di battitura quando inserisci dati come il numero della tua carta di credito o del tuo conto bancario o il tuo codice fiscale. Pu√≤ essere davvero utile che il computer ti avverta se hai commesso un errore di battitura nella tua chiave privata!\nPer calcolare il checksum avrai bisogno di un computer Linux o Mac (la procedura pu√≤ essere fatta a mano , ma √® molto complicata ‚Äì ecco una guida). Se hai Windows 10, puoi installare l\u0026rsquo;app Ubuntu (una versione del terminale di Linux) dal Microsoft Store. Basta cercare ‚ÄúUbuntu‚Äù e installarlo. Utilizzerai il terminale di Ubuntu per eseguire i comandi che seguono. L\u0026rsquo;app √® una sessione temporanea; nessun file viene memorizzato all\u0026rsquo;interno della stessa. Ci√≤ significa che avrai una sessione pulita ogni volta che lo esegui.\nAgli utenti Windows consiglio di adottare questa soluzione alternativa. Ne ho provato altre ma ho sempre riscontrato dei problemi. Un\u0026rsquo;altra soluzione potrebbe essere usare il tool di Massimo Musumeci che per√≥ altererebbe l\u0026rsquo;ordine con cui stiamo facendo le cose in questa guida: Tool di Massimo\nOra che hai un terminale sul tuo computer Mac, Linux o Windows 10, digita il comando seguente. Sostituisci le mie cifre binarie con le tue cifre binarie casuali (nota che dovrebbe essere tutta una riga molto lunga, anche se il modo in cui viene visualizzato qui potrebbe sembrare diverso)\necho 10101111001110000000111101100011 1101011110100101001000101100111101111 0100011000010100011111100100010100011 1100011101010001100111111100001010001 1000101011101000101001111111010100101 0011110110110110000001101111010011000 0011101011010010000100010000100001001 11 | shasum -a 256 -0\nSpiegazione del codice: il comando echo mostrer√† il risultato dell\u0026rsquo;operazione nel terminale, il comando shasum -a comunica al pc di eseguire la funzione di hash sha256 sui dati da noi inseriti mentre -0 spiega al computer che i dati che stiamo trattando sono binari.\nEseguendo questo comando, l\u0026rsquo;hash risultante viene visualizzato nella riga seguente, che inizier√† con \u0026ldquo;b184\u0026rdquo;:\nOra possiamo iniziare a calcolare il checksum. Prendiamo le prime due cifre dell\u0026rsquo;output dell\u0026rsquo;hash, in questo caso ‚Äúb‚Äù e ‚Äú1‚Äù. Questi sono numeri esadecimali. In esadecimale, invece di utilizzare le cifre da 0 a 9, contiamo fino a 15 utilizzando le lettere dell\u0026rsquo;alfabeto per rappresentare i numeri maggiori di nove:\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f\nSimile a come le carte da poker contano da 1 a 13 usando le figure:\nAsso, 2, 3, 4, 5, 6, 7, 8, 9, 10, Fante, Regina, Re\nNel mio hash, la prima cifra, \u0026ldquo;b\u0026rdquo;, corrisponde a 11; 1 equivale a 1.\nOra convertiamo questi due numeri nelle loro rappresentazioni binarie a quattro cifre. Puoi farlo facendo riferimento alla tabella qui sotto:\n\u0026lsquo;11\u0026rsquo; in binario √® \u0026lsquo;1011\u0026rsquo;, \u0026lsquo;1\u0026rsquo; √® \u0026lsquo;0001\u0026rsquo;. Siamo passati da b e 1, a 11 e 1, e infine a 1011 e 0001.\nQuesti numeri a quattro cifre sono il checksum che aggiungeremo ai nostri bit per completare la nostra 24a parola!\nAggiungili alla 24a riga per completare la serie finale di 11 cifre binarie. Ora hai 264 cifre in totale (vedi come viene completata la 24a riga nel diagramma pi√π in basso)\nPASSO 3 ‚Äì CONVERSIONE DA BINARIO A DECIMALE # Ciascuno dei gruppi di 11 cifre binarie deve essere convertito in un numero decimale.\nPuoi inserirli in un calcolatore binario-decimale online, ma sarebbe estremamente rischioso per la sicurezza. Ti mostrer√≤ come farlo manualmente.\nIn un sistema numerico binario, ci sono solo 0 e 1. Le altre cifre che conosci (2,3,4,5,6,7,8,9) non esistono. Quindi bisogner√† trasformare questi numeri in zeri e uno.\nCon undici cifre binarie, il numero pi√π piccolo possibile √® zero (00000000000), il pi√π grande √® 2047 (11111111111).\nPrendiamo ciascun gruppo di undici cifre binarie sulla nostra pagina (ogni riga) e convertiamolo in un numero decimale decimale. Puoi farlo manualmente o convertirli dalla riga di comando in Linux, Mac o nell\u0026rsquo;app Ubuntu.\nPer il numero 10101111001, devi digitare:\necho \u0026ldquo;$((2#10101111001))\u0026rdquo;\nOtterrai come output \u0026ldquo;1401\u0026rdquo;. A questo punto calcola il decimale di tutti i tuoi 24 gruppi di 11 cifre binarie.\nFare questa conversione esclusivamente a mano √® pi√π difficile, ma possibile.\nNella parte superiore della pagina, scrivi questa sequenza esatta di numeri da destra a sinistra, verticalmente in linea con le cifre binarie sottostanti: \u0026ldquo;1024\u0026rdquo; sopra la prima colonna di cifre binarie. Quindi \u0026ldquo;512\u0026rdquo; sulla colonna successiva. Poi \u0026ldquo;256\u0026rdquo;. E cos√¨ via, dimezzando il numero ogni volta finch√© non si finisce con \u0026ldquo;1\u0026rdquo; sopra l\u0026rsquo;ultima (undicesima) colonna delle cifre binarie.\nOra, osserva la tua prima riga di cifre binarie. Ovunque ci sia un ‚Äú1‚Äù, aggiungi il numero decimale che si trova direttamente sopra di esso e registralo sotto la cifra binaria. Dove c\u0026rsquo;√® uno ‚Äú0‚Äù ignora il numero sopra. In questo modo:\nIn questo esempio, c\u0026rsquo;√® un \u0026ldquo;1\u0026rdquo; sotto la colonna 1024, la colonna 256, il 64, il 32, il 16, l'8 e l'1.\nAggiungi i numeri decimali per ottenere il totale:\nOra ripeti questo processo per tutte le 24 righe:\nOra avrai 24 numeri decimali che vanno da 0 a 2047.\nPASSO 4 ‚Äì CERCA IL BIP 39 # Il protocollo BIP 39 (Bitcoin Improvement Proposal numero 39) specifica 2048 parole diverse, elencate in ordine alfabetico. Quando questo elenco viene letto, ogni parola pu√≤ essere identificata dalla sua posizione numerica nell\u0026rsquo;elenco. I numeri appena calcolati vengono utilizzati per cercare la parola corrispondente. Ad esempio, la prima riga ha prodotto il numero 1401 che equivale alla parola \u0026ldquo;quality\u0026rdquo; nell\u0026rsquo;elenco di parole BIP 39 ordinato.\nZero √® il valore pi√π piccolo possibile che puoi calcolare per una riga (dal binario 00000000000). In tal caso, selezionerai \u0026ldquo;abandon\u0026rdquo;, la prima parola nell\u0026rsquo;elenco.\nIl numero pi√π grande possibile √® 2047 (ottenuto dal binario 11111111111). La parola corrispondente √® \u0026ldquo;zoo\u0026rdquo;, l\u0026rsquo;ultima parola della lista.\nC\u0026rsquo;√® un problema da tenere presente: i computer contano gli elementi a partire da 0. Quindi il quinto elemento in un elenco √® il numero 4 del computer.\nLa specifica ufficiale delle parole BIP 39 √® su GitHub¬†ma l\u0026rsquo;elenco delle parole viene visualizzato con numeri di riga che iniziano con uno anzich√© zero. Quindi, mentre \u0026ldquo;abstract\u0026rdquo; √® l\u0026rsquo;ottava parola ed √® elencata nella riga numero 8, il suo effettivo equivalente numerico BIP 39 √® 7.\nLa mia prima riga di 11 cifre binarie d√† come risultato 1401 in decimale. Quindi nell\u0026rsquo;elenco GitHub, devo trovare la parola sulla riga 1402 (1401 + 1). Otterr√≤ la parola \u0026ldquo;quality\u0026rdquo;. Procedi a cercare ogni decimale, avendo cura di aggiungere un 1 in pi√π al risultato calcolato in modo che corrisponda alla numerazione delle righe di GitHub e trova la parola per ciascuna delle 24 righe.\nBen fatto! Se sei arrivato fin qui! Ora hai una mnemonic phrase Bitcoin valida di 24 parole. Ora puoi buttarlo via. A meno che tu non abbia utilizzato l\u0026rsquo;approccio completamente manuale, non puoi usarlo per i tuoi Bitcoin perch√© non √® stato creato in un ambiente sicuro!\nIn realt√†, prima di buttarlo, potresti provare ad inserire le parole in un portafoglio hardware o in un portafoglio software e vedere se vengono rifiutate. Se vengono rifiutate, hai commesso un errore da qualche parte, il che √® molto facile da fare con l\u0026rsquo;approccio manuale. Se c\u0026rsquo;√® qualche errore, il checksum non corrisponder√† e tutti i portafogli segnaleranno immediatamente un errore.\nPER LE TUE CHIAVI REALI # Genera assolutamente le tue chiavi usando un procedimento il pi√π possibile manuale e, nelle parti in cui ti appoggi ad un dispositivo elettronico, sfrutta sistemi sicuri, sistemi operativi vergini e valuta di smontare la scheda wireless dal tuo pc. Un\u0026rsquo;opzione potrebbe essere installare TailsOS su un disco esterno, smontare la scheda wireless dal tuo pc, avviare l\u0026rsquo;OS e mantenerlo disconnesso da internet fino alla fine della procedura. Una volta calcolato il seed, spegnere il pc e ri-avviare il computer con la scheda wireless ri-montata. E possibile anche usare dei raspberry come pc air-gapped.\nDonazione con ","date":"12 maggio 2024","externalUrl":null,"permalink":"/guides/seed/","section":"Guide","summary":"SEED # Calcolare una frase mnemonica di 24 parole usando dadi, carte e penna.","title":"Come generare un seed bitcoin con i dadi","type":"guides"},{"content":" Tor # Tutorial per il setup di un nodo Tor\nQuesta vuole essere una guida completa per lanciare un nodo a supporto della rete tor. Prima di iniziare spieghiamo in breve cos'√® questo protocollo:\nLa rete Tor, acronimo di \u0026quot;The Onion Router\u0026quot;, √® una rete di comunicazione anonima progettata per aumentare la privacy e la sicurezza degli utenti su Internet. Il suo nome deriva dal concetto di \u0026quot;onion\u0026quot;, poich√© il suo funzionamento si basa su diverse strati di crittografia, simili agli strati di una cipolla.\nIl principale obiettivo di Tor √® rendere difficile il tracciamento delle attivit√† online degli utenti, proteggendo la loro identit√† e la loro posizione. La rete funziona instradando il traffico Internet attraverso una serie di server volontari, noti come \u0026quot;nodi Tor\u0026quot;, gestiti da volontari distribuiti in tutto il mondo. Ogni nodo Tor rimuove uno strato di crittografia, rivelando solo l'indirizzo IP del nodo precedente, rendendo difficile risalire all'origine del traffico.\nGrazie a questo approccio stratificato, Tor fornisce un grado significativo di anonimato agli utenti, ma √® importante notare che non offre una sicurezza totale e pu√≤ essere vulnerabile a attacchi in alcuni scenari. Nonostante ci√≤, la rete Tor √® ampiamente utilizzata da giornalisti, attivisti per i diritti umani e utenti che cercano di preservare la loro privacy online.\nPer ulteriori informazioni consiglio caldamente l'ascolto di questa puntata: Obiettivo # L'obiettivo finale di questa guida sar√† quello di hostare un nodo Tor (in locale o su una VPS) valutando i vari benefici e rischi. Alla fine di questa guida starai ufficialmente aiutando il network dando anche tu il tuo contributo rendendolo piu sicuro e resistente ad attacchi.\nCi saranno 2 modi per seguire questa guida:\nCon script automatizzato creato da me (consigliato) Compilando tutto da sorgente (pi√∫ complicato) Prima di procedere per√≤ con l'installazione vera e propria, nella prossima sezione analizziamo i rischi e benefici di installare un nodo su una propria rete domestica oppure su un server a noleggio.\nValutazione dei rischi # L'installazione di un nodo Tor, che sia su una rete domestica o su un server a noleggio online, richiede una valutazione attenta delle esigenze individuali. Nel contesto di una rete domestica, uno dei principali vantaggi risiede nel completo controllo dell'infrastruttura, permettendo la personalizzazione delle configurazioni in base alle proprie necessit√†. Inoltre, l'esecuzione di un nodo Tor in ambito domestico pu√≤ risultare pi√π economica, specialmente se si dispone gi√† dell'hardware necessario.\nTuttavia, sono presenti alcuni svantaggi da prendere in considerazione. Le connessioni domestiche spesso presentano limiti di larghezza di banda, influenzando la velocit√† complessiva del nodo Tor. Inoltre, la connessione a Internet potrebbe non garantire sempre un livello di affidabilit√† ottimale, e l'assegnazione di indirizzi IP dinamici da parte dei provider potrebbe rendere il nodo meno stabile nel tempo. Un ultimo sventaggio da notare √® che lanciando un nodo nella propria rete domestica si ammette pubblicamente di avere un nodo tor in casa, cosa che per alcuni amanti della privacy pu√≤ comoportare un noioso problema da affrontare.\nD'altra parte, l'utilizzo di un server a noleggio online offre vantaggi come una larghezza di banda elevata, maggiore affidabilit√† e la possibilit√† di avere un indirizzo IP statico. Tuttavia, questa opzione comporta costi mensili pi√π elevati e potrebbe limitare il controllo diretto sull'hardware rispetto a una soluzione domestica.\nVa inoltre considerato che la gestione remota di un server a noleggio potrebbe richiedere la conformit√† alle leggi e alle politiche del paese in cui il server √® ospitato. In conclusione, la scelta tra un nodo Tor su rete domestica e su server a noleggio online dipende da vari fattori, tra cui il livello desiderato di controllo locale, il budget disponibile, la larghezza di banda necessaria e la conformit√† alle leggi locali.\nPer riassumere: un nodo casalingo fornisce una maggiore sicurezza e decentralizzazione al network, i principali svantaggi sono che si leaka il fatto che si sta runnando un nodo tor presso il proprio domicilio e si potrebbe avere qualche difficolt√† in pi√π a gestrire i vari permessi della rete locale. Quando invece si parla di server a noleggio online (pi√π avanti nella guida ve ne consiglier√≤ alcuni) la configurazione sar√† piu facile e veloce a fronte per√≤ di costi piu alti e un minor controllo diretto sull'hardware.\nScelta dell'hosting provider # Quando ci si appresta a noleggiare una Virtual Private Server (VPS) per ospitare un nodo Tor, √® fondamentale porre attenzione a diversi parametri al fine di garantire un'esperienza affidabile e sicura:\nIn primo luogo, la larghezza di banda fornita dalla VPS gioca un ruolo cruciale, influenzando direttamente la velocit√† e la stabilit√† del nodo. Una larghezza di banda adeguata √® essenziale per gestire in modo efficiente il traffico sulla rete Tor.\nLa localit√† del server rappresenta un ulteriore aspetto da valutare attentamente. scelta di una posizione geografica strategica pu√≤ migliorare le prestazioni complessive del nodo, riducendo la latenza per gli utenti che si connettono attraverso di esso. Ha anche importanti ripercussioni in quanto in base alla giurisdizione cambiano anche le leggi informatiche a cui deve sottostare il vostro provider.\nLa politica sulla privacy del fornitore di VPS √® altrettanto critica. Verificare che il provider rispetti la privacy degli utenti e non registri o monitori attivit√† sensibili √® essenziale per mantenere un nodo utile alla rete.\nInoltre, √® consigliabile optare per una VPS con un indirizzo IP statico (quasi tutte lo forniscono), poich√© ci√≤ contribuir√† a garantire la stabilit√† del nodo Tor nel lungo periodo.\nInfine, esaminare le opzioni di sicurezza fornite dal provider, come firewall e crittografia, rappresenta un aspetto fondamentale per proteggere il nodo Tor da potenziali minacce esterne.\nAttraverso una valutazione accurata di questi parametri, √® possibile selezionare una VPS che soddisfi i requisiti necessari per ospitare in modo affidabile e sicuro un nodo Tor.\nEcco un elenco di quelle a mio parere migliori per hostare un nodo:\nVPSbG a mio parere il miglior rapporto tra potenza, banda, privacy, usabilit√† e metodi di pagamento accettati. Non il pi√π economico ma quello che offre la miglior esperienza d'uso. Server in bulgaria e accettano sia middle che exit node (se configurati correttamente, il mio script lo fa gi√† in automatico). UDN ovvero Ukranian Data Network offre VPS in maniera davvero super privacy, e con super privacy intendo che l'unico modo per comprarne una √® scrivere ad uno degli admin su XMPP, non c√® altro modo per acquistare e non c√® nessun account da creare. VPS a buon prezzo, non molto potenti ma con molta banda a disposizione (10.15 TB). Trabia √® un VPS provider in moldavia, ha ottimi prezzi, vps non molto potenti ma banda ILLIMITATA, una vera rarit√† a questi prezzi. Lato privacy bene ma non benissimo, accettano bitcoin ma vi chiedono di inserire un po di dati personali. Per esperienza personale i dati possono essere tutti falsi ma devono risultare credibili (mette un indirizzo e luogo veri, nomi e cognomi credibili, ecc). Come requisiti per dei nodi tor conviene avere:\nMiddle relay: almeno 1 core, 512MB di ram e 2 TB di bandwidth al mese anche se √® consigliabile averne almeno almeno 5 TB. Per relay molto veloci (sopra i 40mb/s di velocit√† di connesione serve almeno 1GB di ram). Exit nodes: almeno 1 core, 1GB di ram e 2 TB di bandwidth al mese anche se √® consigliabile averne almeno almeno 5 TB. Per relay molto veloci (sopra i 40mb/s di velocit√† di connesione serve almeno 2GB di ram). Dopo aver acquistato un eventuale VPS possiamo passare direttamente alla configurazione!\nSetup del nodo con script automatizzato (consigliato) # Iniziamo la guida con il metodo a mio parere pi√π veloce ed efficente, quello con lo script bash da me sviluppato. I requisiti sono avere un qualsiasi pc, vps o raspberry pronto e con installato Debian o Ubuntu. Una volta collegati alla shell del vostro pc (che da ora indicher√† qualsiasi opzione abbiate scelto tra hardware casalingo o VPS), ricordate che se avete una vps online con accesso root dovete omettere la parola sudo all'inizio delle righe sottostanti. Potete ora lanciare i seguenti comandi:\nsudo apt-get update \u0026amp; apt-get upgrade -y sudo apt install git git clone https://github.com/Turtlecute33/Tor-node-script.git cd Tor-node-script chmod +x tor.sh sudo ./tor.sh Queste righe di codice eseguono le seguenti operazioni: aggiornano il sistema operativo (Ubuntu o derivati), installano Git, clonano il repository da github, accedono alla directory clonata, concedono i permessi di esecuzione allo script, ed infine eseguono tor.sh.\nA questo punto lo script tor partir√†, aggiorner√† il vostro sistema operativo, installer√† tutte le dipendenze, verificher√† le firme pgp, installer√† tor e vi chieder√† alcuni input per personalizzare la vostra esperienza:\nMiddle Relay o Exit?\nNella puntata del podcast affronto le differenze tra questi due tipi di nodi, il middle √® pi√π facile da gestire, non comporta particolari rischi ed √® quello pi√π consigliato per l'utente comune. L'exit relay √® la versione hardcore per utenti un po pi√π esperti del relay precedente. Se non sei un utente esperto selezione l'opzione middle relay digitando il numero ad essa assegnato. Nickname:\nIn questa sezione dobbiamo digitare il nome che vogliamo dare al nostro nodo tor. Evitate nomi troppo lunghi e non usate spazi, gli unici caratteri consentiti sono lettere, numeri e underscore. Email:\nQuesta sezione dovrebbe essere usata per dare un contatto con cui scrivervi in caso di problemi sul vostro nodo molto gravi alla Tor foundation. Attenzione, state esponendo un email online collegata ad un nodo tor. 3 opzioni potrebbero essere: mettere un vostro contatto ma scritto in modo strano in modo che bot online non riconoscano la scritta come email (esempio [turtlecute][@][horsefucker].[org]), scrivere \u0026quot;redacted\u0026quot; per non mettere dati oppure lasciare un indirizzo bitcoin/lightning per donazioni (non ve ne arriveranno probabilmente). Bandwidth:\nIn questo campo dovremo esprimere la banda settimanale concessa al nodo. Le unita di misura usabili sono (MB / GB / TB), se avete 1 TB di banda disponibile sul vostro nodo potreste scrivere nel campo banda (che si intende come settimanale) 250 GB (che per 4 settimane fa 1 TB al mese). rispettate la formattatura numero, spazio, unit√† di misura. Complimenti avete finito! In caso di errori durante lo script potete aprire issue sul mio github o ricontrollare che le cose scritte nel file etc/tor/torrc siano corrette. Potete ora saltare direttamente alla sezione sui controlli post installazione.\nSetup del nodo da sorgente # Se intraprendete questa strada perdonatemi ma non potr√≤ assistervi in quanto i possibili errori che potete fare nel percorso sono tanti e difficili da trovare. In questa sezione della guida rifaremo tutto ci√≤ che il mio script fa in automatico ma a mano, questa guida √® scritta per sistemi operativi basati su debian, se volete usare un altro tipo di OS sul sito del TorProject ci sono guide per ogni sistema.\nPrerequisiti:\nAvere un pc debian based pronto all'uso e con shell aperta Abilitare gli aggiornamenti automatici del pc, potete seguire questa guida per attivarli, non √® un passo obbligatorio ma molto, molto, mooooooolto consigliato. In caso saltiate questa sezione dovrete manualmente ogni 1/2 mesi accedere al nodo Tor ed aggiornarlo manualmente. installare tor aggiungendo il repository e la chiave PGP:\\ Installate le dipendenze:\napt install apt-transport-https controllate il nome della vostra distribuzione e appuntatevi il nome (esempi: bookworm, focal-fossa, bullseye, ecc)\nlsb_release -c Create un nuovo file nella cartella /etc/apt/sources.list.d/ chiamato tor.list (per farlo usate il comando: nano /etc/apt/sources.list.d/tor.list) ed inserite le righe sottostanti ricordandovi di sostituire il tag distribution con il nome che vi eravate appuntati poco fa.\ndeb [signed-by=/usr/share/keyrings/tor-archive-keyring.gpg] https://deb.torproject.org/torproject.org main deb-src [signed-by=/usr/share/keyrings/tor-archive-keyring.gpg] https://deb.torproject.org/torproject.org main Aggiungi le chiavi PGP e il repository di tor con questo comando:\nwget -qO- https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --dearmor | tee /usr/share/keyrings/tor-archive-keyring.gpg \u0026gt;/dev/null Aggiorna i repository e installa tor:\napt update apt install tor deb.torproject.org-keyring A questo punto andiamo a modificare il file di configurazione di tor con il comando: nano etc/tor/torrc ed in base a se volete fare un middle o exit relay andate a copiare una delle configurazioni sottostanti.\nAttenzione!! Dopo avere copia incollato la configurazione ci sono dei parametri da modificare, saranno elencati piu avanti dopo la sezione con i due esempi qua sotto.\nMiddle relay\nNickname $nickname ContactInfo $contact_info AccountingRule sum AccountingStart week 1 10:00 AccountingMax $bandwidth ORPort 443 ExitRelay 0 SocksPort 0 Exit relay\nNickname $nickname ContactInfo $contact_info AccountingRule sum AccountingStart week 1 10:00 AccountingMax $bandwidth ORPort 443 ExitRelay 1 SocksPort 0 DirPort 80 DirPortFrontPage /etc/tor/tor-exit-notice.html ExitPolicy accept *:22 # SSH ExitPolicy accept *:23 # Telnet ExitPolicy accept *:43 # WHOIS ExitPolicy accept *:53 # DNS ExitPolicy accept *:79 # finger ExitPolicy accept *:80-81 # HTTP ExitPolicy accept *:88 # kerberos ExitPolicy accept *:110 # POP3 ExitPolicy accept *:143 # IMAP ExitPolicy accept *:194 # IRC ExitPolicy accept *:220 # IMAP3 ExitPolicy accept *:389 # LDAP ExitPolicy accept *:443 # HTTPS ExitPolicy accept *:464 # kpasswd ExitPolicy accept *:465 # URD for SSM (more often: an alternative port, see 587) ExitPolicy accept *:531 # IRC/AIM ExitPolicy accept *:543-544 # Kerberos ExitPolicy accept *:554 # RTSP ExitPolicy accept *:563 # NNTP over SSL ExitPolicy accept *:587 # SUBMISSION (authenticated clients send mail over STARTTLS SMTP here) ExitPolicy accept *:636 # LDAP over SSL ExitPolicy accept *:706 # SILC ExitPolicy accept *:749 # kerberos ExitPolicy accept *:853 # DNS over TLS ExitPolicy accept *:873 # rsync ExitPolicy accept *:902-904 # VMware ExitPolicy accept *:981 # Remote HTTPS management for firewall ExitPolicy accept *:989-990 # FTP over SSL ExitPolicy accept *:991 # Netnews Administration System ExitPolicy accept *:992 # TELNETS ExitPolicy accept *:993 # IMAP over SSL ExitPolicy accept *:994 # IRCS ExitPolicy accept *:995 # POP3 over SSL ExitPolicy accept *:1194 # OpenVPN ExitPolicy accept *:1220 # QT Server Admin ExitPolicy accept *:1293 # PKT-KRB-IPSec ExitPolicy accept *:1500 # VLSI License Manager ExitPolicy accept *:1533 # Sametime ExitPolicy accept *:1677 # GroupWise ExitPolicy accept *:1723 # PPTP ExitPolicy accept *:1755 # RTSP ExitPolicy accept *:1863 # MSNP ExitPolicy accept *:2082 # Infowave Mobility Server ExitPolicy accept *:2083 # Secure Radius Service (radsec) ExitPolicy accept *:2086-2087 # GNUnet, ELI ExitPolicy accept *:2095-2096 # NBX ExitPolicy accept *:2102-2104 # Zephyr ExitPolicy accept *:3128 # SQUID ExitPolicy accept *:3389 # MS WBT ExitPolicy accept *:3690 # SVN ExitPolicy accept *:4321 # RWHOIS ExitPolicy accept *:4643 # Virtuozzo ExitPolicy accept *:5050 # MMCC ExitPolicy accept *:5190 # ICQ ExitPolicy accept *:5222-5223 # XMPP, XMPP over SSL ExitPolicy accept *:5228 # Android Market ExitPolicy accept *:5900 # VNC ExitPolicy accept *:6660-6669 # IRC ExitPolicy accept *:6679 # IRC SSL ExitPolicy accept *:6697 # IRC SSL ExitPolicy accept *:8000 # iRDMI ExitPolicy accept *:8008 # HTTP alternate ExitPolicy accept *:8074 # Gadu-Gadu ExitPolicy accept *:8080 # HTTP Proxies ExitPolicy accept *:8082 # HTTPS Electrum Bitcoin port ExitPolicy accept *:8087-8088 # Simplify Media SPP Protocol, Radan HTTP ExitPolicy accept *:8332-8333 # Bitcoin ExitPolicy accept *:8443 # PCsync HTTPS ExitPolicy accept *:8888 # HTTP Proxies, NewsEDGE ExitPolicy accept *:9418 # git ExitPolicy accept *:9999 # distinct ExitPolicy accept *:10000 # Network Data Management Protocol ExitPolicy accept *:11371 # OpenPGP hkp (http keyserver protocol) ExitPolicy accept *:19294 # Google Voice TCP ExitPolicy accept *:19638 # Ensim control panel ExitPolicy accept *:50001-50002 # Electrum Bitcoin SSL ExitPolicy accept *:64738 # Mumble ExitPolicy reject *:* In entrambe le configurazioni sono presenti 3 campi che vanno modificati personalmente:\n$Nickname:\nIn questa sezione dobbiamo digitare il nome che vogliamo dare al nostro nodo tor. Evitate nomi troppo lunghi e non usate spazi, gli unici caratteri consentiti sono lettere, numeri e underscore.\nesempio: \u0026quot;Nickname TORtaruga\u0026quot;. $contact_info:\nQuesta sezione dovrebbe essere usata per dare un contatto con cui scrivervi in caso di problemi sul vostro nodo molto gravi alla Tor foundation. Attenzione, state esponendo un email online collegata ad un nodo tor. 3 opzioni potrebbero essere: mettere un vostro contatto ma scritto in modo strano in modo che bot online non riconoscano la scritta come email.\nesempio: \u0026quot;[turtlecute][@][horsefucker].[org]\u0026quot; oppure scrivere \u0026quot;redacted\u0026quot; se non si vuole pubblicare. $Bandwidth:\nIn questo campo dovremo esprimere la banda settimanale concessa al nodo. Le unita di misura usabili sono (MB / GB / TB), se avete 1 TB di banda disponibile sul vostro nodo potreste scrivere nel campo banda (che si intende come settimanale) 250 GB (che per 4 settimane fa 1 TB al mese). rispettate la formattatura numero, spazio, unit√† di misura.\nesempi: \u0026quot;700 GB\u0026quot;, \u0026quot;2 TB\u0026quot;,\u0026quot;1200 GB\u0026quot;, ecc.. Fatto, il nostro caro nodino Tor √® pronto!\nVerifiche post installazione # Bravissimo eroe!\nChe tu abbia fatto tutto a manina o che tu abbia usato il mio script automatzzato hai ufficialmente creato un nodo Tor! Prima di eseguire tutti i controlli del caso iniziamo riavviando il servizio Tor sul nostro pc (ogni volta che modifichiamo il file /etc/tor/torrc dobbiamo riavviare il servizio per applicare le modifiche):\nsystemctl restart tor@default\nFatto questo il nodo sar√° ufficialmente attivo, in caso di problemi puoi usare il comando:\njournalctl -xeu tor@default\nper andare ad analizzare i log, cosa non proprio facile, ma utile per identificare il problema: (nel 90%) dei casi √© un errrore dentro al file etc/tor/torrc .\nUltimo ma non per importanza se volete monitorare il vostro nodo con un interfaccia simile ad htop potete installare nyx con il comando:\napt install nyx\nlanciandolo con il comando nyx potrete monitorare le statistiche con una grafica simile a questa:\nTest di funzionamento # La verifica finale di funzionamento √© verificare se sul sito ufficiale della Tor foundation con tuti i relay potete trovare dopo qualche ora anche il vostro nodo inserendo nella ricerca il nome o una parte di esso del vostro relay.\nSe viene mostrato correttamente avete ufficialmente un nodo tor attivo!\nConclusioni # Avete finito! Il vostro nodo √© attivo e siete riusciti nella vostra leggendaria impresa!\nGrazie mille per la lettura! Se questa guida ti √© piaciuta condividila sui vari social network e con amici, se ti ha proprio conquistato puoi invece fare una donazione nel bottone qua sotto.\nse hai fatto un nodo tor sei una brava tartaruga üê¢\nDonazione con ","date":"11 maggio 2024","externalUrl":null,"permalink":"/guides/tor/","section":"Guide","summary":"Tor # Tutorial per il setup di un nodo Tor","title":"Tutorial per il setup di un nodo Tor","type":"guides"},{"content":" VPN # Tutorial per il setup di una VPN self-hosted con filtro AdBlock\nQuesta vuole essere una guida completa per effettuare il setup di una propria VPN utilizzando Wireguard e che filtra link pubblicitari e tracker grazie ad un filtro di AdBlocking fatto con Pi-Hole.\nLa guida √® aperta a miglioramenti e consigli, descriver√≤ la configurazione che trovo con il miglior rapporto usabilit√†/privacy, non sono un esperto di reti e la guida qua presente non vi permetter√° di essere magicamente anonimi e irrintracciabili.\nSe volete darmi consigli, contribuire alla guida o effettuare traduzioni, potete effettuare una pull request su GitHub e supportare lo sviluppo di queste guide con una donazione.\nObiettivo # L\u0026rsquo;obiettivo finale di questa guida sar√† quello di self-hostarci una VPN con un filtro per ads e tracker in maniera totalmente autonoma. Questa procedura comporta dei vantaggi e svantaggi rispetto all\u0026rsquo;utilizzo di una normale VPN commerciale:\npro # Non doversi fidare di un provider VPN il cui modello di business, purtroppo, spesso √® vendere i nostri dati personali Possibilit√† di inserire filtri per pubblicit√† e trackers; alcune VPN offrono questo servizio, ma spesso di qualit√† molto precaria Personalizzazione dell\u0026rsquo;esperienza: volete una VPN piu veloce? Dei filtri pubblicitari specifici? Vorreste condividerla con tutta la famiglia? Con una vostra VPN potete gestirvi nel modo che preferite Possibilit√† di scegliere la nazione e quindi anche la sede legale dei server da noleggiare (e sfruttare le migliori nazioni per privacy informatica) contro # Meno anon set sull\u0026rsquo;indirizzo IP: a meno che voi non condividiate la vostra vpn con molti familiari e amici, sarete gli unici ad utilizzare l\u0026rsquo;indirizzo IP in uscita della VPN; questo √® uno svantaggio in quanto anche se esso non √® direttamente collegato a voi √® comunque un codice univoco che solo voi sfruttate ed usate. √à quindi non ottimo per la privacy in quanto rende piu facile tracciarvi Anche se non regalate dati ad un fornitore VPN, nella maggior parte dei casi farete il set-up di questo sistema su una VPS (server a noleggio), sposterete quindi il vostro trust da un fornitore commerciale di questo servizio ad uno che noleggia server (che vedr√† il vostro indirizzo IP quando utilizzate la VPN). √à quindi fondamentale scegliere correttamente il provider di server o eseguire questo setup su una macchina connessa ad una rete internet non instestata a voi Scelta dell\u0026rsquo;hosting provider # Con hosting provider s\u0026rsquo;intende l\u0026rsquo;azienda che vi fornir√† il server su cui fare il set-up presente in questa guida. √à fondamentale trovare un hosting con una sede legale che tutela la vostra privacy (stati interessanti possono essere quelli fuori dai 5 eyes, fuori dalla nato o che hanno buone politiche sui dati informatici. Buoni esempi sono Islanda, Svezia, Svizzera, Gibilterra, ecc), che sembra essere affidabile (non ha fatto leak di dati per piccolezze o sembra lottare per dare meno dati possibili alle autorit√†) e che richieda meno dati personali possibili per utilizzare il proprio servizio (pagamenti in bitcoin, dominio tor, login senza conferme telefoniche, ecc).\nIn questa guida vi consiglier√≤ un paio di hosting provider, spesso quelli piccoli o con politiche di privacy interessanti sono pi√π costosi delle grosse hosting company. √à importante guardare anche che servizi ci vengono offerti per scegliere il server pi√π adatto alle nostre necessit√† (potenza, capacit√† e velocit√† di banda, ecc).\nVPSbG a mio parere il miglior rapporto tra potenza, banda, privacy, usabilit√† e metodi di pagamento accettati. Non il pi√π economico ma quello che offre la miglior esperienza d\u0026rsquo;uso. Server in bulgaria ed offrono 1 core con CPU AMD epyc, 1 GB di ram e 2TB di banda mensile per 8 euro al mese. 1984 Hosting √© un sito che offre vari servizi (domini, vps, dns, ecc), ha sede legale in Islanda (molto interessante per l\u0026rsquo;aspetto di Privacy informatica) e offre server con 1 core, 1 GB di ram e 1TB di banda a 100Mb/s per circa 4.50 euro oppure lo stesso server con un po\u0026rsquo; pi√π di ram e il doppio di banda a 9 euro al mese. Penso che questo vps provider sia molto interessante, accetta pagamenti in bitcoin e il servizio clienti nelle mie esperienze passate √® sempre stato abbastanza efficiente (24/48h per avere supporto). Njalla √® un vecchissimo ma ancora attivo servizio di hosting, vpn, domini con sede legale a Nevis (Caraibi) e la maggior parte dei server situata in Svezia. Come prezzi √® leggermente pi√π cara di 1984 ma offre server leggermente pi√π potenti e con un po\u0026rsquo; pi√π di banda: 1 Core, 1.5 GB RAM, 15 GB Disk, 1.5 TB Traffic per circa 15 euro (anche qua pagabili in bitcoin). √à possibile usare questo servizio anche navigando attraverso il suo dominio tor. Esistono tanti altri servizi di VPS con differenti costi e trade-off dal punto di vista di privacy, sicurezza, costi ecc.. Potete tranquillamente fare un paio di ricerche online e non utilizzare obbligatoriamente quelli da me sopra citati.\nUna volta scelto il servizio di hosting consiglio caldamente di proseguire acquistando una macchina con sopra una distribuzione debian based (debian o ubuntu) e settando una password di accesso complessa.\nConnessione al server VPS con SSH # Come molti sapranno, per connettersi a server remoti, solitamente si utilizza SSH: un protocollo integrato nel terminale di linux con cui collegarsi a server o pc distanti. Per connetterci alla nostra VPS apriamo un terminale su un qualsiasi nostro pc e diamo il comando:\nssh [nome utente]@[indirizzo ip]\nun esempio potrebbe essere: ssh root@192.34.33.256 (root √® solitamente il nome utente mentre il numero seguente √® l\u0026rsquo;indirizzo IP del server, solitamente √® possibile trovarlo nelle informazioni della macchina da voi acquistata sul sito di hosting). Una volta dato il comando baster√† inserire la password precedentemente impostata per fare l\u0026rsquo;accesso al server.\nUna volta connessi in SSH possiamo dare il comando:\nsudo apt update \u0026amp;\u0026amp; apt upgrade -y\nin modo da aggiornare tutti i pacchetti del nostro sistema operativo.\nIn questa guida andremo a seguire un setup per la sicurezza del nostro server semplice e minimale (in modo che si adatti a tutti gli utenti), se volete usare setup piu avanzati vi consiglio di cercare online come effettuare login sul proprio server utilizzando una chiave pubblica ssh.\nAndiamo infine a dare il comando:\nsudo apt install fail2ban\nper andare ad installare questo leggerissimo software che permette di limitare l\u0026rsquo;accesso in caso di troppe password errate sul nostro server (e quindi migliorare leggermente la sicurezza di esso).\nSetup della VPN # Ora che abbiamo effettuato tutte le procedure preliminari per rendere pi√∫ sicura e aggiornata la nostra VPS possiamo procedere al vero setup, andiamo ad installare wireguard con i seguenti comandi:\ncurl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh chmod +x wireguard-install.sh ./wireguard-install.sh a questo punto andiamo anche ad installare pi-hole (il software che useremo come filtro pubblicit√°, tracker e analytics):\ncurl -sSL https://install.pi-hole.net | bash\ndurante l\u0026rsquo;installazione scegliete come interfaccia di rete \u0026ldquo;wg0\u0026rdquo;, usate l\u0026rsquo;opzione custom dns (non cos√¨ importante, alla peggio la andiamo comunque a sovrascrivere dopo), abilitate la \u0026lsquo;web interface\u0026rsquo; e salvatevi la password per il login che vi verr√° data di default (ci servir√° in seguito).\nAndiamo ora ad installare unbound, un software per avere un DNS resolver locale veloce (per fare una semplificazione ci servir√° per avere il nostro setup finale completo, efficente e veloce).\nsudo apt install unbound\ned andiamo a configurarlo con:\nnano /etc/unbound/unbound.conf.d/pi-hole.conf\nIncollate questa configurazione all\u0026rsquo;interno del file:\nserver: verbosity: 0 interface: 127.0.0.1 port: 5335 do-ip4: yes do-udp: yes do-tcp: yes do-ip6: yes prefer-ip6: no harden-glue: yes harden-dnssec-stripped: yes use-caps-for-id: no edns-buffer-size: 1472 prefetch: yes prefetch-key: yes minimal-responses: yes cache-min-ttl: 300 cache-max-ttl: 86400 serve-expired: yes msg-cache-size: 50m rrset-cache-size: 100m num-threads: 1 so-reuseport: yes so-rcvbuf: 4m so-sndbuf: 4m private-address: 192.168.0.0/16 private-address: 169.254.0.0/16 private-address: 172.16.0.0/12 private-address: 10.0.0.0/8 private-address: fd00::/8 private-address: fe80::/10 andiamo quindi a riavviare unbound:\nsudo service unbound restart\na questo punto abbiamo correttamente prepato il dns locale, andiamo a configurare pi-hole per parlare con unbound correttamente:\nnano /etc/pihole/setupVars.conf\npotete editare o sostituire il vostro file di config con quello sottostante avendo accortezza di inserire i dati che nel box qua sotto ho inerito tra parentesi graffe:\nWEBPASSWORD={lasciate quella presente nel file di default} BLOCKING_ENABLED=true WEBUIBOXEDLAYOUT=traditional WEBTHEME=default-dark PIHOLE_INTERFACE=wg0 IPV4_ADDRESS={mette l\u0026#39;indirizzo IP della vostra VPS esempio:123.24.223.11} QUERY_LOGGING=true INSTALL_WEB_SERVER=true INSTALL_WEB_INTERFACE=true LIGHTTPD_ENABLED=true CACHE_SIZE=0 DNSMASQ_LISTENING=local DNS_FQDN_REQUIRED=true DNS_BOGUS_PRIV=true DNSSEC=false REV_SERVER=false PIHOLE_DNS_1=127.0.0.1#5335 a questo punto re-buildiamo pihole con il seguente comando:\npihole -r\nConfigurazione PiHole e AdLists # La parte a riga di comando √© ormai finita, ce l\u0026rsquo;hai fatta guerriero! üéâ\nA livello teorico in questo momento √© gia tutto funzionante, andiamo per√≥ prima di utilizzare la VPN ad aggiungere dei filtri per la pubblicit√†!\nAprite un browser qualsiasi e nella barra di ricerca digitate:\nhttp://{indirizzo ip della vpn}/admin\nesempio: http://84.177.121.221/admin\nA questo punto dovreste vedere la pagina di login di Pi-Hole (il nostro sistema di filtro pubblicit√°, tracker e analytics). Come password dovete usare quella che ci eravamo salvati precedentemente (e che ci venive generata in fase di installazione). Una volta effettuato l\u0026rsquo;accesso avrete davanti questa schermata:\nAndiamo ora nella sezione \u0026ldquo;AdLists\u0026rdquo; ed aggiungiamo delle liste di vari domain da bloccare (o meglio, il link ad alcune di queste liste). Di questo argomento si pu√≥ discorrere ore, il concetto di base √© che se aggiungiamo decine di di fonti a caso bloccheremo tantissimo\u0026hellip;troppo, andando quindi a far smettere di funzionare molti siti web o funzioni di applicazioni su nostri dispositivi. Conviene usare poche liste e tendenzialmente fatte da persone di cui ci fidiamo almeno parzialmente. Vi lascio qua sotto alcune delle principali e piu famose, in caso vogliate ampliare la sezione vi lascio l\u0026rsquo;onere di farlo in autonomia in quanto in base alle configurazioni ci potrebbero essere diversi pro o contro.\nhttps://raw.githubusercontent.com/StevenBlack/hosts/master/hosts https://adaway.org/hosts.txt https://v.firebog.net/hosts/AdguardDNS.txt https://v.firebog.net/hosts/Easyprivacy.txt https://winhelp2002.mvps.org/hosts.txt Una volta inserite le varie blocklist muoviamoci nella sezione: tools ‚Üí update gravity ed andiamo ad avviare il processo di attivazione delle varie liste. In caso di problemi con alcuni siti (io per esempio in passato con alcune liste avevo avuto problemi con i link \u0026ldquo;t.co\u0026rdquo; di twitter) baster√° aggiungere il sito alla sezione \u0026ldquo;whitelist\u0026rdquo; in modo da escludero dai siti da bloccare. Ogni volta che effettuate modifiche andate poi a fare update gravity per renderle effettive.\nEsportazione delle configurazioni # Andiamo ora ad attivare la configurazione sui nostri dispositivi. Iniziamo dai telefoni:\nInstalliamo sul nostro dispositivo l\u0026rsquo;applicazione Wireguard, una volta fatto apriamo il terminale della nostra VPS e diamo il comando:\nbash wireguard-install.sh\nselezioniamo \u0026ldquo;add new client\u0026rdquo;, diamo un nome a scelta, selezioniamo come DNS \u0026ldquo;current system resolver\u0026rdquo;. Ora ci verr√° mostrato un QRcode, con la nosta app mobile di wireguard andiamo a scannerizzarlo, dopo averlo fatto ci dovrebbe mostrare una schermata del genere:\nNella sezione \u0026ldquo;DNS servers\u0026rdquo; andiamo ad inserire l\u0026rsquo;indirizzo ip della nostra VPS, verifichiamo che nella sezione \u0026ldquo;Endpoint\u0026rdquo; sia presente lo stesso indirizzo IP pi√∫ la scritta \u0026ldquo;:51820\u0026rdquo; che indica la porta, fatto questo ci baster√° salvare e attivare la VPN!\nPer i pc la procedura √® simile, ci baster√° installare Wireguard, generare la configurazione sulla VPS (usate il comando spiegato sopra, nella procedura android), per poi copiarla nel pc:\nSu Windows, la configurazione √® da inserire nell\u0026rsquo;interfaccia grafica di Wireguard\nSu Linux, la configurazione √® da salvare in un file con estensione .conf nella cartella /etc/wireguard (ad esempio, vpn.conf), per poi attivare la VPN col comando da terminale:\nsudo wg-quick up {nome del file .conf}\nmentre per spegnerela:\nsudo wg-quick down {nome del file .conf}\nanche su pc, prestiamo attenzione ad avere modificato le sezioni \u0026lsquo;DNS server\u0026rsquo; e \u0026lsquo;Endpoint\u0026rsquo; con l\u0026rsquo;indirizzo IP del nostro server.\nTest di funzionamento # Ora che abbiamo pronta e attiva la nostra VPN andiamo a testare che funzioni tutto correttamente. Prima di tutto su un qualsiasi browser visitiamo il sito VPN testing e avviamo un test. Verificate che tutti gli indirizzi IP e localizzazioni che vi vengono mostrate a schermo non siano quelle del vostro paese di origine ma del server VPN.\nSe tutto √© corretto procediamo al test, non della VPN stessa, ma dell\u0026rsquo; adblocker, visitando il sito AdBlock test. Se il risultato finale √© maggiore del 70/80% vuol dire che tutto funziona correttamente (aggiungendo piu o meno blacklist a Pi-Hole i risultati di questo test potrebbero variare). Prestate attenzione a disattivare temporaneamente eventuali estensioni di AdBlock del vostro browser per non avere risultati falsati. Anche il browser che utilizzate potrebbe influire sui risultati del test.\nSe entrambe le prove vengono passate correttamente sei un vero drago e sei riuscito a seguire perfettamente questa guida!! üêâ\nConclusioni # Questo √© uno dei tanti set-up possibili per crearsi una server VPN. Come ogni tipo di configurazione √© possibile eseguire modifiche per adattare il servizio ai propri trade-off. Quello presentato in questa guida √©, a mio parere, un buon bilanciamento tra sicurezza, funzionalit√° e privacy. Se hai proposte di miglioramento, hai trovato errori puoi aiutarmi e far sentire la tua voce sul repository github.\nDonazione con ","date":"11 maggio 2024","externalUrl":null,"permalink":"/guides/vpn/","section":"Guide","summary":"VPN # Tutorial per il setup di una VPN self-hosted con filtro AdBlock","title":"Tutorial per il setup di una VPN self-hosted con filtro AdBlock","type":"guides"},{"content":"","date":"2 ottobre 2023","externalUrl":"https://blowfish-tutorial.web.app/","permalink":"/examples/blowfish-tutorial/","section":"Showcase","summary":"","title":"Blowfish Tutorial","type":"examples"},{"content":"","date":"2 ottobre 2023","externalUrl":"https://blowfish-tutorial.web.app/","permalink":"/examples/blowfish-tutorial/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Tutorial","type":"examples"},{"content":"","date":"2 ottobre 2023","externalUrl":"https://blowfish-tutorial.web.app/","permalink":"/examples/blowfish-tutorial/_index.ja/","section":"Showcase","summary":"","title":"Blowfish „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´","type":"examples"},{"content":" See what\u0026rsquo;s possible with Blowfish. This section contains links to example templates and pages created using Blowfish to get you inspired.\n","date":"2 ottobre 2023","externalUrl":null,"permalink":"/examples/","section":"Showcase","summary":"See what\u0026rsquo;s possible with Blowfish.","title":"Showcase","type":"examples"},{"content":"","date":"1 ottobre 2023","externalUrl":"https://github.com/nunocoracao/blowfish-tutorial","permalink":"/examples/repo-blowfish-tutorial/","section":"Showcase","summary":"","title":"Blowfish Tutorial - Repo","type":"examples"},{"content":"","date":"1 ottobre 2023","externalUrl":"https://github.com/nunocoracao/blowfish-tutorial","permalink":"/examples/repo-blowfish-tutorial/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Tutorial - Repo","type":"examples"},{"content":"","date":"1 ottobre 2023","externalUrl":"https://github.com/nunocoracao/blowfish-tutorial","permalink":"/examples/repo-blowfish-tutorial/_index.ja/","section":"Showcase","summary":"","title":"Blowfish „ÉÅ„É•„Éº„Éà„É™„Ç¢„É´ - „É¨„Éù„Ç∏„Éà„É™","type":"examples"},{"content":"","date":"7 novembre 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lite/","permalink":"/examples/blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite","type":"examples"},{"content":"","date":"7 novembre 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lite/","permalink":"/examples/blowfish-lite/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Lite","type":"examples"},{"content":"","date":"7 novembre 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lite/","permalink":"/examples/blowfish-lite/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Lite","type":"examples"},{"content":"","date":"6 novembre 2022","externalUrl":"https://nunocoracao.github.io/blowfish_artist/","permalink":"/examples/blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist","type":"examples"},{"content":"","date":"6 novembre 2022","externalUrl":"https://nunocoracao.github.io/blowfish_artist/","permalink":"/examples/blowfish-artist/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Artist","type":"examples"},{"content":"","date":"6 novembre 2022","externalUrl":"https://nunocoracao.github.io/blowfish_artist/","permalink":"/examples/blowfish-artist/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Artist","type":"examples"},{"content":"","date":"6 novembre 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lowkey/","permalink":"/examples/blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey","type":"examples"},{"content":"","date":"6 novembre 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lowkey/","permalink":"/examples/blowfish-lowkey/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Lowkey","type":"examples"},{"content":"","date":"6 novembre 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lowkey/","permalink":"/examples/blowfish-lowkey/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Lowkey","type":"examples"},{"content":"","date":"12 ottobre 2022","externalUrl":null,"permalink":"/tags/authors/","section":"Tag","summary":"","title":"Authors","type":"tags"},{"content":" Blowfish d√† vita ai tuoi contenuti. üòç Questa sezione contiene alcune pagine demo che mostrano come Blowfish esegue il rendering di diversi tipi di contenuto. Puoi anche vedere una pagina di esempio elenco tassonomia.\nNota a margine: Questa pagina √® solo un elenco standard di articoli Blowfish e Hugo √® stato configurato per generare un tipo di contenuto \u0026ldquo;campioni\u0026rdquo; e visualizzare riepiloghi degli articoli.\n","date":"12 ottobre 2022","externalUrl":null,"permalink":"/samples/","section":"Campioni","summary":"Blowfish d√† vita ai tuoi contenuti.","title":"Campioni","type":"samples"},{"content":"Un rapido esempio di come iniziare a utilizzare le tassonomie degli autori nei tuoi articoli.\n","date":"12 ottobre 2022","externalUrl":null,"permalink":"/authors/","section":"Esempio di elenco di tassonomia degli autori","summary":"Un rapido esempio di come iniziare a utilizzare le tassonomie degli autori nei tuoi articoli.","title":"Esempio di elenco di tassonomia degli autori","type":"authors"},{"content":"This is an example of how an article with multiple authors will look like.\n","date":"12 ottobre 2022","externalUrl":null,"permalink":"/samples/multiple-authors/","section":"Campioni","summary":"A quick example of how multiple authors could be used.","title":"Multiple Authors","type":"sample"},{"content":"La fantastica biografia di Nuno.\n","date":"12 ottobre 2022","externalUrl":null,"permalink":"/authors/nunocoracao/","section":"Esempio di elenco di tassonomia degli autori","summary":"La fantastica biografia di Nuno.","title":"Nuno Cora√ßao","type":"authors"},{"content":"","date":"12 ottobre 2022","externalUrl":null,"permalink":"/tags/sample/","section":"Tag","summary":"","title":"Sample","type":"tags"},{"content":"La fantastica biografia fittizia di Dummy Second Author.\n","date":"12 ottobre 2022","externalUrl":null,"permalink":"/authors/secondauthor/","section":"Esempio di elenco di tassonomia degli autori","summary":"La fantastica biografia fittizia di Dummy Second Author.","title":"Secondo autore fittizio","type":"authors"},{"content":"Blowfish ha il pieno supporto per le tassonomie Hugo e si adatter√† a qualsiasi impostazione tassonomica. Gli elenchi di tassonomia come questo supportano anche il contenuto personalizzato da visualizzare sopra l\u0026rsquo;elenco dei termini.\nQuest\u0026rsquo;area pu√≤ essere utilizzata per aggiungere testo descrittivo aggiuntivo a ciascuna tassonomia. Dai un\u0026rsquo;occhiata al tag avanzato di seguito per vedere come portare questo concetto ancora oltre.\n","date":"12 ottobre 2022","externalUrl":null,"permalink":"/tags/","section":"Tag","summary":"Blowfish ha il pieno supporto per le tassonomie Hugo e si adatter√† a qualsiasi impostazione tassonomica.","title":"Tag","type":"tags"},{"content":"","date":"26 settembre 2022","externalUrl":null,"permalink":"/tags/thumbnail/","section":"Tag","summary":"","title":"Thumbnail","type":"tags"},{"content":"A quick example of how to start using Thumbnails in your articles.\nIf your average directory for an article looks like this:\ncontent ‚îî‚îÄ‚îÄ awesome_article.md You need to change it from a single markdown file into a folder. Create a directory with the same name of the article, inside create a index.md file. You\u0026rsquo;ll get a structure similar to what\u0026rsquo;s below.\ncontent ‚îî‚îÄ‚îÄ awesome_article ‚îî‚îÄ‚îÄ featured.png Inside the article you can now add an image file (almost all formats are supported but we recommend .png or .jpg) that starts with feature*. Example below.\ncontent ‚îî‚îÄ‚îÄ awesome_article ‚îú‚îÄ‚îÄ index.md ‚îî‚îÄ‚îÄ featured.png This will tell Blowfish that this article has a feature image that can be used both as a thumbnail across your website as well as for oEmbed cards across social platforms. As an example, you can try copy pasting the URL of this article into a platform that shows oEmbeds (e.g. Twitter, WhatsApp, Telegram, etc) and see what is displayed.\n","date":"26 settembre 2022","externalUrl":null,"permalink":"/samples/thumbnail_sample/","section":"Campioni","summary":"A quick example of how to start using Thumbnails in your artciles.","title":"Thumbnails","type":"sample"},{"content":" Blowfish √® ricco di tantissime funzionalit√†. Lo scopo originale di Blowfish era quello di sviluppare un tema semplice e leggero. Il tema √® un fork del Congo e ne espande la visione iniziale.\nTailwind CSS 3.0 # Tailwind CSS √® il cuore di Blowfish e questa versione contiene l\u0026rsquo;ultima Tailwind CSS versione 3. Porta con s√© ottimizzazioni delle prestazioni e supporto per alcune nuove fantastiche funzionalit√† CSS.\nSupporto multilingue # Blowfish √® ora multilingue! Una funzionalit√† molto richiesta. Se pubblichi i tuoi contenuti in pi√π lingue, il sito verr√† realizzato con tutte le traduzioni disponibili.\nüá¨üáß üá©üá™ üá´üá∑ üá™üá∏ üá®üá≥ üáßüá∑ üáπüá∑ üáßüá© Grazie ai contributi della community, Blowfish √® gi√† stato tradotto in ventisei lingue e altre verranno aggiunte nel tempo. A proposito, le richieste pull per nuove lingue sono sempre benvenute!\nSupporto per la lingua RTL # Uno dei vantaggi delle nuove funzionalit√† Tailwind e Multilingual √® la possibilit√† di aggiungere il supporto della lingua RTL. Se abilitato, l\u0026rsquo;intero sito ridiscorrer√† i contenuti da destra a sinistra. Ogni elemento del tema √® stato ridisegnato per garantire che abbia un bell\u0026rsquo;aspetto in questa modalit√† che aiuta gli autori che desiderano generare contenuti nelle lingue RTL.\nRTL √® controllato in base alla lingua, quindi puoi mescolare e abbinare sia il contenuto RTL che LTR nei tuoi progetti e il tema risponder√† di conseguenza.\nRidimensionamento automatico delle immagini # Un grande cambiamento in Blowfish 2.0 √® l\u0026rsquo;aggiunta del ridimensionamento automatico delle immagini. Utilizzando la potenza di Hugo Pipes, le immagini nei contenuti Markdown vengono ora ridimensionate automaticamente in diverse dimensioni di output. Questi vengono poi presentati utilizzando gli attributi HTML \u0026ldquo;srcset\u0026rdquo; che consentono di offrire dimensioni di file ottimizzate ai visitatori del tuo sito.\n\u0026lt;!-- Markdown: ![My image](image.jpg) --\u0026gt; \u0026lt;img srcset=\u0026#34; /image_320x0_resize_q75_box.jpg 320w, /image_635x0_resize_q75_box.jpg 635w, /image_1024x0_resize_q75_box.jpg 1024w, /image_1270x0_resize_q75_box.jpg 2x\u0026#34; src=\u0026#34;/image_635x0_resize_q75_box.jpg\u0026#34; alt=\u0026#34;My image\u0026#34; /\u0026gt; La cosa interessante √® che non c\u0026rsquo;√® nulla che devi cambiare! Inserisci semplicemente la sintassi standard dell\u0026rsquo;immagine Markdown e lascia che il tema faccia il resto. Se desideri un po\u0026rsquo; pi√π di controllo, lo shortcode figure √® stato completamente riscritto per fornire gli stessi vantaggi di ridimensionamento.\nRicerca nel sito # Basata su Fuse.js, la ricerca sul sito consente ai visitatori di trovare rapidamente e facilmente i tuoi contenuti. Tutte le ricerche vengono eseguite lato client, il che significa che non c\u0026rsquo;√® nulla da configurare sul server e le query vengono eseguite molto velocemente. Abilita semplicemente la funzione nella configurazione del tuo sito e tutto √® pronto. Oh, e supporta anche la navigazione completa tramite tastiera!\nSommario # Una funzionalit√† molto richiesta, Blowfish ora supporta i sommari nelle pagine degli articoli. Puoi vedere come funziona in questa pagina. I contenuti sono completamente reattivi e si adatteranno per sfruttare lo spazio disponibile con diverse risoluzioni dello schermo.\nDisponibile su base globale o per articolo, il sommario pu√≤ essere completamente personalizzato utilizzando i valori di configurazione Hugo standard, consentendoti di adattare il comportamento al tuo progetto.\nMiglioramenti dell\u0026rsquo;accessibilit√† # Dall\u0026rsquo;aggiunta di descrizioni ARIA a pi√π elementi o semplicemente dalla regolazione del contrasto di alcuni elementi di testo, questa versione √® la pi√π accessibile finora.\nLa versione 2 introduce anche i collegamenti \u0026ldquo;salta al contenuto\u0026rdquo; e \u0026ldquo;scorri verso l\u0026rsquo;alto\u0026rdquo; che consentono una navigazione rapida. Ci sono anche scorciatoie da tastiera per abilitare elementi come la ricerca senza raggiungere il mouse.\nLe nuove funzionalit√† di ridimensionamento delle immagini forniscono inoltre il pieno controllo sugli elementi \u0026ldquo;alt\u0026rdquo; e \u0026ldquo;titolo\u0026rdquo; consentendo un\u0026rsquo;esperienza accessibile a tutti i visitatori.\nMolto altro ancora # Ci sono innumerevoli altre funzioni da esplorare. Dalla possibilit√† di visualizzare tassonomie su articoli e pagine di elenchi, all\u0026rsquo;uso del nuovo parametro autore headline per personalizzare la propria homepage. Sono stati inoltre migliorati i dati strutturati JSON-LD, che ottimizzano ulteriormente le prestazioni SEO.\n","date":"19 gennaio 2022","externalUrl":null,"permalink":"/docs/welcome/","section":"Documenti","summary":"Blowfish √® ricco di tantissime funzionalit√†.","title":"Benvenuti a Blowfish","type":"docs"},{"content":"","date":"19 gennaio 2022","externalUrl":null,"permalink":"/series/documentazione/","section":"Series","summary":"","title":"Documentazione","type":"series"},{"content":"","date":"19 gennaio 2022","externalUrl":null,"permalink":"/tags/documenti/","section":"Tag","summary":"","title":"Documenti","type":"tags"},{"content":" Semplice ma potente. Scopri come utilizzare Blowfish e le sue funzionalit√†. Questa sezione contiene tutto ci√≤ che devi sapere su Blowfish. Se sei nuovo, consulta la guida Installazione per iniziare o visita la sezione Esempi per vedere cosa pu√≤ fare Blowfish.\n","date":"19 gennaio 2022","externalUrl":null,"permalink":"/docs/","section":"Documenti","summary":"Semplice ma potente.","title":"Documenti","type":"docs"},{"content":"","date":"19 gennaio 2022","externalUrl":null,"permalink":"/tags/novit%C3%A0/","section":"Tag","summary":"","title":"Novit√†","type":"tags"},{"content":"","date":"19 gennaio 2022","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"7 novembre 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lite/","permalink":"/examples/repo-blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite - Repo","type":"examples"},{"content":"","date":"7 novembre 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lite/","permalink":"/examples/repo-blowfish-lite/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Lite - Repo","type":"examples"},{"content":"","date":"7 novembre 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lite/","permalink":"/examples/repo-blowfish-lite/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Lite - „É¨„Éù„Ç∏„Éà„É™","type":"examples"},{"content":"","date":"6 novembre 2021","externalUrl":"https://github.com/nunocoracao/blowfish_artist/","permalink":"/examples/repo-blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist - Repo","type":"examples"},{"content":"","date":"6 novembre 2021","externalUrl":"https://github.com/nunocoracao/blowfish_artist/","permalink":"/examples/repo-blowfish-artist/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Artist - Repo","type":"examples"},{"content":"","date":"6 novembre 2021","externalUrl":"https://github.com/nunocoracao/blowfish_artist/","permalink":"/examples/repo-blowfish-artist/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Artist - „É¨„Éù„Ç∏„Éà„É™","type":"examples"},{"content":"","date":"6 novembre 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lowkey/","permalink":"/examples/repo-blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey - Repo","type":"examples"},{"content":"","date":"6 novembre 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lowkey/","permalink":"/examples/repo-blowfish-lowkey/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Lowkey - Repo","type":"examples"},{"content":"","date":"6 novembre 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lowkey/","permalink":"/examples/repo-blowfish-lowkey/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Lowkey - „É¨„Éù„Ç∏„Éà„É™","type":"examples"},{"content":"","date":"6 novembre 2020","externalUrl":"https://nunocoracao.github.io/blowfish_template/","permalink":"/examples/blowfish-template/","section":"Showcase","summary":"","title":"Blowfish Template","type":"examples"},{"content":"","date":"6 novembre 2020","externalUrl":"https://nunocoracao.github.io/blowfish_template/","permalink":"/examples/blowfish-template/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Template","type":"examples"},{"content":"","date":"6 novembre 2020","externalUrl":"https://github.com/nunocoracao/blowfish_template","permalink":"/examples/blowfish-template-repo/","section":"Showcase","summary":"","title":"Blowfish Template - GitHub Repo","type":"examples"},{"content":"","date":"6 novembre 2020","externalUrl":"https://github.com/nunocoracao/blowfish_template","permalink":"/examples/blowfish-template-repo/_index.zh-cn/","section":"Showcase","summary":"","title":"Blowfish Template - GitHub Repo","type":"examples"},{"content":"","date":"6 novembre 2020","externalUrl":"https://nunocoracao.github.io/blowfish_template/","permalink":"/examples/blowfish-template/_index.ja/","section":"Showcase","summary":"","title":"Blowfish „ÉÜ„É≥„Éó„É¨„Éº„Éà","type":"examples"},{"content":"","date":"6 novembre 2020","externalUrl":"https://github.com/nunocoracao/blowfish_template","permalink":"/examples/blowfish-template-repo/_index.ja/","section":"Showcase","summary":"","title":"Blowfish „ÉÜ„É≥„Éó„É¨„Éº„Éà - GitHub „É¨„Éù„Ç∏„Éà„É™","type":"examples"},{"content":"","date":"16 agosto 2020","externalUrl":null,"permalink":"/tags/installazione/","section":"Tag","summary":"","title":"Installazione","type":"tags"},{"content":"Segui semplicemente la procedura standard Avvio Rapido di Hugo per iniziare subito.\nSono riportate le istruzioni dettagliate per l\u0026rsquo;installazione. Sono disponibili anche le istruzioni per aggiornare il tema.\nInstallazione # Queste istruzioni ti consentiranno di iniziare a utilizzare Hugo e Blowfish partendo da uno stato completamente vuoto. La maggior parte delle dipendenze menzionate in questa guida possono essere installate utilizzando il gestore pacchetti corretti per la tua piattaforma.\nInstallare Hugo # Se non hai mai utilizzato Hugo prima, dovrai [installarlo nella tua local machine] ( https://gohugo.io/getting-started/installing). Puoi verificare se hai gi√† installato Hugo utilizzando il comando hugo version.\nAssicurati di usare la versione 0.87.0 di Hugo o successiva, poich√© il tema sfrutta alcune delle ultime caratteristiche di Hugo. Puoi trovare le istruzioni dettagliate sull\u0026rsquo;installazione per la propria piattaforma in Documenti Hugo.\nStrumenti Blowfish (raccomandato) # Abbiamo appena lanciato un nuovo strumento CLI per aiutarti a iniziare con Blowfish. Questo ti permette di creare un nuovo progetto Hugo, di installare il tema e di impostare i file di configurazione del tema per te. √à ancora in fase beta, quindi per favore [segnala qualsiasi problema che riscontri] ( https://github.com/nunocoracao/blowfish-tools).\nInstalla globalmente lo strumento CLI usando npm (o altri gestori di pacchetti):\nnpx blowfish-tools oppure\nnpm i -g blowfish-tools Poi esegui il comando blowfish-tools per avviare un\u0026rsquo;esecuzione interattiva che ti guider√† attraverso la creazione e la configurazione dei casi d\u0026rsquo;uso.\nblowfish-tools √à anche possibile eseguire il comando blowfish-tools new per creare un nuovo progetto Hugo e installare il tema in una sola volta. Per ulteriori informazioni, consulta la guida del CLI.\nblowfish-tools new mynewsite Ecco un rapido video che ti mostra quanto sia veloce iniziare a utilizzare Blowfish con lo strumento CLI:\nInstallazione senza CLI # Crea un novo sito # Esegui il comando hugo new site mywebsite per creare un nuovo sito di Hugo in una cartella chiamata mywebsite.\nLa cartella del progetto pu√≤ essere chiamata come si vuole, ma le istruzioni che seguono presuppongono che si chiami mywebsite. Se si usa un nome diverso, sostituiscilo di conseguenza.\nScaricare il tema Blowfish # Esistono diversi modi per installare il tema Blowfish nel proprio sito web Hugo. Dal pi√π facile al pi√π difficile da installare e mantenere, sono:\nGit submodule (recommended) Hugo module Copia manuale dei file Se non sei sicuro, scegli il metodo Git submodule.\nInstallazione usando Git # Questo √® il metodo piu facile e veloce per mantere il tema aggiornato. Oltre Hugo e Go, dovrai assicurarti di avere Git installato nel tuo local machine.\ncambia la directory del tuo sito web Hugo (che hai creato sopra), inizializza un nuovo repository git e aggiungi Blowfish come sottomodulo.\ncd mywebsite git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish poi continua a impostare i file di configurazione del tema.\nInstallazione usando Hugo # Per questo metodo utilizzerai Hugo per gestire i tuoi temi. Hugo utilizza Go per inizializzare e gestire i moduli, quindi assicurati di aver installato go prima di procedere.\nScarica e installa Go. Puoi verificare se l\u0026rsquo;hai gi√† installato utilizzando il comando go version.\nAssicurati di usare la versione Go 1.12 o successive poich√© Hugo lo richiede affinch√© i moduli funzionino correttamente. Dalla directory del tuo progetto Hugo (che hai creato sopra), inizializza i moduli per il tuo sito web:\n# Se gestisci il tuo progetto su GitHub Hugo mod init github.com/\u0026lt;nomeutente\u0026gt;/\u0026lt;nome-repo\u0026gt; # Se gestisci il tuo progetto localmente Hugo mod init my-project Aggiungi il tema alla tua configurazione creando un nuovo file config/_default/module.toml e aggiungendo quanto segue:\n[[imports]] path = \u0026#34;github.com/nunocoracao/blowfish/v2\u0026#34; Avvia il tuo server utilizzando hugo server e il tema verr√† scaricato automaticamente.\nContinua con impostare i file di configurazione del tema.\nInstallazione manuale # Scarica l\u0026rsquo;ultima versione del codice sorgente del tema.\nScarica da Github \u0026ldquo;blowfish\u0026rdquo; e \u0026ldquo;themes/\u0026rdquo; 2. Estrai l\u0026rsquo;archivio, rinomina la cartella in blowfish spostala nella directory themes/ all\u0026rsquo;interno della cartella principale del tuo progetto Hugo. 3. Continua con impostare i file di configurazione del tema.\nImposta i file di configurazione del tema # Nella cartella principale del tuo sito web, elimina il file hugo.toml generato da Hugo. Copia i file di configurazione *.toml dal tema nella tua cartella config/_default/. Ci√≤ ti garantir√† di avere tutte le impostazioni corrette del tema e ti consentir√† di personalizzare facilmente il tema in base alle tue esigenze.\nNote: Non dovresti sovrascrivere il file module.toml se ne esiste gi√† uno nel tuo progetto! A seconda di come hai installato il tema, troverai i file di configurazione del tema in posti diversi:\nHugo modules: Nella directory della cache di Hugo o [scarica una copia]( https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/nunocoracao/blowfish/ tree/main/config/_default) da GitHub Git submodule o installazione manuale: themes/blowfish/config/_default Una volta che hai copiato i file, la tua cartella delle configurazioni dovrebbe essere cosi:\nconfig/_default/ ‚îú‚îÄ hugo.toml ‚îú‚îÄ languages.en.toml ‚îú‚îÄ markup.toml ‚îú‚îÄ menus.en.toml ‚îú‚îÄ module.toml # se hai usato Hugo modules come installazione ‚îî‚îÄ params.toml Importante: Se non hai utilizzato Hugo Modules per installare Blowfish, devi aggiungere la riga theme = \u0026quot;blowfish\u0026quot; all\u0026rsquo;inizio del tuo file hugo.toml. Passo successivo # L\u0026rsquo;installazione di base di Blowfish √® ora completa. Continua alla sezione Per iniziare per ulteriori informazioni sulla configurazione del tema.\nInstallazione degli aggiornamenti # Di tanto in tanto verranno pubblicate nuove versioni che applicano correzioni e aggiungono nuove funzionalit√† al tema. Per sfruttare questi cambiamenti, dovrai aggiornare i file del tema sul tuo sito web.\nIl modo in cui procedere dipender√† dal metodo di installazione scelto al momento dell\u0026rsquo;installazione originale del tema. Le istruzioni per ciascun metodo sono disponibili di seguito.\nGit submodule Hugo module Copia manuale del file Aggiornamento utilizzando Git # I sottomoduli Git possono essere aggiornati utilizzando il comando git. Esegui semplicemente il comando seguente e l\u0026rsquo;ultima versione del tema verr√† scaricata nel tuo repository locale:\ngit submodule update --remote --merge Una volta aggiornato il sottomodulo, riavvia il tuo sito e verifica che tutto funzioni come previsto.\nAggiornamento utilizzando Hugo # Hugo rende l\u0026rsquo;aggiornamento dei moduli estremamente semplice. Basta passare alla directory del progetto ed eseguire il seguente comando:\nhugo mod get -u Hugo aggiorner√† automaticamente tutti i moduli richiesti per il tuo progetto. Lo fa controllando i file module.toml e go.mod. In caso di problemi con l\u0026rsquo;aggiornamento, assicurati che questi file siano ancora configurati correttamente.\nQuindi riavvia semplicemente il tuo sito e verifica che tutto funzioni come previsto.\nAggiornamenti manuali # L\u0026rsquo;aggiornamento manuale di Blowfish richiede il download dell\u0026rsquo;ultima copia del tema e la sostituzione della vecchia versione nel progetto.\nTieni presente che ogni personalizzazione locale apportata ai file del tema andranno perse durante questo processo. Scarica l\u0026rsquo;ultima versione del codice sorgente del tema.\nScarica da Github Estrai l\u0026rsquo;archivio, rinomina la cartella in \u0026ldquo;blowfish\u0026rdquo; e spostala nella directory \u0026ldquo;themes/\u0026rdquo; all\u0026rsquo;interno della cartella principale del tuo progetto Hugo. Dovrai sovrascrivere la directory esistente per sostituire tutti i file del tema.\nRiavvia il tuo sito e verifica che tutto funzioni come previsto.\n","date":"16 agosto 2020","externalUrl":null,"permalink":"/docs/installation/","section":"Documenti","summary":"Segui semplicemente la procedura standard Avvio Rapido di Hugo per iniziare subito.","title":"Installazione","type":"docs"},{"content":" Questa sezione presuppone che si sia gi√† installato il tema Blowfish. Abbiamo appena lanciato uno strumento CLI per aiutarvi a iniziare con Blowfish. Vi aiuter√† con l\u0026rsquo;installazione e la configurazione. Installate lo strumento CLI a livello globale utilizzando:\nnpx blowfish-tools The config files that ship with Blowfish contain all of the possible settings that the theme recognises. By default, many of these are commented out but you can simply uncomment them to activate or change a specific feature.\nBasic configuration # Before creating any content, there are a few things you should set for a new installation. Starting in the config.toml file, set the baseURL and languageCode parameters. The languageCode should be set to the main language that you will be using to author your content.\n# config/_default/config.toml baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;en\u0026#34; The next step is to configure the language settings. Although Blowfish supports multilingual setups, for now, just configure the main language.\nLocate the languages.en.toml file in the config folder. If your main language is English you can use this file as is. Otherwise, rename it so that it includes the correct language code in the filename. For example, for French, rename the file to languages.fr.toml.\nNote that the language code in the language config filename should match the languageCode setting in config.toml. # config/_default/languages.en.toml title = \u0026#34;My awesome website\u0026#34; [author] name = \u0026#34;My name\u0026#34; image = \u0026#34;img/author.jpg\u0026#34; headline = \u0026#34;A generally awesome human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { twitter = \u0026#34;https://twitter.com/username\u0026#34; } ] The [author] configuration determines how the author information is displayed on the website. The image should be placed in the site\u0026rsquo;s assets/ folder. Links will be displayed in the order they are listed.\nIf you need extra detail, further information about each of these configuration options, is covered in the Configuration section.\nColour schemes # Blowfish ships with a number of colour schemes out of the box. To change the scheme, simply set the colorScheme theme parameter. Valid options are blowfish (default), avocado, fire, ocean, forest, princess, neon, bloody, terminal, marvel, noir, autumn, congo, andslate.\n# config/_default/params.toml colorScheme = \u0026#34;blowfish\u0026#34; Blowfish defines a three-colour palette that is used throughout the theme. Each main colour contains ten shades which are based upon the colours that are included in Tailwind. The three main colours are used for the header, footer, and accent colours. Here are the colors for each scheme:\nBlowfish (default) # Avocado # Fire # Ocean # Forest # Princess # Neon # Bloody # Terminal # Marvel # Noir # Autumn # Congo # Slate # Although these are the default schemes, you can also create your own. Refer to the Advanced Customisation section for details.\nOrganising content # By default, Blowfish doesn\u0026rsquo;t force you to use a particular content type. In doing so you are free to define your content as you wish. You might prefer pages for a static site, posts for a blog, or projects for a portfolio.\nHere\u0026rsquo;s a quick overview of a basic Blowfish project. All content is placed within the content folder:\n. ‚îú‚îÄ‚îÄ assets ‚îÇ ‚îî‚îÄ‚îÄ img ‚îÇ ‚îî‚îÄ‚îÄ author.jpg ‚îú‚îÄ‚îÄ config ‚îÇ ‚îî‚îÄ‚îÄ _default ‚îú‚îÄ‚îÄ content ‚îÇ ‚îú‚îÄ‚îÄ _index.md ‚îÇ ‚îú‚îÄ‚îÄ about.md ‚îÇ ‚îî‚îÄ‚îÄ posts ‚îÇ ‚îú‚îÄ‚îÄ _index.md ‚îÇ ‚îú‚îÄ‚îÄ first-post.md ‚îÇ ‚îî‚îÄ‚îÄ another-post ‚îÇ ‚îú‚îÄ‚îÄ aardvark.jpg ‚îÇ ‚îî‚îÄ‚îÄ index.md ‚îî‚îÄ‚îÄ themes ‚îî‚îÄ‚îÄ blowfish It\u0026rsquo;s important to have a firm grasp of how Hugo expects content to be organised as the theme is designed to take full advantage of Hugo page bundles. Be sure to read the official Hugo docs for more information.\nBlowfish is also flexible when it comes to taxonomies. Some people prefer to use tags and categories to group their content, others prefer to use topics.\nHugo defaults to using posts, tags and categories out of the box and this will work fine if that\u0026rsquo;s what you want. If you wish to customise this, however, you can do so by creating a taxonomies.toml configuration file:\n# config/_default/taxonomies.toml topic = \u0026#34;topics\u0026#34; This will replace the default tags and categories with topics. Refer to the Hugo Taxonomy docs for more information on naming taxonomies.\nWhen you create a new taxonomy, you will need to adjust the navigation links on the website to point to the correct sections, which is covered below.\nMenus # Blowfish has two menus that can be customised to suit the content and layout of your site. The main menu appears in the site header and the footer menu appears at the bottom of the page just above the copyright notice.\nBoth menus are configured in the menus.en.toml file. Similarly to the languages config file, if you wish to use another language, rename this file and replace en with the language code you wish to use.\n# config/_default/menus.toml [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Topics\u0026#34; pageRef = \u0026#34;topics\u0026#34; weight = 20 [[main]] pre = \u0026#34;github\u0026#34; name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 30 [[main]] identifier = \u0026#34;github2\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 40 [[footer]] name = \u0026#34;Privacy\u0026#34; url = \u0026#34;https://external-link\u0026#34; The name parameter specifies the text that is used in the menu link. You can also optionally provide a title which fills the HTML title attribute for the link.\nThe pageRef parameter allows you to easily reference Hugo content pages and taxonomies. It is the quickest way to configure the menu as you can simply refer to any Hugo content item and it will automatically build the correct link. To link to external URLs, the url parameter can be used.\nThe pre parameter allows you to place an icon from Blowfish\u0026rsquo;s icon set on the menu entry. This parameter can be used with name parameter or by itself. If you want to use multiple menu entries with just icons please set the identifierparameter otherwise Hugo will default to the naming tag as the id and probably not display all the menu entries.\nMenu links will be sorted from lowest to highest weight, and then alphabetically by name.\nBoth menus are completely optional and can be commented out if not required. Use the template provided in the file as a guide.\nNested menus # The theme also supports nested menus. In order to use them you just need to define a parent entry in menu.toml and its sub-menus using the parent parameter to reference the parent. All properties can be used for sub-menus. pageRef and url can also be used in the parent entry. Nested menus are only available in the main menu not for the footer.\n# config/_default/menus.toml [[main]] name = \u0026#34;Parent\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 1\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 2\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 3\u0026#34; parent = \u0026#34;Parent\u0026#34; pre = \u0026#34;github\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 Sub-Navigation menu # Additionally, you can also configure a sub-navigation menu. Just define new menu entries as subnavigation in menus.toml. This will render a second line with sub-categories below the main header menu.\n# config/_default/menus.toml [[subnavigation]] name = \u0026#34;An interesting topic\u0026#34; pageRef = \u0026#34;tags/interesting-topic\u0026#34; weight = 10 [[subnavigation]] name = \u0026#34;My Awesome Category\u0026#34; pageRef = \u0026#34;categories/awesome\u0026#34; weight = 20 The default name is the pageRef title cased.\nThumbnails \u0026amp; Backgrounds # Blowfish was built so it would be easy to add visual support to your articles. If your familiar with Hugo article structure, you just need to place an image file (almost all formats are supported but we recommend .png or .jpg) that starts with feature* inside your article folder. And that\u0026rsquo;s it, Blowfish will then be able to both use the image as a thumbnail within your website as well as for oEmbed cards across social platforms.\nHere is also a guide with more info and a sample if you want to see how you can do it.\nAdditionally, Blowfish also supports background hero images in articles and lists. In order to use a different image than the featured one, add an image file in which the name starts with background*.\nDetailed configuration # The steps above are the bare minimum configuration. If you now run hugo server you will be presented with a blank Blowfish website. Detailed configuration is covered in the Configuration section.\n","date":"15 agosto 2020","externalUrl":null,"permalink":"/docs/per-iniziare/","section":"Documenti","summary":"Questa sezione presuppone che si sia gi√† installato il tema Blowfish.","title":"Per iniziare","type":"docs"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/tags/config/","section":"Tag","summary":"","title":"Config","type":"tags"},{"content":"Blowfish is a highly customisable theme and uses some of the latest Hugo features to simplify how it is configured.\nThe theme ships with a default configuration that gets you up and running with a basic blog or static website.\nWe just launched a CLI tool to help you get started with Blowfish. It will help you with installation and configuration. Install the CLI tool globally using:\nnpx blowfish-tools Configuration files bundled with the theme are provided in TOML format as this is the default Hugo syntax. Feel free to convert your config to YAML or JSON if you wish.\nThe default theme configuration is documented in each file so you can freely adjust the settings to meet your needs.\nAs outlined in the installation instructions, you should adjust your theme configuration by modifying the files in the config/_default/ folder of your Hugo project and delete the config.toml file in your project root. Site configuration # Standard Hugo configuration variables are respected throughout the theme, however there are some specific things that should be configured for the best experience.\nThe site configuration is managed through the config/_default/config.toml file. The table below outlines all the settings that the Blowfish takes advantage of.\nNote that the variable names provided in this table use dot notation to simplify the TOML data structure (ie. outputs.home refers to [outputs] home).\nName Default Description theme \u0026quot;blowfish\u0026quot; When using Hugo Modules this config value should be removed. For all other installation types, this must be set to blowfish for the theme to function. baseURL Not set The URL to the root of the website. defaultContentLanguage \u0026quot;en\u0026quot; This value determines the default language of theme components and content. Refer to the language and i18n section below for supported language codes. enableRobotsTXT true When enabled, a robots.txt file will be created in the site root that allows search engines to crawl the entire site. If you prefer to provide your own pre-made robots.txt, set to false and place your file in the static directory. For complete control, you may provide a custom layout to generate this file. paginate 10 The number of articles listed on each page of the article listing. summaryLength 0 The number of words that are used to generate the article summary when one is not provided in the front matter. A value of 0 will use the first sentence. This value has no effect when summaries are hidden. outputs.home [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;] The output formats that are generated for the site. Blowfish requires HTML, RSS and JSON for all theme components to work correctly. permalinks Not set Refer to the Hugo docs for permalink configuration. taxonomies Not set Refer to the Organising content section for taxonomy configuration. Thumbnails # Blowfish was built so it would be easy to add visual support to your articles. If your familiar with Hugo article structure, you just need to place an image file (almost all formats are supported but we recommend .png or .jpg) that starts with feature* inside your article folder. And that\u0026rsquo;s it, Blowfish will then able to both use the image as a thumbnail within your website as well as for oEmbed cards across social platforms.\nHere is also a guide with more info and a sample if you want to see how you can do it.\nLanguage and i18n # Blowfish is optimised for full multilingual websites and theme assets are translated into several languages out of the box. The language configuration allows you to generate multiple versions of your content to provide a customised experience to your visitors in their native language.\nThe theme currently supports the following languages by default:\nLanguage Code Arabic ar Bulgarian bg Bengali bn Catalan ca Czech cs German de English en Spanish (Spain) es Finnish fi French fr Hebrew he Croatian hr Hungarian hu Indonesian id Italian it Japanese ja Korean ko Polish pl Portuguese (Brazil) pt-br Portuguese (Portugal) pt-pt Romanian ro Russian ru Turkish tr Vietnamese vi Simplified Chinese (China) zh-cn Traditional Chinese (Taiwan) zh-tw The default translations can be overridden by creating a custom file in i18n/[code].yaml that contains the translation strings. You can also use this method to add new languages. If you\u0026rsquo;d like to share a new translation with the community, please open a pull request.\nConfiguration # In order to be as flexible as possible, a language configuration file needs to be created for each language on the website. By default Blowfish includes an English language configuration at config/_default/languages.en.toml.\nThe default file can be used as a template to create additional languages, or renamed if you wish to author your website in a language other than English. Simply name the file using the format languages.[language-code].toml.\nNote: Ensure the defaultContentLanguage parameter in the site configuration matches the language code in your language config filename. Global # Name Default Description languageCode \u0026quot;en\u0026quot; The Hugo language code for this file. It can be a top-level language (ie. en) or a sub-variant (ie. en-au) and should match the language code in the filename. Hugo expects this value to always be in lowercase. For proper HTML compliance, set the isoCode parameter which is case-sensitive. languageName \u0026quot;English\u0026quot; The name of the language. weight 1 The weight determines the order of languages when building multilingual sites. title \u0026quot;Blowfish\u0026quot; The title of the website. This will be displayed in the site header and footer. Params # Name Default Description params.displayName \u0026quot;EN\u0026quot; The name used when the language appears on the website. params.isoCode \u0026quot;en\u0026quot; The ISO language code for HTML metadata purposes. It can be a top-level language (ie. en) or a sub-variant (ie. en-AU). params.rtl false Whether or not this is a RTL language. Set to true to reflow content from right-to-left. Blowfish fully supports using RTL and LTR languages at the same time and will dynamically adjust to both. params.dateFormat \u0026quot;2 January 2006\u0026quot; How dates are formatted in this language. Refer to the Hugo docs for acceptable formats. params.logo Not set The relative path to the site logo file within the assets/ folder. The logo file should be provided at 2x resolution and supports any image dimensions. params.secondaryLogo Not set The relative path to the secondary site logo file within the assets/ folder. The logo file should be provided at 2x resolution and supports any image dimensions. This should have an inverted/contrasting colour scheme to logo. If set, this logo will be shown when users toggle from the defaultAppearance mode. params.description Not set The website description. This will be used in the site metadata. params.copyright Not set A Markdown string for the site footer copyright message can include the placeholder { year } to dynamically insert the current year. If none is provided, Blowfish will automatically generate a copyright string using the site title. Author # Name Default Description author.name Not set The author\u0026rsquo;s name. This will be displayed in article footers, and on the homepage when the profile layout is used. author.image Not set Path to the image file of the author. The image should be a 1:1 aspect ratio. The image can be placed in the site\u0026rsquo;s assets/ folder or can be external url. author.headline Not set A Markdown string containing the author\u0026rsquo;s headline. It will be displayed on the profile homepage under the author\u0026rsquo;s name. author.bio Not set A Markdown string containing the author\u0026rsquo;s bio. It will be displayed in article footers. author.links Not set The links to display alongside the author\u0026rsquo;s details. The config file contains example links which can simply be uncommented to enable. The order that the links are displayed is determined by the order they appear in the array. Custom links can be added by providing corresponding SVG icon assets in assets/icons/. Menus # Blowfish also supports language-specific menu configurations. Menu config files follow the same naming format as the languages file. Simply provide the language code in the file name to tell Hugo which language the file relates to.\nMenu config files are named with the format menus.[language-code].toml. Always ensure that the language code used in the menus configuration matches the languages configuration.\nThe Getting Started section explains more about the structure of this file. You can also refer to the Hugo menu docs for more configuration examples.\nTheme parameters # Blowfish provides a large number of configuration parameters that control how the theme functions. The table below outlines every available parameter in the config/_default/params.toml file.\nMany of the article defaults here can be overridden on a per article basis by specifying it in the front matter. Refer to the Front Matter section for further details.\nGlobal # Name Default Description colorScheme \u0026quot;blowfish\u0026quot; The theme colour scheme to use. Valid values are blowfish (default), avocado, fire, ocean, forest, princess, neon, bloody, terminal, marvel, noir, autumn, congo, andslate. Refer to the Colour Schemes section for more details. defaultAppearance \u0026quot;light\u0026quot; The default theme appearance, either light or dark. autoSwitchAppearance true Whether the theme appearance automatically switches based upon the visitor\u0026rsquo;s operating system preference. Set to false to force the site to always use the defaultAppearance. enableSearch false Whether site search is enabled. Set to true to enable search functionality. Note that the search feature depends on the outputs.home setting in the site configuration being set correctly. enableCodeCopy false Whether copy-to-clipboard buttons are enabled for \u0026lt;code\u0026gt; blocks. The highlight.noClasses parameter must be set to false for code copy to function correctly. Read more about other configuration files below. mainSections Not set The sections that should be displayed in the recent articles list. If not provided the section with the greatest number of articles is used. showViews Not set Whether or not articles and list views are displayed. This requires firebase integrations to be enabled, look below. showLikes Not set Whether or not articles and list likes are displayed. This requires firebase integrations to be enabled, look below. robots Not set String that indicates how robots should handle your site. If set, it will be output in the page head. Refer to Google\u0026rsquo;s docs for valid values. disableImageZoom false Disables image zoom feature across all the images in the site. disableImageOptimization false Disables image resize and optimization features across all the images in the site. disableTextInHeader false Disables text in header, useful for logo based headers. defaultBackgroundImage Not set Default background image for both background homepage layout and background hero style defaultFeaturedImage Not set Default background image for all featured images across articles, will be overridden by a local featured image. highlightCurrentMenuArea Not set Marks menu entries in the main menu when selected smartTOC Not set Activate smart Table of Contents, items in view will be highlighted. smartTOCHideUnfocusedChildren Not set When smart Table of Contents is turned on, this will hide deeper levels of the table when they are not in focus. Header # Name Default Description header.layout \u0026quot;basic\u0026quot; Defines the header for the entire site, supported values are basic, fixed, fixed-fill, and fixed-fill-blur. Footer # Name Default Description footer.showMenu true Show/hide the footer menu, which can be configured in the [[footer]] section of the config/_default/menus.en.toml file. footer.showCopyright true Whether or not to show the copyright string in the site footer. Note that the string itself can be customised using the copyright parameter in the languages configuration. footer.showThemeAttribution true Whether or not to show the \u0026ldquo;powered by\u0026rdquo; theme attribution in the site footer. If you choose to disable this message, please consider attributing the theme somewhere else on your site (for example, on your about page). footer.showAppearanceSwitcher false Whether or not to show the appearance switcher in the site footer. The browser\u0026rsquo;s local storage is used to persist the visitor\u0026rsquo;s preference. footer.showScrollToTop true When set to true the scroll to top arrow is displayed. Homepage # Name Default Description homepage.layout \u0026quot;profile\u0026quot; The layout of the homepage. Valid values are page, profile, hero, card, background, or custom. When set to custom, you must provide your own layout by creating a /layouts/partials/home/custom.html file. Refer to the Homepage Layout section for more details. homepage.homepageImage Not set Image to be used in hero and card layouts. Can be set as local image from asset directory or external image url. Refer to the Homepage Layout section for more details. homepage.showRecent false Whether or not to display the recent articles list on the homepage. homepage.showRecentItems 5 How many articles to display if showRecent is true. If variable is set to 0 or if it isn\u0026rsquo;t defined the system will default to 5 articles. homepage.showMoreLink false Whether or not to display a show more link at the end of your posts that takes the user to a predefined place. homepage.showMoreLinkDest /posts The destination of the show more button. homepage.cardView false Display recent articles as a gallery of cards. homepage.cardViewScreenWidth false Enhance the width of the recent articles card gallery to take the full width available. homepage.layoutBackgroundBlur false Makes the background image in the homepage layout blur with the scroll Article # Name Default Description article.showDate true Whether or not article dates are displayed. article.showViews false Whether or not article views are displayed. This requires firebase integrations to be enabled, look below. article.showLikes false Whether or not article likes are displayed. This requires firebase integrations to be enabled, look below. article.showDateOnlyInArticle false Show date within article even if not displayed in article listings/cards. article.showDateUpdated false Whether or not the dates articles were updated are displayed. article.showAuthor true Whether or not the author box is displayed in the article footer. article.showAuthorBottom false Author boxes are displayed at the bottom of each page instead of the top. article.showHero false Whether the thumbnail image will be shown as a hero image within each article page. article.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. article.layoutBackgroundBlur true Makes the background image in the background article heroStyle blur with the scroll article.layoutBackgroundHeaderSpace true Add space between the header and the body. article.showBreadcrumbs false Whether or not breadcrumbs are displayed in the article header. article.showDraftLabel true Whether or not the draft indicator is shown next to articles when site is built with --buildDrafts. article.showEdit false Whether or not the link to edit the article content should be displayed. article.editURL Not set When article.showEdit is active, the URL for the edit link. article.editAppendPath true When article.showEdit is active, whether or not the path to the current article should be appended to the URL set at article.editURL. article.seriesOpened false Whether or not the series module will be displayed open by default or not. article.showHeadingAnchors true Whether or not heading anchor links are displayed alongside headings within articles. article.showPagination true Whether or not the next/previous article links are displayed in the article footer. article.invertPagination false Whether or not to flip the direction of the next/previous article links. article.showReadingTime true Whether or not article reading times are displayed. article.showTableOfContents false Whether or not the table of contents is displayed on articles. article.showRelatedContent false Display related content for each post. Might required additional configuration to your config.toml. Please check the theme config.toml if you want to enable this feature and copy all the relevant related entries. Also check Hugo\u0026rsquo;s docs on related content. article.relatedContentLimit 3 Limit of related articles to display if showRelatedContent is turned on. article.showTaxonomies false Whether or not the taxonomies related to this article are displayed. article.showAuthorsBadges false Whether the authors taxonomies are are displayed in the article or list header. This requires the setup of multiple authors and the authors taxonomy. Check this page for more details on how to configure that feature. article.showWordCount false Whether or not article word counts are displayed. article.showComments false Whether or not the comments partial is included after the article footer. article.sharingLinks Not set Which sharing links to display at the end of each article. When not provided, or set to false no links will be displayed. Available values are: \u0026ldquo;linkedin\u0026rdquo;, \u0026ldquo;twitter\u0026rdquo;, \u0026ldquo;reddit\u0026rdquo;, \u0026ldquo;pinterest\u0026rdquo;, \u0026ldquo;facebook\u0026rdquo;, \u0026ldquo;email\u0026rdquo;, \u0026ldquo;whatsapp\u0026rdquo;, and \u0026ldquo;telegram\u0026rdquo; article.showZenMode false Flag to activate Zen Mode reading feature for articles. List # Name Default Description list.showHero false Whether the thumbnail image will be shown as a hero image within each list page. list.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. list.showBreadcrumbs false Whether or not breadcrumbs are displayed in the header on list pages. list.layoutBackgroundBlur true Makes the background image in the background list heroStyle blur with the scroll list.layoutBackgroundHeaderSpace true Add space between the header and the body. list.showTableOfContents false Whether or not the table of contents is displayed on list pages. list.showSummary false Whether or not article summaries are displayed on list pages. If a summary is not provided in the front matter, one will be auto generated using the summaryLength parameter in the site configuration. list.showViews false Whether or not list views are displayed. This requires firebase integrations to be enabled, look below. list.showLikes false Whether or not list likes are displayed. This requires firebase integrations to be enabled, look below. list.showCards false Whether or not each article is displayed as a card or as simple inline text. list.groupByYear true Whether or not articles are grouped by year on list pages. list.cardView false Display lists as a gallery of cards. list.cardViewScreenWidth false Enhance the width of card galleries in lists to take the full width available. list.constrainItemsWidth false Limit item width to prose to increase readability. Useful when no feature images are available. list.showTableOfContents false Whether or not the table of contents is displayed on articles. Sitemap # Name Default Description sitemap.excludedKinds [\u0026quot;taxonomy\u0026quot;, \u0026quot;term\u0026quot;] Kinds of content that should be excluded from the generated /sitemap.xml file. Refer to the Hugo docs for acceptable values. Taxonomy # Name Default Description taxonomy.showTermCount true Whether or not the number of articles within a taxonomy term is displayed on the taxonomy listing. taxonomy.showHero false Whether the thumbnail image will be shown as a hero image within each taxonomy page. taxonomy.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. taxonomy.showBreadcrumbs false Whether or not breadcrumbs are displayed in the taxonomy header. taxonomy.showViews false Whether or not article views are displayed. This requires firebase integrations to be enabled, look below. taxonomy.showLikes false Whether or not article likes are displayed. This requires firebase integrations to be enabled, look below. taxonomy.showTableOfContents false Whether or not the table of contents is displayed on taxonomies. taxonomy.cardView false Display lists as a gallery of cards. Term # Name Default Description term.showHero false Whether the thumbnail image will be shown as a hero image within each term page. term.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. term.showBreadcrumbs false Whether or not breadcrumbs are displayed in the term header. term.showViews false Whether or not article views are displayed. This requires firebase integrations to be enabled, look below. term.showLikes false Whether or not article likes are displayed. This requires firebase integrations to be enabled, look below. term.showTableOfContents false Whether or not the table of contents is displayed on terms. term.groupByYear false Whether or not articles are grouped by year on term pages. term.cardView false Display lists as a gallery of cards. term.cardViewScreenWidth false Enhance the width of card galleries in lists to take the full width available. Firebase # Name Default Description firebase.apiKey Not set Firebase apiKey, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.authDomain Not set Firebase authDomain, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.projectId Not set Firebase projectId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.storageBucket Not set Firebase storageBucket, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.messagingSenderId Not set Firebase messagingSenderId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.appId Not set Firebase appId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.measurementId Not set Firebase measurementId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. Fathom Analytics # Name Default Description fathomAnalytics.site Not set The site code generated by Fathom Analytics for the website. Refer to the Analytics docs for more details. fathomAnalytics.domain Not set If using a custom domain with Fathom Analytics, provide it here to serve script.js from the custom domain. Umami Analytics # Name Default Description umamiAnalytics.websiteid Not set The site code generated by Umami Analytics for the website. Refer to the Analytics docs for more details. umamiAnalytics.domain Not set If using a custom domain with Umami Analytics, provide it here to serve script.js from the custom domain. BuyMeACoffee # Name Default Description buymeacoffee.identifier Not set The identifier to the target buymeacoffee account. buymeacoffee.globalWidget Not set Activate the global buymeacoffee widget. buymeacoffee.globalWidgetMessage Not set Message what will be displayed the first time a new user lands on the site. buymeacoffee.globalWidgetColor Not set Widget color in hex format. buymeacoffee.globalWidgetPosition Not set Position of the widget, i.e. \u0026ldquo;Left\u0026rdquo; or \u0026ldquo;Right\u0026rdquo; Verifications # Name Default Description verification.google Not set The site verification string provided by Google to be included in the site metadata. verification.bing Not set The site verification string provided by Bing to be included in the site metadata. verification.pinterest Not set The site verification string provided by Pinterest to be included in the site metadata. verification.yandex Not set The site verification string provided by Yandex to be included in the site metadata. Other configuration files # The theme also includes a markup.toml configuration file. This file contains some important parameters that ensure that Hugo is correctly configured to generate sites built with Blowfish.\nAlways ensure this file is present in the config directory and that the required values are set. Failure to do so may cause certain features to function incorrectly and could result in unintended behaviour.\n","date":"14 agosto 2020","externalUrl":null,"permalink":"/docs/configuration/","section":"Documenti","summary":"Blowfish is a highly customisable theme and uses some of the latest Hugo features to simplify how it is configured.","title":"Configuration","type":"docs"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/tags/docs/","section":"Tag","summary":"","title":"Docs","type":"tags"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/series/documentation/","section":"Series","summary":"","title":"Documentation","type":"series"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/tags/icons/","section":"Tag","summary":"","title":"Icons","type":"tags"},{"content":"Blowfish has built-in support for a number of FontAwesome 6 icons. These can be included in your website through either the icon partial or icon shortcode.\nAdditionally, custom icons are also fully supported. Simply provide your own SVG icon assets by placing them in the assets/icons/ directory in the root of your project. Any icons in the icons directory will then be available to use throughout the theme. In order achieve automatic color filling every SVG path needs fill=\u0026ldquo;currentColor\u0026rdquo; XML attribute.\nThe full list of built-in icons and their corresponding names can referenced below.\nIcon name Preview amazon apple bars bell blogger bluesky bomb bug check circle-info code codepen comment dev discourse docker download dribbble edit email envelope expand eye facebook fire flickr fork foursquare ghost github gitlab globe goodreads google graduation-cap hackernews hashnode heart-empty heart image instagram keybase kickstarter ko-fi \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e language lastfm lightbulb link linkedin list location-dot lock mastodon medium microsoft moon mug-hot music orcid patreon paypal pencil pgpkey phone pinterest poo reddit researchgate rss rss-square scale-balanced search shield skull-crossbones slack snapchat soundcloud stack-overflow star steam stripe substack sun tag telegram threads tiktok triangle-exclamation tumblr twitch twitter wand-magic-sparkles whatsapp x-twitter xing Xing xmark youtube ","date":"14 agosto 2020","externalUrl":null,"permalink":"/samples/icons/","section":"Campioni","summary":"Blowfish has built-in support for a number of FontAwesome 6 icons.","title":"Icons","type":"sample"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/tags/shortcodes/","section":"Tag","summary":"","title":"Shortcodes","type":"tags"},{"content":"","date":"13 agosto 2020","externalUrl":null,"permalink":"/tags/homepage/","section":"Tag","summary":"","title":"Homepage","type":"tags"},{"content":"Blowfish provides a fully flexible homepage layout. There are two main templates to choose from with additional settings to adjust the design. Alternatively, you can also provide your own template and have complete control over the homepage content.\nThe layout of the homepage is controlled by the homepage.layout setting in the params.toml configuration file. Additionally, all layouts have the option to include a listing of recent articles.\nProfile layout # The default layout is the profile layout, which is great for personal websites and blogs. It puts the author\u0026rsquo;s details front and centre by providing an image and links to social profiles.\nThe author information is provided in the languages configuration file. Refer to the Getting Started and Language Configuration sections for parameter details.\nAdditionally, any Markdown content that is provided in the homepage content will be placed below the author profile. This allows extra flexibility for displaying a bio or other custom content using shortcodes.\nTo enable the Profile layout, set homepage.layout = \u0026quot;profile\u0026quot; in the params.toml configuration file.\nPage layout # The page layout is simply a normal content page that displays your Markdown content. It\u0026rsquo;s great for static websites and provides a lot of flexibility.\nTo enable the Page layout, set homepage.layout = \u0026quot;page\u0026quot; in the params.toml configuration file.\nHero layout # The hero layout brings together ideas from the profile and card layouts. This one not only displays information on the author of the site but it also loads your markdown beneath it.\nTo enable the Hero layout, set homepage.layout = \u0026quot;hero\u0026quot; and homepage.homepageImage in the params.toml configuration file.\nBackground layout # The background layout is a more smooth version of the hero layout. As in the Hero layout, this one also displays both information on the author of the site and loads your markdown beneath it.\nTo enable the Background layout, set homepage.layout = \u0026quot;background\u0026quot; and homepage.homepageImage in the params.toml configuration file.\nCard layout # The card layout is an extension of the page layout. It provides the same level of flexibility by also displaying your markdown content and adds a card image to display visual content.\nTo enable the Card layout, set homepage.layout = \u0026quot;card\u0026quot; and homepage.homepageImage in the params.toml configuration file.\nCustom layout # If the built-in homepage layouts aren\u0026rsquo;t sufficient for your needs, you have the option to provide your own custom layout. This allows you to have total control over the page content and essentially gives you a blank slate to work with.\nTo enable the Custom layout, set homepage.layout = \u0026quot;custom\u0026quot; in the params.toml configuration file.\nWith the configuration value set, create a new custom.html file and place it in layouts/partials/home/custom.html. Now whatever is in the custom.html file will be placed in the content area of the site homepage. You may use whatever HTML, Tailwind, or Hugo templating functions you wish to define your layout.\nTo include recent articles on the custom layout, use the recent-articles/main.html partial.\nAs an example, the homepage on this site uses the custom layout to allow toggling between the profile and page layouts. Visit the GitHub repo to see how it works.\nRecent articles # All homepage layouts have the option of displaying recent articles below the main page content. To enable this, simply set the homepage.showRecent setting to true in the params.toml configuration file.\nThe articles listed in this section are derived from the mainSections setting which allows for whatever content types you are using on your website. For instance, if you had content sections for posts and projects you could set this setting to [\u0026quot;posts\u0026quot;, \u0026quot;projects\u0026quot;] and all the articles in these two sections would be used to populate the recent list. The theme expects this setting to be an array so if you only use one section for all your content, you should set this accordingly: [\u0026quot;blog\u0026quot;].\nThumbnails # Blowfish was built so it would be easy to add visual support to your articles. If your familiar with Hugo article structure, you just need to place an image file (almost all formats are supported bue we recommend .png or .jpg) that starts with feature* inside your article folder. And that\u0026rsquo;s it, Blowfish will then able to both use the image as a thumbnail within your website as well as for oEmbed cards across social platforms.\nHere is a guide with more info and a sample if you want to see an example.\nCard Gallery # Blowfish also supports displaying the standard lists of articles as card galleries. You can config this both for the recent section in the homepage and for lists of articles across your website. For homepage you can use homepage.cardView and homepage.cardViewScreenWidth; and for lists use list.cardView and list.cardViewScreenWidth. Check the Configuration docs for more details, and the homepage for a live demo.\n","date":"13 agosto 2020","externalUrl":null,"permalink":"/docs/homepage-layout/","section":"Documenti","summary":"Blowfish provides a fully flexible homepage layout.","title":"Homepage Layout","type":"docs"},{"content":"","date":"13 agosto 2020","externalUrl":null,"permalink":"/tags/layouts/","section":"Tag","summary":"","title":"Layouts","type":"tags"},{"content":"","date":"11 agosto 2020","externalUrl":null,"permalink":"/tags/icon/","section":"Tag","summary":"","title":"Icon","type":"tags"},{"content":"","date":"11 agosto 2020","externalUrl":null,"permalink":"/tags/lead/","section":"Tag","summary":"","title":"Lead","type":"tags"},{"content":"","date":"11 agosto 2020","externalUrl":null,"permalink":"/tags/mermaid/","section":"Tag","summary":"","title":"Mermaid","type":"tags"},{"content":"In addition to all the default Hugo shortcodes, Blowfish adds a few extras for additional functionality.\nAlert # alert outputs its contents as a stylised message box within your article. It\u0026rsquo;s useful for drawing attention to important information that you don\u0026rsquo;t want the reader to miss.\nParameter Description icon Optional. the icon to display on the left side.\nDefault: exclaimation triangle icon (Check out the icon shortcode for more details on using icons.) iconColor Optional. the color for the icon in basic CSS style.\nCan be either hex values (#FFFFFF) or color names (white)\nBy default chosen based on the current color theme . cardColor Optional. the color for the card background in basic CSS style.\nCan be either hex values (#FFFFFF) or color names (white)\nBy default chosen based on the current color theme . textColor Optional. the color for the text in basic CSS style.\nCan be either hex values (#FFFFFF) or color names (white)\nBy default chosen based on the current color theme . The input is written in Markdown so you can format it however you please.\nExample 1: No params\n{{\u0026lt; alert \u0026gt;}} **Warning!** This action is destructive! {{\u0026lt; /alert \u0026gt;}} Warning! This action is destructive! Example 2: Unnamed param\n{{\u0026lt; alert \u0026#34;twitter\u0026#34; \u0026gt;}} Don\u0026#39;t forget to [follow me](https://twitter.com/nunocoracao) on Twitter. {{\u0026lt; /alert \u0026gt;}} Don\u0026rsquo;t forget to follow me on Twitter. Example 3: Named params\n{{\u0026lt; alert icon=\u0026#34;fire\u0026#34; cardColor=\u0026#34;#e63946\u0026#34; iconColor=\u0026#34;#1d3557\u0026#34; textColor=\u0026#34;#f1faee\u0026#34; \u0026gt;}} This is an error! {{\u0026lt; /alert \u0026gt;}} This is an error! Article # Article will embed a single article into a markdown file. The link to the file should be the .RelPermalink of the file to be embedded. Note that the shortcode will not display anything if it\u0026rsquo;s referencing it\u0026rsquo;s parent. Note: if you are running your website in a subfolder like Blowfish (i.e. /blowfish/) please include that path in the link.\nParameter Description link Required. the .RelPermalink to the target article. Example:\n{{\u0026lt; article link=\u0026#34;/docs/welcome/\u0026#34; \u0026gt;}} Benvenuti a Blowfish 3 minuti Novit√† Documenti Badge # badge outputs a styled badge component which is useful for displaying metadata.\nExample:\n{{\u0026lt; badge \u0026gt;}} New article! {{\u0026lt; /badge \u0026gt;}} New article! Button # button outputs a styled button component which can be used to highlight a primary action. It has two optional variables href and target which can be used to specify the URL and target of the link.\nExample:\n{{\u0026lt; button href=\u0026#34;#button\u0026#34; target=\u0026#34;_self\u0026#34; \u0026gt;}} Call to action {{\u0026lt; /button \u0026gt;}} Call to action Carousel # carousel is used to showcase multiple images in an interactive and visually appealing way. This allows a user to slide through multiple images while only taking up the vertical space of a single one. All images are displayed using the full width of the parent component and using one of the predefined aspect ratios of 16:9, 21:9 or 32:9.\nParameter Description images Required. A regex string to match image names or URLs. aspectRatio Optional. The aspect ratio for the carousel. Either 16-9, 21-9 or 32-9. It is set to 16-9 by default. interval Optional. The interval for the auto-scrooling, specified in milliseconds. Defaults to 2000 (2s) Example 1: 16:9 aspect ratio and verbose list of images\n{{\u0026lt; carousel images=\u0026#34;{https://cdn.pixabay.com/photo/2016/12/11/12/02/mountains-1899264_960_720.jpg, gallery/03.jpg, gallery/01.jpg, gallery/02.jpg, gallery/04.jpg}\u0026#34; \u0026gt;}} Previous Nextsads Example 2: 21:9 aspect ratio and regex-ed list of images\n{{\u0026lt; carousel images=\u0026#34;gallery/*\u0026#34; aspectRatio=\u0026#34;21-9\u0026#34; interval=\u0026#34;2500\u0026#34; \u0026gt;}} Previous Nextsads Chart # chart uses the Chart.js library to embed charts into articles using simple structured data. It supports a number of different chart styles and everything can be configured from within the shortcode. Simply provide the chart parameters between the shortcode tags and Chart.js will do the rest.\nRefer to the official Chart.js docs for details on syntax and supported chart types.\nExample:\n{{\u0026lt; chart \u0026gt;}} type: \u0026#39;bar\u0026#39;, data: { labels: [\u0026#39;Tomato\u0026#39;, \u0026#39;Blueberry\u0026#39;, \u0026#39;Banana\u0026#39;, \u0026#39;Lime\u0026#39;, \u0026#39;Orange\u0026#39;], datasets: [{ label: \u0026#39;# of votes\u0026#39;, data: [12, 19, 3, 5, 3], }] } {{\u0026lt; /chart \u0026gt;}} You can see some additional Chart.js examples on the charts samples page.\nCode Importer # This shortcode is for importing code from external sources easily without copying and pasting.\nParameter Description url Required URL to an externally hosted code file. type Code type used for syntax highlighting. Example:\n{{\u0026lt; codeimporter url=\u0026#34;https://raw.githubusercontent.com/nunocoracao/blowfish/main/layouts/shortcodes/mdimporter.html\u0026#34; type=\u0026#34;go\u0026#34; \u0026gt;}} {{ $url := .Get \u0026#34;url\u0026#34;}} {{ with resources.GetRemote (printf $url) }} {{ .Content | markdownify }} {{ else }} {{ errorf \u0026#34;Mardown Importer Shortcode - Unable to get remote resource\u0026#34; . }} {{ end }} Figure # Blowfish includes a figure shortcode for adding images to content. The shortcode replaces the base Hugo functionality in order to provide additional performance benefits.\nWhen a provided image is a page resource, it will be optimised using Hugo Pipes and scaled in order to provide images appropriate to different device resolutions. If a static asset or URL to an external image is provided, it will be included as-is without any image processing by Hugo.\nThe figure shortcode accepts six parameters:\nParameter Description src Required. The local path/filename or URL of the image. When providing a path and filename, the theme will attempt to locate the image using the following lookup order: Firstly, as a page resource bundled with the page; then an asset in the assets/ directory; then finally, a static image in the static/ directory. alt Alternative text description for the image. caption Markdown for the image caption, which will be displayed below the image. class Additional CSS classes to apply to the image. href URL that the image should be linked to. target The target attribute for the href URL. nozoom nozoom=true disables the image \u0026ldquo;zoom\u0026rdquo; functionality. This is most useful in combination with a href link. default Special parameter to revert to default Hugo figure behaviour. Simply provide default=true and then use normal Hugo shortcode syntax. Blowfish also supports automatic conversion of images included using standard Markdown syntax. Simply use the following format and the theme will handle the rest:\n![Alt text](image.jpg \u0026#34;Image caption\u0026#34;) Example:\n{{\u0026lt; figure src=\u0026#34;abstract.jpg\u0026#34; alt=\u0026#34;Abstract purple artwork\u0026#34; caption=\u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34; \u0026gt;}} \u0026lt;!-- OR --\u0026gt; ![Abstract purple artwork](abstract.jpg \u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34;) Photo by Jr Korpa on Unsplash Gallery # gallery allows you to showcase multiple images at once, in a responsive manner with more varied and interesting layouts.\nIn order to add images to the gallery, use img tags for each image and add class=\u0026quot;grid-wXX\u0026quot; in order for the gallery to be able to identify the column width for each image. The widths available by default start at 10% and go all the way to 100% in 5% increments. For example, to set the width to 65%, set the class to grid-w65. Additionally, widths for 33% and 66% are also available in order to build galleries with 3 cols. You can also leverage tailwind\u0026rsquo;s responsive indicators to have a reponsive grid.\nExample 1: normal gallery\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} Example 2: responsive gallery\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} GitHub Card # github allows you to quickly link a github repository, all while showing and updating in realtime stats about it, such as the number of stars and forks it has.\nParameter Description repo [String] github repo in the format of username/repo Example 1:\n{{\u0026lt; github repo=\u0026#34;nunocoracao/blowfish\u0026#34; \u0026gt;}} nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo JavaScript 1075 318 GitLab Card # gitlab allows you to quickly link a GitLab Project (GitLab\u0026rsquo;s jargon for repo). It displays realtime stats about it, such as the number of stars and forks it has. Unlike github it can\u0026rsquo;t display the main programming language of a project. Finally, custom GitLab instance URL can be provided, as long as the api/v4/projects/ endpoint is available, making this shortcode compatible with most self-hosted / enterprise deployments.\nParameter Description projectID [String] gitlab numeric ProjectID baseURL [String] optional gitlab instance URL, default is https://gitlab.com/ Example 1:\n{{\u0026lt; gitlab projectID=\u0026#34;278964\u0026#34; \u0026gt;}} GitLab.org / GitLab GitLab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more. Self-host GitLab on your own servers, in a container, or on a cloud provider. 5026 9702 Icon # icon outputs an SVG icon and takes the icon name as its only parameter. The icon is scaled to match the current text size.\nExample:\n{{\u0026lt; icon \u0026#34;github\u0026#34; \u0026gt;}} Output: Icons are populated using Hugo pipelines which makes them very flexible. Blowfish includes a number of built-in icons for social, links and other purposes. Check the icon samples page for a full list of supported icons.\nCustom icons can be added by providing your own icon assets in the assets/icons/ directory of your project. The icon can then be referenced in the shortcode by using the SVG filename without the .svg extension.\nIcons can also be used in partials by calling the icon partial.\nKaTeX # The katex shortcode can be used to add mathematical expressions to article content using the KaTeX package. Refer to the online reference of supported TeX functions for the available syntax.\nTo include mathematical expressions in an article, simply place the shortcode anywhere with the content. It only needs to be included once per article and KaTeX will automatically render any markup on that page. Both inline and block notation are supported.\nInline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters. Alternatively, block notation can be generated using $$ delimiters.\nExample:\n{{\u0026lt; katex \u0026gt;}} \\\\(f(a,b,c) = (a^2+b^2+c^2)^3\\\\) \\(f(a,b,c) = (a^2+b^2+c^2)^3\\)\nCheck out the mathematical notation samples page for more examples.\nKeyword # The keyword component can be used to visually highlight certain important words or phrases, e.g. professional skills etc. The keywordList shortcode can be used to group together multiple keyword items. Each item can have the following properties.\nParameter Description icon Optional icon to be used in the keyword The input is written in Markdown so you can format it however you please.\nExample1 :\n{{\u0026lt; keyword \u0026gt;}} Super skill {{\u0026lt; /keyword \u0026gt;}} Standalone skill Example2 :\n{{\u0026lt; keywordList \u0026gt;}} {{\u0026lt; keyword icon=\u0026#34;github\u0026#34; \u0026gt;}} Lorem ipsum dolor. {{\u0026lt; /keyword \u0026gt;}} {{\u0026lt; keyword icon=\u0026#34;code\u0026#34; \u0026gt;}} **Important** skill {{\u0026lt; /keyword \u0026gt;}} {{\u0026lt; /keywordList \u0026gt;}} {{\u0026lt; keyword \u0026gt;}} *Standalone* skill {{\u0026lt; /keyword \u0026gt;}} Lorem ipsum dolor Important skill Standalone skill Lead # lead is used to bring emphasis to the start of an article. It can be used to style an introduction, or to call out an important piece of information. Simply wrap any Markdown content in the lead shortcode.\nExample:\n{{\u0026lt; lead \u0026gt;}} When life gives you lemons, make lemonade. {{\u0026lt; /lead \u0026gt;}} When life gives you lemons, make lemonade. List # List will display a list of recent articles. This shortcode requires a limit value to constraint the list. Additionally, it supports a where and a value in order to filter articles by their parameters. Note that this shortcode will not display its parent page but it will count for the limit value.\nParameter Description limit Required. the number of recent articles to display. title Optional title for the list, default is Recent cardView Optional card view enabled for the list, default is false where The variable to be used for the query of articles e.g. Type value The value that will need to match the parameter defined in where for the query of articles e.g. for where == Type a valid value could be sample The where and value values are used in the following query where .Site.RegularPages $where $value in the code of the shortcode. Check Hugo docs to learn more about which parameters are available to use. Example #1:\n{{\u0026lt; list limit=2 \u0026gt;}} Recenti Come usare joinmarket per fare coinjoin 13 minuti Guida al De-Google e privacy su android 14 minuti Example #2:\n{{\u0026lt; list title=\u0026#34;Samples\u0026#34; cardView=true limit=5 where=\u0026#34;Type\u0026#34; value=\u0026#34;sample\u0026#34; \u0026gt;}} Samples Multiple Authors 1 minuto Authors Sample Thumbnails 1 minuto Thumbnail Sample Icons Aggiornato: 9 marzo 2022\u0026middot;1 minuto Icons Sample Shortcodes Markdown 3 minuti Markdown Css Html Sample Rich Content 1 minuto Shortcodes Privacy Sample Gist Twitter Youtube Vimeo Placeholder Text Aggiornato: 24 gennaio 2022\u0026middot;2 minuti Markdown Text Sample Latin LTR/RTL # ltr and rtl allows you to mix your contents. Many RTL language users want to include parts of the content in LTR. Using this shortcode will let you do so, and by leveraging % as the outer-most dilemeter in the shortcode Hugo shortcodes, any markdown inside will be rendered normally.\nExample:\n- This is an markdown list. - Its per default a LTR direction {{% rtl %}} - Ÿáÿ∞Ÿá ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© - ŸÖŸÜ ÿßŸÑŸäŸÖŸäŸÜ ÿßŸÑŸâ ÿßŸÑŸäÿ≥ÿßÿ± {{% /rtl %}} This is an markdown list. Its per default a LTR direction Ÿáÿ∞Ÿá ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ŸÖŸÜ ÿßŸÑŸäŸÖŸäŸÜ ÿßŸÑŸâ ÿßŸÑŸäÿ≥ÿßÿ± Markdown Importer # This shortcode allows you to import markdown files from external sources. This is useful for including content from other repositories or websites without having to copy and paste the content.\nParameter Description url Required URL to an externally hosted markdown file. Example:\n{{\u0026lt; mdimporter url=\u0026#34;https://raw.githubusercontent.com/nunocoracao/nunocoracao/master/README.md\u0026#34; \u0026gt;}} Hi there üëã # üê≥ working as a Staff Product Manager @ Docker üê° Creator and maintainer of Blowfish @ Blowfish page üöÄ Personal blog - n9o.xyz üìö mentoring @ mentorcruise Mermaid # mermaid allows you to draw detailed diagrams and visualisations using text. It uses Mermaid under the hood and supports a wide variety of diagrams, charts and other output formats.\nSimply write your Mermaid syntax within the mermaid shortcode and let the plugin do the rest.\nRefer to the official Mermaid docs for details on syntax and supported diagram types.\nExample:\n{{\u0026lt; mermaid \u0026gt;}} graph LR; A[Lemons]--\u0026gt;B[Lemonade]; B--\u0026gt;C[Profit] {{\u0026lt; /mermaid \u0026gt;}} graph LR; A[Lemons]--\u003eB[Lemonade]; B--\u003eC[Profit] You can see some additional Mermaid examples on the diagrams and flowcharts samples page.\nSwatches # swatches outputs a set of up to three different colors to showcase color elements like a color palette. This shortcode takes the HEX codes of each color and creates the visual elements for each.\nExample\n{{\u0026lt; swatches \u0026#34;#64748b\u0026#34; \u0026#34;#3b82f6\u0026#34; \u0026#34;#06b6d4\u0026#34; \u0026gt;}} Output Timeline # The timeline creates a visual timeline that can be used in different use-cases, e.g. professional experience, a project\u0026rsquo;s achievements, etc. The timeline shortcode relies on the timelineItem sub-shortcode to define each item within the main timeline. Each item can have the following properties.\nParameter Description icon the icon to be used in the timeline visuals. header header for each entry badge text to place within the top right badge subheader entry\u0026rsquo;s subheader Example:\n{{\u0026lt; timeline \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;github\u0026#34; header=\u0026#34;header\u0026#34; badge=\u0026#34;badge test\u0026#34; subheader=\u0026#34;subheader\u0026#34; \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;code\u0026#34; header=\u0026#34;Another Awesome Header\u0026#34; badge=\u0026#34;date - present\u0026#34; subheader=\u0026#34;Awesome Subheader\u0026#34; \u0026gt;}} With html code \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Coffee\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Tea\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;star\u0026#34; header=\u0026#34;Shortcodes\u0026#34; badge=\u0026#34;AWESOME\u0026#34; \u0026gt;}} With other shortcodes {{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;code\u0026#34; header=\u0026#34;Another Awesome Header\u0026#34;\u0026gt;}} {{\u0026lt; github repo=\u0026#34;nunocoracao/blowfish\u0026#34; \u0026gt;}} {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; /timeline \u0026gt;}} header badge test subheader Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. Another Awesome Header date - present Awesome Subheader With html code Coffee Tea Milk Shortcodes AWESOME With other shortcodes Another Awesome Header nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo JavaScript 1075 318 TypeIt # TypeIt is the most versatile JavaScript tool for creating typewriter effects on the planet. With a straightforward configuration, it allows you to type single or multiple strings that break lines, delete \u0026amp; replace each other, and it even handles strings that contain complex HTML.\nBlowfish implements a sub-set of TypeIt features using a shortcode. Write your text within the typeit shortcode and use the following parameters to configure the behavior you want.\nParameter Description tag [String] html tag that will be used to render the strings. classList [String] List of css classes to apply to the html element. initialString [String] Initial string that will appear written and will be replaced. speed [number] Typing speed, measured in milliseconds between each step. lifeLike [boolean] Makes the typing pace irregular, as if a real person is doing it. startDelay [number] The amount of time before the plugin begins typing after being initialized. breakLines [boolean] Whether multiple strings are printed on top of each other (true), or if they\u0026rsquo;re deleted and replaced by each other (false). waitUntilVisible [boolean] Determines if the instance will begin when loaded or only when the target element becomes visible in the viewport. The default is true loop [boolean] Whether your strings will continuously loop after completing Example 1:\n{{\u0026lt; typeit \u0026gt;}} Lorem ipsum dolor sit amet {{\u0026lt; /typeit \u0026gt;}} Example 2:\n{{\u0026lt; typeit tag=h1 lifeLike=true \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. {{\u0026lt; /typeit \u0026gt;}} Example 3:\n{{\u0026lt; typeit tag=h3 speed=50 breakLines=false loop=true \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. {{\u0026lt; /typeit \u0026gt;}} Youtube Lite # A shortcut to embed youtube videos using the lite-youtube-embed library. This library is a lightweight alternative to the standard youtube embeds, and it\u0026rsquo;s designed to be faster and more efficient.\nParameter Description id [String] Youtube video id to embed. label [String] Label for the video params [String] Extras parameters for video playing Example 1:\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; \u0026gt;}} Example 2:\nYou can use all of Youtube\u0026rsquo;s player parameters for the params variable, as demonstrated below:\nThis video will start after 130 seconds (2m10)\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; params=\u0026#34;start=130\u0026#34; \u0026gt;}} This video will not have UI controls, will start playing at 130 seconds and will stop 10 seconds later.\nTo concatenate multiple options as shown below, you need to add the \u0026amp; character between them.\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; params=\u0026#34;start=130\u0026amp;end=10\u0026amp;controls=0\u0026#34; \u0026gt;}} More informations can be found on the youtubeLite GitHub repo and Youtube\u0026rsquo;s player parameters page.\n","date":"11 agosto 2020","externalUrl":null,"permalink":"/docs/shortcodes/","section":"Documenti","summary":"In addition to all the default Hugo shortcodes, Blowfish adds a few extras for additional functionality.","title":"Shortcodes","type":"docs"},{"content":"","date":"10 agosto 2020","externalUrl":null,"permalink":"/tags/analytics/","section":"Tag","summary":"","title":"Analytics","type":"tags"},{"content":"","date":"10 agosto 2020","externalUrl":null,"permalink":"/tags/comments/","section":"Tag","summary":"","title":"Comments","type":"tags"},{"content":"","date":"10 agosto 2020","externalUrl":null,"permalink":"/tags/favicons/","section":"Tag","summary":"","title":"Favicons","type":"tags"},{"content":"","date":"10 agosto 2020","externalUrl":null,"permalink":"/tags/front-matter/","section":"Tag","summary":"","title":"Front Matter","type":"tags"},{"content":"In addition to the default Hugo front matter parameters, Blowfish adds a number of additional options to customise the presentation of individual articles. All the available theme front matter parameters are listed below.\nFront matter parameter default values are inherited from the theme\u0026rsquo;s base configuration, so you only need to specify these parameters in your front matter when you want to override the default.\nName Default Description title Not set The name of the article. description Not set The text description for the article. It is used in the HTML metadata. externalUrl Not set If this article is published on a third-party website, the URL to this article. Providing a URL will prevent a content page being generated and any references to this article will link directly to the third-party website. editURL article.editURL When showEdit is active, the URL for the edit link. editAppendPath article.editAppendPath When showEdit is active, whether or not the path to the current article should be appended to the URL set at editURL. groupByYear list.groupByYear Whether or not articles are grouped by year on list pages. menu Not set When a value is provided, a link to this article will appear in the named menus. Valid values are main or footer. robots Not set String that indicates how robots should handle this article. If set, it will be output in the page head. Refer to Google\u0026rsquo;s docs for valid values. sharingLinks article.sharingLinks Which sharing links to display at the end of this article. When not provided, or set to false no links will be displayed. showAuthor article.showAuthor Whether or not the author box for the default author is displayed in the article footer. showAuthorBottom article.showAuthorBottom Author boxes are displayed at the bottom of each page instead of the top. authors Not set Array of values for authors, if set it overrides showAuthor settings for page or site. Used on the multiple authors feature, check this page for more details on how to configure that feature. showAuthorsBadges article.showAuthorsBadges Whether the authors taxonomies are are displayed in the article or list header. This requires the setup of multiple authors and the authors taxonomy. Check this page for more details on how to configure that feature. featureimage Not set External URL for feature image featureimagecaption Not set Caption for feature image. Only displayed in heroStyle big showHero article.showHero Whether the thumbnail image will be shown as a hero image within the article page. heroStyle article.heroStyle Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. showBreadcrumbs article.showBreadcrumbs or list.showBreadcrumbs Whether the breadcrumbs are displayed in the article or list header. showDate article.showDate Whether or not the article date is displayed. The date is set using the date parameter. showDateUpdated article.showDateUpdated Whether or not the date the article was updated is displayed. The date is set using the lastmod parameter. showEdit article.showEdit Whether or not the link to edit the article content should be displayed. showHeadingAnchors article.showHeadingAnchors Whether or not heading anchor links are displayed alongside headings within this article. showPagination article.showPagination Whether or not the next/previous article links are displayed in the article footer. invertPagination article.invertPagination Whether or not to flip the direction of the next/previous article links. showReadingTime article.showReadingTime Whether or not the article reading time is displayed. showTaxonomies article.showTaxonomies Whether or not the taxonomies that relate to this article are displayed. showTableOfContents article.showTableOfContents Whether or not the table of contents is displayed on this article. showWordCount article.showWordCount Whether or not the article word count is displayed. showComments article.showComments Whether or not the comments partial is included after the article footer. showSummary list.showSummary Whether or not the article summary should be displayed on list pages. showViews article.showViews Whether or not the article views should be displayed in lists and detailed view. This requires a firebase integration. Check this page for a guide on how to integrate Firebase into Blowfish showLikes article.showLikes Whether or not the article likes should be displayed in lists and detailed view. This requires a firebase integration. Check this page for a guide on how to integrate Firebase into Blowfish seriesOpened article.seriesOpened Whether or not the series module will be displayed open by default or not. series Not set Array of series the article belongs to, we recommend using only one series per article. series_order Not set Number of the article within the series. summary Auto generated using summaryLength (see site configuration) When showSummary is enabled, this is the Markdown string to be used as the summary for this article. xml true unless excluded by sitemap.excludedKinds Whether or not this article is included in the generated /sitemap.xml file. layoutBackgroundBlur true Makes the background image in the background heroStyle blur with the scroll layoutBackgroundHeaderSpace true Add space between the header and the body. ","date":"10 agosto 2020","externalUrl":null,"permalink":"/docs/front-matter/","section":"Documenti","summary":"In addition to the default Hugo front matter parameters, Blowfish adds a number of additional options to customise the presentation of individual articles.","title":"Front Matter","type":"docs"},{"content":"Some websites have more than one author contributing with content and therefore require more than a single default author across the entire website. For those use-cases, Blowfish allows users to extend the list of authors using the multiple authors feature.\nTo keep everything backwards compatible, this feature only allows the definition of extra authors and does not change in any way the previous author functionality which is used via config files.\nCreate Authors # The first step to create new authors is to set up a new folder in ./data/authors. Then you can simply add new json files inside, one for each new author. The name of the file will be the key for that author when referencing it in your articles.\nAs an example, let‚Äôs create a file called nunocoracao.json within ./data/authors. The contents of the file should be similar to the ones below. name, image, bio, and social are the 4 parameters supported right for authors. They mimic the configurations available for the default author in the config files.\nNote: the key in the social object will be used to fetch one of the theme‚Äôs icons, feel free to use any of the icons available in your setup.\n{ \u0026#34;name\u0026#34;: \u0026#34;Nuno Cora√ß√£o\u0026#34;, \u0026#34;image\u0026#34; : \u0026#34;img/nuno_avatar.jpg\u0026#34;, \u0026#34;bio\u0026#34;: \u0026#34;Theme Creator\u0026#34;, \u0026#34;social\u0026#34;: [ { \u0026#34;linkedin\u0026#34;: \u0026#34;https://linkedin.com/in/nunocoracao\u0026#34; }, { \u0026#34;twitter\u0026#34;: \u0026#34;https://twitter.com/nunocoracao\u0026#34; }, { \u0026#34;instagram\u0026#34;: \u0026#34;https://instagram.com/nunocoracao\u0026#34; }, { \u0026#34;medium\u0026#34;: \u0026#34;https://medium.com/@nunocoracao\u0026#34; }, { \u0026#34;github\u0026#34;: \u0026#34;https://github.com/nunocoracao\u0026#34; }, { \u0026#34;goodreads\u0026#34;: \u0026#34;http://goodreads.com/nunocoracao\u0026#34; }, { \u0026#34;keybase\u0026#34;: \u0026#34;https://keybase.io/nunocoracao\u0026#34; }, { \u0026#34;reddit\u0026#34;: \u0026#34;https://reddit.com/user/nunoheart\u0026#34; } ] } Reference Authors in Articles # Now that you created one author, the next step is to reference it in one or more articles. In the example below, we reference the author created in the previous step using its key.\nThis will render an extra author using the data provided in the json file. This feature does not change in any way the default author configured for the overall site, and therefore, you can control both separately. Using the showAuthor parameter, you can configure whether to show the default author, that is the normal use-case for a single author blog. The new authors front-matter parameter allows you to define authors specifically to an article, and they will be rendered independently of the configurations for the default site author.\n--- title: \u0026#34;Multiple Authors\u0026#34; date: 2020-08-10 draft: false description: \u0026#34;Configure multiple authors for your articles.\u0026#34; slug: \u0026#34;multi-author\u0026#34; tags: [\u0026#34;authors\u0026#34;, \u0026#34;config\u0026#34;, \u0026#34;docs\u0026#34;] showAuthor: true authors: - \u0026#34;nunocoracao\u0026#34; showAuthorsBadges : false --- In the example, which matches the markdown of the current page, both the default author and the new one will be displayed. You can scroll now to see the outcome.\nCreate the Authors Taxonomy # To get lists of articles for each of your authors you can configure the authors taxonomy, which opens up some more configurations that might be interesting. This is an optional step in the process that is not required to display the authors in your articles.\nFirst step is to configure the authors taxonomy in your config.toml file, like in the example below. Even though tag and category are defined by default with Hugo, once you add a specific taxonomies section you need to add them again otherwise the site will not process them.\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; And that‚Äôs just about it. Now you will have pages that reference your authors and, for each, show the respective list of articles where they participate. You can also use the article.showAuthorsBadges on the config file, or showAuthorsBadges on each article to chose whether to display the authors taxonomy as badges in each post item. As an example, this doc is configured to not display authors but if you look at the sample referenced below you will see the authors displayed as badges.\nLastly, you can add more detail to each author page so that it displays a little bio, links, or whatever information fits your use-case. To achieve that, create a folder with the key to each author inside ./content/authors and inside each folder place a _index.md file. For the example above, we would end up with a .content/authors/nunocoracao/_index.md file. Inside, you can configure the actual name of the author and the contents of their page. Authors in this documentation website are configured like this, so you can have a look by playing around with the site.\n--- title: \u0026#34;Nuno Cora√ß√£o\u0026#34; --- Nuno\u0026#39;s awesome dummy bio. Sample # This sample sample below shows an example where the default site author is turned off and the article has multiple authors.\nMultiple Authors 1 minuto Authors Sample ","date":"10 agosto 2020","externalUrl":null,"permalink":"/docs/multi-author/","section":"Documenti","summary":"Some websites have more than one author contributing with content and therefore require more than a single default author across the entire website.","title":"Multiple Authors","type":"docs"},{"content":"","date":"10 agosto 2020","externalUrl":null,"permalink":"/tags/partials/","section":"Tag","summary":"","title":"Partials","type":"tags"},{"content":" Analytics # Blowfish provides built-in support for Fathom Analytics and Google Analytics. Fathom is a paid alternative to Google Analytics that respects user privacy.\nFathom Analytics # To enable Fathom Analytics support, simply provide your Fathom site code in the config/_default/params.toml file. If you also use the custom domain feature of Fathom and would like to serve their script from your domain, you can also additionally provide the domain configuration value. If you don\u0026rsquo;t provide a domain value, the script will load directly from Fathom DNS.\n# config/_default/params.toml [fathomAnalytics] site = \u0026#34;ABC12345\u0026#34; domain = \u0026#34;llama.yoursite.com\u0026#34; Google Analytics # Google Analytics support is provided through the internal Hugo partial. Simply provide the googleAnalytics key in the config/_default/config.toml file and the script will be added automatically.\nBoth version 3 (analytics.js) and version 4 (gtag.js) are supported, based on the configuration value provided:\n# config/_default/config.toml # version 3 googleAnalytics = \u0026#34;UA-PROPERTY_ID\u0026#34; # version 4 googleAnalytics = \u0026#34;G-MEASUREMENT_ID\u0026#34; Umami Analytics # To enable Umami Analytics support, simply provide your Umami tracking code in the config/_default/params.toml file. If you also use the custom domain feature of Umami and would like to serve their script from your domain, you can also additionally provide the domain configuration value. If you don\u0026rsquo;t provide a domain value, the script will load directly from Umami DNS (analytics.umami.is).\n# config/_default/params.toml [umamiAnalytics] websiteid = \u0026#34;ABC12345\u0026#34; domain = \u0026#34;llama.yoursite.com\u0026#34; Custom analytics providers # If you wish to use a different analytics provider on your website you can also override the analytics partial and provide your own script. Simply create the file layouts/partials/extend-head.html in your project and it will automatically include it in the \u0026lt;head\u0026gt; of the website.\nComments # To add comments to your articles, Blowfish includes support for a comments partial that is included at the base of each article page. Simply provide a layouts/partials/comments.html which contains the code required to display your chosen comments.\nYou can use either the built-in Hugo Disqus template, or provide your own custom code. Refer to the Hugo docs for further information.\nOnce the partial has been provided, finer control over where comments are displayed is then managed using the showComments parameter. This value can be set at the theme level in the params.toml config file, or on a per-article basis by including it in the front matter. The parameter defaults to false so it must be set to true in one of these locations in order for comments to be displayed.\nFavicons # Blowfish provides a default set of blank favicons to get started but you can provide your own assets to override them. The easiest way to obtain new favicon assets is to generate them using a third-party provider like favicon.io.\nIcon assets should be placed directly in the static/ folder of your website and named as per the listing below. If you use favicon.io, these will be the filenames that are automatically generated for you, but you can provide your own assets if you wish.\nstatic/ ‚îú‚îÄ android-chrome-192x192.png ‚îú‚îÄ android-chrome-512x512.png ‚îú‚îÄ apple-touch-icon.png ‚îú‚îÄ favicon-16x16.png ‚îú‚îÄ favicon-32x32.png ‚îú‚îÄ favicon.ico ‚îî‚îÄ site.webmanifest Alternatively, you can also completely override the default favicon behaviour and provide your own favicon HTML tags and assets. Simply provide a layouts/partials/favicons.html file in your project and this will be injected into the site \u0026lt;head\u0026gt; in place of the default assets.\nIcon # Similar to the icon shortcode, you can include icons in your own templates and partials by using Blowfish\u0026rsquo;s icon.html partial. The partial takes one parameter which is the name of the icon to be included.\nExample:\n{{ partial \u0026#34;icon.html\u0026#34; \u0026#34;github\u0026#34; }} Icons are populated using Hugo pipelines which makes them very flexible. Blowfish includes a number of built-in icons for social, links and other purposes. Check the icon samples page for a full list of supported icons.\nCustom icons can be added by providing your own icon assets in the assets/icons/ directory of your project. The icon can then be referenced in the partial by using the SVG filename without the .svg extension.\nIcons can also be used in article content by calling the icon shortcode.\nExtensions # Blowfish also provides for a number of extension partials that allow for expanding upon base functionality.\nArticle link # If you wish to insert additional code after article links, create a layouts/partials/extend-article-link.html file. This is especially powerful when combined with the badge shortcode which can be used to highlight metadata for certain articles.\nHead and Footer # The theme allows for inserting additional code directly into the \u0026lt;head\u0026gt; and \u0026lt;footer\u0026gt; sections of the template. These can be useful for providing scripts or other logic that isn\u0026rsquo;t part of the theme.\nSimply create either layouts/partials/extend-head.html or layouts/partials/extend-footer.html and these will automatically be included in your website build. Both partials are injected as the last items in \u0026lt;head\u0026gt; and \u0026lt;footer\u0026gt; so they can be used to override theme defaults.\n","date":"10 agosto 2020","externalUrl":null,"permalink":"/docs/partials/","section":"Documenti","summary":"Analytics # Blowfish provides built-in support for Fathom Analytics and Google Analytics.","title":"Partials","type":"docs"},{"content":"","date":"10 agosto 2020","externalUrl":null,"permalink":"/tags/privacy/","section":"Tag","summary":"","title":"Privacy","type":"tags"},{"content":" Thumbnails # Blowfish was enhanced in order to make it easy to add visual support to your posts. To do so, you just need to place an image file (almost all formats are supported but we recommend .png or .jpg) that starts with feature* inside your article\u0026rsquo;s main directory, as shown in the example below.\ncontent ‚îî‚îÄ‚îÄ awesome_article ‚îú‚îÄ‚îÄ index.md ‚îî‚îÄ‚îÄ featured.png This will tell Blowfish that this article has a feature image that can be used both as a thumbnail across your website as well as for oEmbed cards across social platforms.\nFolder Structure # If you are using single .md files for your articles and have a file structure similar to this:\ncontent ‚îî‚îÄ‚îÄ awesome_article.md You need to change it from a single Markdown file into a folder. Create a directory with the same name of the article, inside create a index.md file. You\u0026rsquo;ll get a structure similar to what\u0026rsquo;s below.\ncontent ‚îî‚îÄ‚îÄ awesome_article ‚îî‚îÄ‚îÄ index.md Then you just need to add an image like explained earlier. If you want to see a sample of this, you can consult this sample.\nHero Images # Thumbnails will be used by default as hero images within each article. Use the global article.showHero or the front-matter parameter showHero to control this feature across the entire site or for each specific post. If you want to override the style of the hero image, you can create a file called hero.html in ./layouts/partials/ that will override the original partial from the theme.\n","date":"10 agosto 2020","externalUrl":null,"permalink":"/docs/thumbnails/","section":"Documenti","summary":"Thumbnails # Blowfish was enhanced in order to make it easy to add visual support to your posts.","title":"Thumbnails","type":"docs"},{"content":"","date":"9 agosto 2020","externalUrl":null,"permalink":"/tags/content/","section":"Tag","summary":"","title":"Content","type":"tags"},{"content":"If you\u0026rsquo;ve been reading the documentation in order, you should now know about all the features and configurations available in Blowfish. This page is designed to pull everything together and offer some worked examples that you might like to use in your Hugo project.\nTip: If you\u0026rsquo;re new to Hugo, be sure to check out the official docs to learn more about the concept of page bundles and resources. The examples on this page can all be adapted to different scenarios but hopefully give you some ideas about how to approach formatting a particular content item for your individual project.\nBranch pages # Branch page bundles in Hugo cover items like the homepage, section listings, and taxonomy pages. The important thing to remember about branch bundles is that the filename for this content type is _index.md.\nBlowfish will honour the front matter parameters specified in branch pages and these will override the default settings for that particular page. For example, setting the title parameter in a branch page will allow overriding the page title.\nHomepage # Layout: layouts/index.html Content: content/_index.md The homepage in Blowfish is special in that it\u0026rsquo;s overarching design is controlled by the homepage layout config parameter. You can learn more about this in the Homepage Layout section.\nIf you want to add custom content to this page, you simply need to create a content/_index.md file. Anything in this file will then be included in your homepage.\nExample:\n--- title: \u0026#34;Welcome to Blowfish!\u0026#34; description: \u0026#34;This is a demo of adding content to the homepage.\u0026#34; --- Welcome to my website! I\u0026#39;m really happy you stopped by. This example sets a custom title and adds some additional text to the body of the page. Any Markdown formatted text is acceptable, including shortcodes, images and links.\nList pages # Layout: layouts/_default/list.html Content: content/../_index.md List pages group all the pages within into a section and provide a way for visitors to reach each page. A blog or portfolio are examples of a list page as they group together posts or projects.\nCreating a list page is as simple as making a sub-directory in the content folder. For example, to create a \u0026ldquo;Projects\u0026rdquo; section, you would create content/projects/. Then create a Markdown file for each of your projects.\nA list page will be generated by default, however to customise the content, you should also create an _index.md page in this new directory.\n. ‚îî‚îÄ‚îÄ content ‚îî‚îÄ‚îÄ projects ‚îú‚îÄ‚îÄ _index.md # /projects ‚îú‚îÄ‚îÄ first-project.md # /projects/first-project ‚îî‚îÄ‚îÄ another-project ‚îú‚îÄ‚îÄ index.md # /projects/another-project ‚îî‚îÄ‚îÄ project.jpg Hugo will generate URLs for the pages in your projects folder accordingly.\nJust like the homepage, content in the _index.md file will be output into the generated list index. Blowfish will then list any pages in this section below the content.\nExample:\n--- title: \u0026#34;Projects\u0026#34; description: \u0026#34;Learn about some of my projects.\u0026#34; cascade: showReadingTime: false --- This section contains all my current projects. In this example, the special cascade parameter is being used to hide the reading time on any sub-pages within this section. By doing this, any project pages will not have their reading time showing. This is a great way to override default theme parameters for an entire section without having to include them in every individual page.\nThe samples section of this site is an example of a list page.\nTaxonomy pages # List layout: layouts/_default/taxonomy.html Term layout: layouts/_default/term.html Content: content/../_index.md Taxonomy pages come in two forms - taxonomy lists and taxonomy terms. Lists display a listing of each of the terms within a given taxonomy, while terms display a list of pages that are related to a given term.\nThe terminology can get a little confusing so let\u0026rsquo;s explore an example using a taxonomy named animals.\nFirstly, to use taxonomies in Hugo, they have to be configured. This is done by creating a config file at config/_default/taxonomies.toml and defining the taxonomy name.\n# config/_default/taxonomies.toml animal = \u0026#34;animals\u0026#34; Hugo expects taxonomies to be listed using their singular and plural forms, so we add the singular animal equals the plural animals to create our example taxonomy.\nNow that our animals taxonomy exists, it needs to be added to individual content items. It\u0026rsquo;s as simple as inserting it into the front matter:\n--- title: \u0026#34;Into the Lion\u0026#39;s Den\u0026#34; description: \u0026#34;This week we\u0026#39;re learning about lions.\u0026#34; animals: [\u0026#34;lion\u0026#34;, \u0026#34;cat\u0026#34;] --- This has now created two terms within our animals taxonomy - lion and cat.\nAlthough it\u0026rsquo;s not obvious at this point, Hugo will now be generating list and term pages for this new taxonomy. By default the listing can be accessed at /animals/ and the term pages can be found at /animals/lion/ and /animals/cat/.\nThe list page will list all the terms contained within the taxonomy. In this example, navigating to /animals/ will show a page that has links for \u0026ldquo;lion\u0026rdquo; and \u0026ldquo;cat\u0026rdquo; which take visitors to the individual term pages.\nThe term pages will list all the pages contained within that term. These term lists are essentially the same as normal list pages and behave in much the same way.\nIn order to add custom content to taxonomy pages, simply create _index.md files in the content folder using the taxonomy name as the sub-directory name.\n. ‚îî‚îÄ‚îÄ content ‚îî‚îÄ‚îÄ animals ‚îú‚îÄ‚îÄ _index.md # /animals ‚îî‚îÄ‚îÄ lion ‚îî‚îÄ‚îÄ _index.md # /animals/lion Anything in these content files will now be placed onto the generated taxonomy pages. As with other content, the front matter variables can be used to override defaults. In this way you could have a tag named lion but override the title to be \u0026ldquo;Lion\u0026rdquo;.\nTo see how this looks in reality, check out the tags taxonomy listing on this site.\nLeaf pages # Layout: layouts/_default/single.html Content (standalone): content/../page-name.md Content (bundled): content/../page-name/index.md Leaf pages in Hugo are basically standard content pages. They are defined as pages that don\u0026rsquo;t contain any sub-pages. These could be things like an about page, or an individual blog post that lives in the blog section of the website.\nThe most important thing to remember about leaf pages is that unlike branch pages, leaf pages should be named index.md without an underscore. Leaf pages are also special in that they can be grouped together at the top level of the section and named with a unique name.\n. ‚îî‚îÄ‚îÄ content ‚îî‚îÄ‚îÄ blog ‚îú‚îÄ‚îÄ first-post.md # /blog/first-post ‚îú‚îÄ‚îÄ second-post.md # /blog/second-post ‚îî‚îÄ‚îÄ third-post ‚îú‚îÄ‚îÄ index.md # /blog/third-post ‚îî‚îÄ‚îÄ image.jpg When including assets in a page, like an image, a page bundle should be used. Page bundles are created using a sub-directory with an index.md file. Grouping the assets with the content in its own directory is important as many of the shortcodes and other theme logic assumes that resources are bundled alongside pages.\nExample:\n--- title: \u0026#34;My First Blog Post\u0026#34; date: 2022-01-25 description: \u0026#34;Welcome to my blog!\u0026#34; summary: \u0026#34;Learn more about me and why I am starting this blog.\u0026#34; tags: [\u0026#34;welcome\u0026#34;, \u0026#34;new\u0026#34;, \u0026#34;about\u0026#34;, \u0026#34;first\u0026#34;] --- _This_ is the content of my blog post. Leaf pages have a wide variety of front matter parameters that can be used to customise how they are displayed.\nExternal links # Blowfish has a special feature that allows links to external pages to appear alongside articles in the article listings. This is useful if you have content on third party websites like Medium, or research papers that you\u0026rsquo;d like to link to, without replicating the content in your Hugo site.\nIn order to create an external link article, some special front matter needs to be set:\n--- title: \u0026#34;My Medium post\u0026#34; date: 2022-01-25 externalUrl: \u0026#34;https://medium.com/\u0026#34; summary: \u0026#34;I wrote a post on Medium.\u0026#34; showReadingTime: false _build: render: \u0026#34;false\u0026#34; list: \u0026#34;local\u0026#34; --- Along with the normal front matter parameters like title and summary, the externalUrl parameter is used to tell Blowfish that this is not an ordinary article. The URL provided here will be where visitors are directed when they select this article.\nAdditionally, we use a special Hugo front matter parameter _build to prevent a normal page for this content being generated - there\u0026rsquo;s no point generating a page since we\u0026rsquo;re linking to an external URL!\nThe theme includes an archetype to make generating these external link articles simple. Just specify -k external when making new content.\nhugo new -k external posts/my-post.md Simple pages # Layout: layouts/_default/simple.html Front Matter: layout: \u0026quot;simple\u0026quot; Blowfish also includes a special layout for simple pages. The simple layout is a full-width template that just places Markdown content into the page without any special theme features.\nThe only features available in the simple layout are breadcrumbs and sharing links. However, the behaviour of these can still be controlled using the normal page front matter variables.\nTo enable the simple layout on a particular page, add the layout front matter variable with a value of \u0026quot;simple\u0026quot;:\n--- title: \u0026#34;My landing page\u0026#34; date: 2022-03-08 layout: \u0026#34;simple\u0026#34; --- This page content is now full-width. Custom layouts # One of the benefits of Hugo is that it makes it easy to create custom layouts for the whole site, individual sections or pages.\nLayouts follow all the normal Hugo templating rules and more information is available in the official Hugo docs.\nOverriding default layouts # Each of the content types discussed above lists the layout file that is used to generate each type of page. If this file is created in your local project it will override the theme template and thus can be used to customise the default style of the website.\nFor example, creating a layouts/_default/single.html file will allow the layout of leaf pages to be completely customised.\nCustom section layouts # It is also simple to create custom layouts for individual content sections. This is useful when you want to make a section that lists a certain type of content using a particular style.\nLet\u0026rsquo;s step through an example that creates a custom \u0026ldquo;Projects\u0026rdquo; page that lists projects using a special layout.\nIn order to do this, structure your content using the normal Hugo content rules and create a section for your projects. Additionally, create a new layout for the projects section by using the same directory name as the content and adding a list.html file.\n. ‚îî‚îÄ‚îÄ content ‚îÇ ‚îî‚îÄ‚îÄ projects ‚îÇ ‚îú‚îÄ‚îÄ _index.md ‚îÇ ‚îú‚îÄ‚îÄ first-project.md ‚îÇ ‚îî‚îÄ‚îÄ second-project.md ‚îî‚îÄ‚îÄ layouts ‚îî‚îÄ‚îÄ projects ‚îî‚îÄ‚îÄ list.html This list.html file will now override the default list template, but only for the projects section. Before we look at this file, lets first look at the individual project files.\n--- title: \u0026#34;Blowfish\u0026#34; date: 2021-08-11 icon: \u0026#34;github\u0026#34; description: \u0026#34;A theme for Hugo built with Tailwind CSS.\u0026#34; topics: [\u0026#34;Hugo\u0026#34;, \u0026#34;Web\u0026#34;, \u0026#34;Tailwind\u0026#34;] externalUrl: \u0026#34;https://github.com/nunocoracao/blowfish/\u0026#34; --- In this example we are assigning some metadata for each project that we can then use in our list template. There\u0026rsquo;s no page content, but there\u0026rsquo;s nothing stopping you from including it. It\u0026rsquo;s your own custom template after all!\nWith the projects defined, now we can create a list template that outputs the details of each project.\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;mt-8\u0026#34;\u0026gt; {{ range .Pages }} \u0026lt;article class=\u0026#34;pb-6\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;flex\u0026#34; href=\u0026#34;{{ .Params.externalUrl }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mr-3 text-3xl text-neutral-300\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;relative inline-block align-text-bottom\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; .Params.icon }} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3 class=\u0026#34;flex text-xl font-semibold\u0026#34;\u0026gt; {{ .Title }} \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-sm text-neutral-400\u0026#34;\u0026gt; {{ .Description }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} \u0026lt;/section\u0026gt; {{ end }} Although this is quite a straightforward example, you can see that it steps through each of the pages in this section (ie. each project), and then outputs HTML links to each project alongside an icon. The metadata in the front matter for each project is used to determine which information is displayed.\nKeep in mind that you\u0026rsquo;ll need to ensure the relevant styles and classes are available, which may require the Tailwind CSS to be recompiled. This is discussed in more detail in the Advanced Customisation section.\nWhen making custom templates like this one, it\u0026rsquo;s always easiest to take a look at how the default Blowfish template works and then use that as a guide. Remember, the Hugo docs are a great resource to learn more about creating templates too.\n","date":"9 agosto 2020","externalUrl":null,"permalink":"/docs/content-examples/","section":"Documenti","summary":"If you\u0026rsquo;ve been reading the documentation in order, you should now know about all the features and configurations available in Blowfish.","title":"Content Examples","type":"docs"},{"content":"","date":"9 agosto 2020","externalUrl":null,"permalink":"/tags/example/","section":"Tag","summary":"","title":"Example","type":"tags"},{"content":"","date":"9 agosto 2020","externalUrl":null,"permalink":"/tags/series/","section":"Tag","summary":"","title":"Series","type":"tags"},{"content":"Blowfish provides a feature to group a set of articles together under a \u0026ldquo;series\u0026rdquo;. Placing an article under a series will display the rest of the series articles in each single page and provide a quick way to navigate amongst them. You can see an example of this above.\nCreate Taxonomy # The first step to enable series is to create the series taxonomy. For doing this just add the series taxonomy to your taxonomy list in the config.toml.\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; series = \u0026#34;series\u0026#34; Mark Articles # Then you just need to mark each article using the series parameter and the series_order. The series parameter will be the id and name of the series you are placing the article into (even though the variable is an array we recommend keeping each article to a single series.). And the series_order defines the order of that article within the series. In the example below the article is number 11 in the Documentation series.\nseries: [\u0026#34;Documentation\u0026#34;] series_order: 11 Series Behavior # Marking an article as part of a series will automatically display the series module as you see in this page for example. You can choose whether that module starts opened or not using the article.seriesOpened global variable in params.toml or the front-matter parameter seriesOpened to specify an override at the article level.\n","date":"9 agosto 2020","externalUrl":null,"permalink":"/docs/series/","section":"Documenti","summary":"Blowfish provides a feature to group a set of articles together under a \u0026ldquo;series\u0026rdquo;.","title":"Series","type":"docs"},{"content":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. üöÄ\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes.\n","date":"8 agosto 2020","externalUrl":null,"permalink":"/tags/advanced/","section":"Tag","summary":"This is the advanced tag.","title":"Advanced","type":"tags"},{"content":"There are many ways you can make advanced changes to Blowfish. Read below to learn more about what can be customised and the best way of achieving your desired result.\nIf you need further advice, post your questions on GitHub Discussions.\nHugo project structure # Before leaping into it, first a quick note about Hugo project structure and best practices for managing your content and theme customisations.\nIn summary: Never directly edit the theme files. Only make customisations in your Hugo project\u0026rsquo;s sub-directories, not in the themes directory itself. Blowfish is built to take advantage of all the standard Hugo practices. It is designed to allow all aspects of the theme to be customised and overridden without changing any of the core theme files. This allows for a seamless upgrade experience while giving you total control over the look and feel of your website.\nIn order to achieve this, you should never manually adjust any of the theme files directly. Whether you install using Hugo modules, as a git submodule or manually include the theme in your themes/ directory, you should always leave these files intact.\nThe correct way to adjust any theme behaviour is by overriding files using Hugo\u0026rsquo;s powerful file lookup order. In summary, the lookup order ensures any files you include in your project directory will automatically take precedence over any theme files.\nFor example, if you wanted to override the main article template in Blowfish, you can simply create your own layouts/_default/single.html file and place it in the root of your project. This file will then override the single.html from the theme without ever changing the theme itself. This works for any theme files - HTML templates, partials, shortcodes, config files, data, assets, etc.\nAs long as you follow this simple practice, you will always be able to update the theme (or test different theme versions) without worrying that you will lose any of your custom changes.\nChange image optimization settings # Hugo has various builtin methods to resize, crop and optimize images.\nAs an example - in layouts/partials/article-link/card.html, you have the following code:\n{{ with .Resize \u0026#34;600x\u0026#34; }} \u0026lt;div class=\u0026#34;w-full thumbnail_card nozoom\u0026#34; style=\u0026#34;background-image:url({{ .RelPermalink }});\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{ end }} The default behavior of Hugo here is to resize the image to 600px keeping the ratio.\nIt is worth noting here that default image configurations such as anchor point can also be set in your site configuration as well as in the template itself.\nSee the Hugo docs on image processing for more info.\nColour schemes # Blowfish ships with a number of colour schemes out of the box. To change the basic colour scheme, you can set the colorScheme theme parameter. Refer to the Getting Started section to learn more about the built-in schemes.\nIn addition to the default schemes, you can also create your own and re-style the entire website to your liking. Schemes are created by by placing a \u0026lt;scheme-name\u0026gt;.css file in the assets/css/schemes/ folder. Once the file is created, simply refer to it by name in the theme configuration.\nNote: generating these files manually can be hard, I\u0026rsquo;ve built a nodejs terminal tool to help with that, Fugu. In a nutshell, you pass the main three hex values of your color palette and the program will output a css file that can be imported directly into Blowfish. Blowfish defines a three-colour palette that is used throughout the theme. The three colours are defined as neutral, primary and secondary variants, each containing ten shades of colour.\nDue to the way Tailwind CSS 3.0 calculates colour values with opacity, the colours specified in the scheme need to conform to a particular format by providing the red, green and blue colour values.\n:root { --color-primary-500: 139, 92, 246; } This example defines a CSS variable for the primary-500 colour with a red value of 139, green value of 92 and blue value of 246.\nUse one of the existing theme stylesheets as a template. You are free to define your own colours, but for some inspiration, check out the official Tailwind colour palette reference.\nOverriding the stylesheet # Sometimes you need to add a custom style to style your own HTML elements. Blowfish provides for this scenario by allowing you to override the default styles in your own CSS stylesheet. Simply create a custom.css file in your project\u0026rsquo;s assets/css/ folder.\nThe custom.css file will be minified by Hugo and loaded automatically after all the other theme styles which means anything in your custom file will take precedence over the defaults.\nUsing additional fonts # Blowfish allows you to easily change the font for your site. After creating a custom.css file in your project\u0026rsquo;s assets/css/ folder, place you font file inside a fonts folder within the static root folder.\n. ‚îú‚îÄ‚îÄ assets ‚îÇ ‚îî‚îÄ‚îÄ css ‚îÇ ‚îî‚îÄ‚îÄ custom.css ... ‚îî‚îÄ‚îÄ‚îÄ static ‚îî‚îÄ‚îÄ fonts ‚îî‚îÄ‚îÄ‚îÄ font.ttf This makes the font available to the website. Now, the font can just import it in your custom.css and replaced wherever you see fit. The example below shows what replacing the font for the entire html would look like.\n@font-face { font-family: font; src: url(\u0026#39;/fonts/font.ttf\u0026#39;); } html { font-family: font; } Adjusting the font size # Changing the font size of your website is one example of overriding the default stylesheet. Blowfish makes this simple as it uses scaled font sizes throughout the theme which are derived from the base HTML font size. By default, Tailwind sets the default size to 12pt, but it can be changed to whatever value you prefer.\nCreate a custom.css file using the instructions above and add the following CSS declaration:\n/* Increase the default font size */ html { font-size: 13pt; } Simply by changing this one value, all the font sizes on your website will be adjusted to match this new size. Therefore, to increase the overall font sizes used, make the value greater than 12pt. Similarly, to decrease the font sizes, make the value less than 12pt.\nBuilding the theme CSS from source # If you\u0026rsquo;d like to make a major change, you can take advantage of Tailwind CSS\u0026rsquo;s JIT compiler and rebuild the entire theme CSS from scratch. This is useful if you want to adjust the Tailwind configuration or add extra Tailwind classes to the main stylesheet.\nNote: Building the theme manually is intended for advanced users. Let\u0026rsquo;s step through how building the Tailwind CSS works.\nTailwind configuration # In order to generate a CSS file that only contains the Tailwind classes that are actually being used the JIT compiler needs to scan through all the HTML templates and Markdown content files to check which styles are present in the markup. The compiler does this by looking at the tailwind.config.js file which is included in the root of the theme directory:\n// themes/blowfish/tailwind.config.js module.exports = { content: [ \u0026#34;./layouts/**/*.html\u0026#34;, \u0026#34;./content/**/*.{html,md}\u0026#34;, \u0026#34;./themes/blowfish/layouts/**/*.html\u0026#34;, \u0026#34;./themes/blowfish/content/**/*.{html,md}\u0026#34;, ], // and more... }; This default configuration has been included with these content paths so that you can easily generate your own CSS file without needing to modify it, provided you follow a particular project structure. Namely, you have to include Blowfish in your project as a subdirectory at themes/blowfish/. This means you cannot easily use Hugo Modules to install the theme and you must go down either the git submodule (recommended) or manual install routes. The Installation docs explain how to install the theme using either of these methods.\nProject structure # In order to take advantage of the default configuration, your project should look something like this\u0026hellip;\n. ‚îú‚îÄ‚îÄ assets ‚îÇ ‚îî‚îÄ‚îÄ css ‚îÇ ‚îî‚îÄ‚îÄ compiled ‚îÇ ‚îî‚îÄ‚îÄ main.css # this is the file we will generate ‚îú‚îÄ‚îÄ config # site config ‚îÇ ‚îî‚îÄ‚îÄ _default ‚îú‚îÄ‚îÄ content # site content ‚îÇ ‚îú‚îÄ‚îÄ _index.md ‚îÇ ‚îú‚îÄ‚îÄ projects ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ _index.md ‚îÇ ‚îî‚îÄ‚îÄ blog ‚îÇ ‚îî‚îÄ‚îÄ _index.md ‚îú‚îÄ‚îÄ layouts # custom layouts for your site ‚îÇ ‚îú‚îÄ‚îÄ partials ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ extend-article-link/simple.html ‚îÇ ‚îú‚îÄ‚îÄ projects ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ list.html ‚îÇ ‚îî‚îÄ‚îÄ shortcodes ‚îÇ ‚îî‚îÄ‚îÄ disclaimer.html ‚îî‚îÄ‚îÄ themes ‚îî‚îÄ‚îÄ blowfish # git submodule or manual theme install This example structure adds a new projects content type with its own custom layout along with a custom shortcode and extended partial. Provided the project follows this structure, all that\u0026rsquo;s required is to recompile the main.css file.\nInstall dependencies # In order for this to work you\u0026rsquo;ll need to change into the themes/blowfish/ directory and install the project dependencies. You\u0026rsquo;ll need npm on your local machine for this step.\ncd themes/blowfish npm install Run the Tailwind compiler # With the dependencies installed all that\u0026rsquo;s left is to use Tailwind CLI to invoke the JIT compiler. Navigate back to the root of your Hugo project and issue the following command:\ncd ../.. ./themes/blowfish/node_modules/tailwindcss/lib/cli.js -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit It\u0026rsquo;s a bit of an ugly command due to the paths involved but essentially you\u0026rsquo;re calling Tailwind CLI and passing it the location of the Tailwind config file (the one we looked at above), where to find the theme\u0026rsquo;s main.css file and then where you want the compiled CSS file to be placed (it\u0026rsquo;s going into the assets/css/compiled/ folder of your Hugo project).\nThe config file will automatically inspect all the content and layouts in your project as well as all those in the theme and build a new CSS file that contains all the CSS required for your website. Due to the way Hugo handles file hierarchy, this file in your project will now automatically override the one that comes with the theme.\nEach time you make a change to your layouts and need new Tailwind CSS styles, you can simply re-run the command and generate the new CSS file. You can also add -w to the end of the command to run the JIT compiler in watch mode.\nMake a build script # To fully complete this solution, you can simplify this whole process by adding aliases for these commands, or do what I do and add a package.json to the root of your project which contains the necessary scripts\u0026hellip;\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;my-website\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;hugo server -b http://localhost -p 8000\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;NODE_ENV=development ./themes/blowfish/node_modules/tailwindcss/lib/cli.js -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit -w\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;NODE_ENV=production ./themes/blowfish/node_modules/tailwindcss/lib/cli.js -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit\u0026#34; }, // and more... } Now when you want to work on designing your site, you can invoke npm run dev and the compiler will run in watch mode. When you\u0026rsquo;re ready to deploy, run npm run build and you\u0026rsquo;ll get a clean Tailwind CSS build.\nüôã‚Äç‚ôÄÔ∏è If you need help, feel free to ask a question on GitHub Discussions.\n","date":"8 agosto 2020","externalUrl":null,"permalink":"/docs/advanced-customisation/","section":"Documenti","summary":"There are many ways you can make advanced changes to Blowfish.","title":"Advanced Customisation","type":"docs"},{"content":"","date":"8 agosto 2020","externalUrl":null,"permalink":"/tags/css/","section":"Tag","summary":"","title":"Css","type":"tags"},{"content":"","date":"7 agosto 2020","externalUrl":null,"permalink":"/tags/deployment/","section":"Tag","summary":"","title":"Deployment","type":"tags"},{"content":"","date":"7 agosto 2020","externalUrl":null,"permalink":"/tags/github/","section":"Tag","summary":"","title":"Github","type":"tags"},{"content":"","date":"7 agosto 2020","externalUrl":null,"permalink":"/tags/hosting/","section":"Tag","summary":"","title":"Hosting","type":"tags"},{"content":"There are many ways to deploy your Hugo website built with Blowfish. The theme is designed to be flexible in almost any deployment scenario.\nBlowfish is built using relative URLs throughout the theme. This enables sites to easily be deployed to sub-folders and hosts like GitHub Pages. There\u0026rsquo;s usually no special configuration required for this to work as long as the baseURL parameter has been configured in the config.toml file.\nThe official Hugo Hosting and Deployment docs are the best place to learn how to deploy your site. The sections below contain some specific theme configuration details that can help you deploy smoothly with certain providers.\nChoose your provider:\nGitHub Pages Netlify Render Cloudflare Pages Shared hosting, VPS or private web server GitHub Pages # GitHub allows hosting on GitHub Pages using Actions. To enable this functionality, enable Pages on your repo and create a new Actions workflow to build and deploy your site.\nThe file needs to be in YAML format, placed within the .github/workflows/ directory of your GitHub repository and named with a .yml extension.\nImportant: Ensure you set the correct branch name under branches and in the deploy step if parameter to the source branch used in your project. # .github/workflows/gh-pages.yml name: GitHub Pages on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages publish_dir: ./public Push the config file to GitHub and the action should automatically run. It may fail the first time and you\u0026rsquo;ll need to visit the Settings \u0026gt; Pages section of your GitHub repo to check the source is correct. It should be set to use the gh-pages branch.\nOnce the settings are configured, re-run the action and the site should build and deploy correctly. You can consult the actions log to check everything deployed successfully.\nNetlify # To deploy to Netlify, create a new continuous deployment site and link it to your source code. The build settings can be left blank in the Netlify UI. You will only need to configure the domain you\u0026rsquo;ll be using.\nThen in the root of your site repository, create a netlify.toml file:\n# netlify.toml [build] command = \u0026#34;hugo mod get -u \u0026amp;\u0026amp; hugo --gc --minify -b $URL\u0026#34; publish = \u0026#34;public\u0026#34; [build.environment] NODE_ENV = \u0026#34;production\u0026#34; GO_VERSION = \u0026#34;1.16\u0026#34; TZ = \u0026#34;UTC\u0026#34; # Set to preferred timezone [context.production.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; This configuration assumes you are deploying Blowfish as a Hugo module. If you have installed the theme using another method, change the build command to simply hugo --gc --minify -b $URL.\nWhen you push the config file to your repo, Netlify should automatically deploy your site. You can check the deploy logs in the Netlify UI to check for any errors.\nRender # Deploying to Render is very straightforward and all configuration is via the Render UI.\nCreate a new Static Site and link it to your project\u0026rsquo;s code repository. Then simply configure the build command to be hugo --gc --minify and publish directory to be public.\nThe site will automatically build and deploy whenever you push a change to your repo.\nCloudflare Pages # Cloudflare offers the Pages service that can host Hugo blogs. It builds the site from a git repository and then hosts it on Cloudflare\u0026rsquo;s CDN. Follow their Hugo deployment guide to get started.\nThe Rocket Loader‚Ñ¢ feature offered by Cloudflare tries to speed up rendering of web pages with JavaScript, but it breaks the appearance switcher in the theme. It can also cause an annoying light/dark screen flash when browsing your site due to scripts loading in the wrong order.\nThis problem can be fixed by disabling it:\nGo to the Cloudflare dashboard Click on your domain name in the list Click Optimization in the Speed section Scroll down to Rocket Loader‚Ñ¢ and disable it Hugo sites built with Blowfish still load very quickly, even with this feature disabled.\nShared hosting, VPS or private web server # Using traditional web hosting, or deploying to your own web server, is as simple as building your Hugo site and transferring the files to your host.\nMake sure that the baseURL parameter in config.toml is set to the full URL to the root of your website (including any sub domains or sub-folders).\nThen build your site using hugo and copy the contents of the output directory to the root of your web server and you will be ready to go. By default, the output directory is named public.\nIf you need a hosting provider, check out Vultr or DigitalOcean. Signing up using these affiliate links will give you up to $100 in free credit so you can try the service.\n","date":"7 agosto 2020","externalUrl":null,"permalink":"/docs/hosting-deployment/","section":"Documenti","summary":"There are many ways to deploy your Hugo website built with Blowfish.","title":"Hosting \u0026 Deployment","type":"docs"},{"content":"","date":"7 agosto 2020","externalUrl":null,"permalink":"/tags/netlify/","section":"Tag","summary":"","title":"Netlify","type":"tags"},{"content":"","date":"7 agosto 2020","externalUrl":null,"permalink":"/tags/render/","section":"Tag","summary":"","title":"Render","type":"tags"},{"content":"","date":"3 agosto 2020","externalUrl":null,"permalink":"/tags/firebase/","section":"Tag","summary":"","title":"Firebase","type":"tags"},{"content":"In order to be able to support dynamic data across your website we\u0026rsquo;ve added the support to integrate Firebase. This will allow you to use the views feature across lists and posts.\nGo to Firebase website and create an account for free Create a new project Select analytics location Setup firebase in Blowfish by getting the variables for your project and setting them inside params.toml file. More details can be found in this page. You can find an example of the file Firebase will provide below, notice the parameters within the FirebaseConfig object. // Import the functions you need from the SDKs you need import { initializeApp } from \u0026#34;firebase/app\u0026#34;; import { getAnalytics } from \u0026#34;firebase/analytics\u0026#34;; // TODO: Add SDKs for Firebase products that you want to use // https://firebase.google.com/docs/web/setup#available-libraries // Your web app\u0026#39;s Firebase configuration // For Firebase JS SDK v7.20.0 and later, measurementId is optional const firebaseConfig = { apiKey: \u0026#34;AIzaSyB5tqlqDky77Vb4Tc4apiHV4hRZI18KGiY\u0026#34;, authDomain: \u0026#34;blowfish-21fff.firebaseapp.com\u0026#34;, projectId: \u0026#34;blowfish-21fff\u0026#34;, storageBucket: \u0026#34;blowfish-21fff.appspot.com\u0026#34;, messagingSenderId: \u0026#34;60108104191\u0026#34;, appId: \u0026#34;1:60108104191:web:039842ebe1370698b487ca\u0026#34;, measurementId: \u0026#34;G-PEDMYR1V0K\u0026#34; }; // Initialize Firebase const app = initializeApp(firebaseConfig); const analytics = getAnalytics(app); Setup Firestore - Select Build and open Firestore. Create a new database and choose to start in production mode. Select server location and wait. Once that is started you need to configure the rules. Just copy and paste the file below and press publish. rules_version = \u0026#39;2\u0026#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if request.auth != null; } } } Enable anonymous authorization - Select Build and open Authentication. Select get started, click Anonymous and turn it on, save. Enjoy - you can now activate views and likes on Blowfish for all (or specific) articles. ","date":"3 agosto 2020","externalUrl":null,"permalink":"/docs/firebase-views/","section":"Documenti","summary":"In order to be able to support dynamic data across your website we\u0026rsquo;ve added the support to integrate Firebase.","title":"Firebase: Views \u0026 Likes","type":"docs"},{"content":"","date":"3 agosto 2020","externalUrl":null,"permalink":"/tags/likes/","section":"Tag","summary":"","title":"Likes","type":"tags"},{"content":"","date":"3 agosto 2020","externalUrl":null,"permalink":"/tags/views/","section":"Tag","summary":"","title":"Views","type":"tags"},{"content":"","date":"11 marzo 2019","externalUrl":null,"permalink":"/tags/html/","section":"Tag","summary":"","title":"Html","type":"tags"},{"content":"","date":"11 marzo 2019","externalUrl":null,"permalink":"/tags/markdown/","section":"Tag","summary":"","title":"Markdown","type":"tags"},{"content":"This article offers a sample of basic Markdown formatting that can be used in Blowfish, also it shows how some basic HTML elements are decorated.\nHeadings # The following HTML \u0026lt;h1\u0026gt;‚Äî\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 # H2 # H3 # H4 # H5 # H6 # Paragraph # Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes # The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution # Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution # Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n‚Äî Rob Pike1\nTables # Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables # Italics Bold Code italics bold code Code Blocks # Code block with backticks # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types # Ordered List # First item Second item Third item Unordered List # List item Another item And another item Nested list # Fruit Apple Orange Banana Dairy Milk Cheese Other Elements ‚Äî abbr, sub, sup, kbd, mark # GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk about nothing during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"11 marzo 2019","externalUrl":null,"permalink":"/samples/markdown/","section":"Campioni","summary":"\u003cp\u003eThis article offers a sample of basic Markdown formatting that can be used in Blowfish, also it shows how some basic HTML elements are decorated.\u003c/p\u003e","title":"Markdown","type":"sample"},{"content":"","date":"10 marzo 2019","externalUrl":null,"permalink":"/tags/gist/","section":"Tag","summary":"","title":"Gist","type":"tags"},{"content":"Hugo ships with several built-in shortcodes for rich content, along with a privacy config and a set of simple shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube # Below is an example using the built-in youtube shortcode.\nTwitter # This example uses the twitter_simple shortcode to output a Tweet. It requires two named parameters user and id.\n‚ÄúIn addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.‚Äù\n‚Äî Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Alternatively, the tweet shortcode can be used to embed a fully marked up Twitter card.\nGist # The gist shortcode can be used to embed a GitHub Gist. It requires two unnamed parameters: the username and ID of the Gist.\nVimeo # The vimeo_simple shortcode will embed a Vimeo video.\n","date":"10 marzo 2019","externalUrl":null,"permalink":"/samples/rich-content/","section":"Campioni","summary":"This is an \u003cem\u003eexample\u003c/em\u003e of a \u003cstrong\u003erich\u003c/strong\u003e content summary.","title":"Rich Content","type":"sample"},{"content":"","date":"10 marzo 2019","externalUrl":null,"permalink":"/tags/twitter/","section":"Tag","summary":"","title":"Twitter","type":"tags"},{"content":"","date":"10 marzo 2019","externalUrl":null,"permalink":"/tags/vimeo/","section":"Tag","summary":"","title":"Vimeo","type":"tags"},{"content":"","date":"10 marzo 2019","externalUrl":null,"permalink":"/tags/youtube/","section":"Tag","summary":"","title":"Youtube","type":"tags"},{"content":"","date":"9 marzo 2019","externalUrl":null,"permalink":"/tags/latin/","section":"Tag","summary":"","title":"Latin","type":"tags"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt # The Van de Graaf Canon\nMane refeci capiebant unda mulcebat # Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"9 marzo 2019","externalUrl":null,"permalink":"/samples/placeholder-text/","section":"Campioni","summary":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de pectora summo.\u003c/p\u003e","title":"Placeholder Text","type":"sample"},{"content":"","date":"9 marzo 2019","externalUrl":null,"permalink":"/tags/text/","section":"Tag","summary":"","title":"Text","type":"tags"},{"content":"","date":"8 marzo 2019","externalUrl":null,"permalink":"/tags/katex/","section":"Tag","summary":"","title":"Katex","type":"tags"},{"content":"KaTeX can be used to render mathematical notation within articles.\nBlowfish will only bundle the KaTeX assets into your project if you make use of mathematical notation. In order for this to work, simply include the katex shortcode within the article. Example below:\n{{\u0026lt; katex \u0026gt;}} Any KaTeX syntax on that page will then be automatically rendered. Use the online reference of supported TeX functions for the available syntax.\nInline notation # Inline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters.\nExample:\n% KaTeX inline notation Inline notation: \\\\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887‚Ä¶\\\\) Inline notation: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887‚Ä¶\\)\nBlock notation # Alternatively, block notation can be generated using $$ delimiters. This will output the expression in its own HTML block.\nExample:\n% KaTeX block notation $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"8 marzo 2019","externalUrl":null,"permalink":"/samples/mathematical-notation/","section":"Campioni","summary":"\u003cp\u003eKaTeX can be used to render mathematical notation within articles.\u003c/p\u003e","title":"Mathematical notation","type":"sample"},{"content":"","date":"8 marzo 2019","externalUrl":null,"permalink":"/tags/maths/","section":"Tag","summary":"","title":"Maths","type":"tags"},{"content":"","date":"6 marzo 2019","externalUrl":null,"permalink":"/tags/chart/","section":"Tag","summary":"","title":"Chart","type":"tags"},{"content":"Blowfish includes support for Chart.js using the chart shortcode. Simply wrap the chart markup within the shortcode. Blowfish automatically themes charts to match the configured colorScheme parameter, however the colours can be customised using normal Chart.js syntax.\nRefer to the chart shortcode docs for more details.\nThe examples below are a small selection taken from the official Chart.js docs. You can also view the page source on GitHub to see the markup.\nBar chart # Line chart # Doughnut chart # ","date":"6 marzo 2019","externalUrl":null,"permalink":"/samples/charts/","section":"Campioni","summary":"Blowfish includes Chart.js for powerful charts and data visualisations.","title":"Charts","type":"sample"},{"content":"","date":"6 marzo 2019","externalUrl":null,"permalink":"/tags/diagram/","section":"Tag","summary":"","title":"Diagram","type":"tags"},{"content":"Mermaid diagrams are supported in Blowfish using the mermaid shortcode. Simply wrap the diagram markup within the shortcode. Blowfish automatically themes Mermaid diagrams to match the configured colorScheme parameter.\nRefer to the mermaid shortcode docs for more details.\nThe examples below are a small selection taken from the official Mermaid docs. You can also view the page source on GitHub to see the markup.\nFlowchart # graph TD A[Christmas] --\u003e|Get money| B(Go shopping) B --\u003e C{Let me think} B --\u003e G[/Another/] C ==\u003e|One| D[Laptop] C --\u003e|Two| E[iPhone] C --\u003e|Three| F[Car] subgraph Section C D E F G end Sequence diagram # sequenceDiagram autonumber par Action 1 Alice-\u003e\u003eJohn: Hello John, how are you? and Action 2 Alice-\u003e\u003eBob: Hello Bob, how are you? end Alice-\u003e\u003e+John: Hello John, how are you? Alice-\u003e\u003e+John: John, can you hear me? John--\u003e\u003e-Alice: Hi Alice, I can hear you! Note right of John: John is perceptive John--\u003e\u003e-Alice: I feel great! loop Every minute John--\u003eAlice: Great! end Class diagram # classDiagram Animal \"1\" \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c--o Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } Entity relationship diagram # erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" ","date":"6 marzo 2019","externalUrl":null,"permalink":"/samples/diagrams-flowcharts/","section":"Campioni","summary":"It\u0026rsquo;s easy to add diagrams and flowcharts to articles using Mermaid.","title":"Diagrams and Flowcharts","type":"sample"},{"content":"","date":"6 marzo 2019","externalUrl":null,"permalink":"/tags/graph/","section":"Tag","summary":"","title":"Graph","type":"tags"},{"content":"","date":"5 marzo 2019","externalUrl":null,"permalink":"/tags/emoji/","section":"Tag","summary":"","title":"Emoji","type":"tags"},{"content":"Emoji is supported throughout Blowfish by default. Emoji can be used in titles, menu items and article content.\nNote: The rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack. Emoji replacements are automatic throughout Blowfish, so you can use shorthand codes in your content and front matter and they will be converted to their corresponding symbols at build time.\nExample: see_no_evil üôà, hear_no_evil üôâ, speak_no_evil üôä.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n","date":"5 marzo 2019","externalUrl":null,"permalink":"/samples/emoji/","section":"Campioni","summary":"üìñüèûÔ∏èüßóüèΩüêâüßôüèΩ‚Äç‚ôÇÔ∏èüßöüèΩüë∏","title":"Emoji ü™Ç","type":"sample"},{"content":"2‰∫∫ÁõÆ„ÅÆ„ÉÄ„Éü„Éº‰ΩúËÄÖ„ÅÆÁ¥†Êô¥„Çâ„Åó„ÅÑ„ÉÄ„Éü„Éº„Éó„É≠„Éï„Ç£„Éº„É´„Åß„Åô„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/authors/secondauthor/_index.ja/","section":"Esempio di elenco di tassonomia degli autori","summary":"2‰∫∫ÁõÆ„ÅÆ„ÉÄ„Éü„Éº‰ΩúËÄÖ„ÅÆÁ¥†Êô¥„Çâ„Åó„ÅÑ„ÉÄ„Éü„Éº„Éó„É≠„Éï„Ç£„Éº„É´„Åß„Åô„ÄÇ","title":"2‰∫∫ÁõÆ„ÅÆ„ÉÄ„Éü„Éº‰ΩúËÄÖ","type":"authors"},{"content":" „Åì„Å°„Çâ„ÅØ background „É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆ„Éá„É¢„Åß„Åô„ÄÇ „É¨„Ç§„Ç¢„Ç¶„Éà„ÇíÂ§âÊõ¥„Åô„Çã\u0026orarr; npx blowfish-tools ","date":"1 gennaio 0001","externalUrl":null,"permalink":"/_index.ja/","section":"","summary":" „Åì„Å°„Çâ„ÅØ background „É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆ„Éá„É¢„Åß„Åô„ÄÇ „É¨„Ç§„Ç¢„Ç¶„Éà„ÇíÂ§âÊõ¥„Åô„Çã\u0026orarr; npx blowfish-tools ","title":"Blowfish „Å∏„Çà„ÅÜ„Åì„Åù! üéâ","type":"page"},{"content":"","date":"1 gennaio 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"ÂÅáË£ÖËøôÈáåÊúâ‰∏Ä‰ªΩÁ¨¨‰∫å‰Ωç‰ΩúËÄÖÁöÑÁÆÄ‰ªã„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/authors/secondauthor/_index.zh-cn/","section":"Esempio di elenco di tassonomia degli autori","summary":"ÂÅáË£ÖËøôÈáåÊúâ‰∏Ä‰ªΩÁ¨¨‰∫å‰Ωç‰ΩúËÄÖÁöÑÁÆÄ‰ªã„ÄÇ","title":"Dummy Second Author","type":"authors"},{"content":"Nuno „ÅÆÁ¥†Êô¥„Çâ„Åó„ÅÑ„ÉÄ„Éü„Éº„Éó„É≠„Éï„Ç£„Éº„É´„Åß„Åô„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/authors/nunocoracao/_index.ja/","section":"Esempio di elenco di tassonomia degli autori","summary":"Nuno „ÅÆÁ¥†Êô¥„Çâ„Åó„ÅÑ„ÉÄ„Éü„Éº„Éó„É≠„Éï„Ç£„Éº„É´„Åß„Åô„ÄÇ","title":"Nuno Cora√ß√£o","type":"authors"},{"content":"ÂÅáË£ÖËøôÈáåÊúâ‰∏Ä‰ªΩ Nuno ÁöÑÁÆÄ‰ªã„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/authors/nunocoracao/_index.zh-cn/","section":"Esempio di elenco di tassonomia degli autori","summary":"ÂÅáË£ÖËøôÈáåÊúâ‰∏Ä‰ªΩ Nuno ÁöÑÁÆÄ‰ªã„ÄÇ","title":"Nuno Cora√ß√£o","type":"authors"},{"content":" See what\u0026rsquo;s possible with Blowfish. This section contains links to example templates and pages created using Blowfish to get you inspired.\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/examples/_index.zh-cn/","section":"Showcase","summary":"See what\u0026rsquo;s possible with Blowfish.","title":"Showcase","type":"examples"},{"content":" Blowfish „ÅØ„ÅÇ„Å™„Åü„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Å´ÂëΩ„ÇíÂÆø„Åó„Åæ„Åô„ÄÇüòç „Åì„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„ÅØ„ÄÅ Blowfish „ÅßÊßò„ÄÖ„Å™Á®ÆÈ°û„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí„Å©„ÅÆ„Çà„ÅÜ„Å´Ë°®Á§∫„Åô„Çã„ÅÆ„Åã„ÇíÁ¥π‰ªã„Åô„Çã„Éá„É¢„Éö„Éº„Ç∏„ÇíÂê´„Åø„Åæ„Åô„ÄÇ‰æã„Å®„Åó„Å¶„ÅØ ÂàÜÈ°û‰∏ÄË¶ß„Éö„Éº„Ç∏„ÇÇÂèÇËÄÉ„Å´„Å™„Çä„Åæ„Åô„ÄÇ\n„Çµ„Ç§„Éâ„Éé„Éº„Éà: „Åì„ÅÆ„Éö„Éº„Ç∏„ÅØ‰∏ÄËà¨ÁöÑ„Å™ Blowfish „ÅÆ„É™„Çπ„Éà„Åß„ÄÅ Hugo „ÅåÁîüÊàê„Åó„Åü samples „Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çø„Ç§„Éó„Å®Ë®ò‰∫ã„ÅÆË¶ÅÁ¥Ñ„ÇíË°®Á§∫„Åô„ÇãÊßò„Å´Ë®≠ÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/samples/_index.ja/","section":"Campioni","summary":"Blowfish „ÅØ„ÅÇ„Å™„Åü„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Å´ÂëΩ„ÇíÂÆø„Åó„Åæ„Åô„ÄÇüòç „Åì„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„ÅØ„ÄÅ Blowfish „ÅßÊßò„ÄÖ„Å™Á®ÆÈ°û„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí„Å©„ÅÆ„Çà„ÅÜ„Å´Ë°®Á§∫„Åô„Çã„ÅÆ„Åã„ÇíÁ¥π‰ªã„Åô„Çã„Éá„É¢„Éö„Éº„Ç∏„ÇíÂê´„Åø„Åæ„Åô„ÄÇ‰æã„Å®„Åó„Å¶„ÅØ ÂàÜÈ°û‰∏ÄË¶ß„Éö„Éº„Ç∏„ÇÇÂèÇËÄÉ„Å´„Å™„Çä„Åæ„Åô„ÄÇ","title":"„Çµ„É≥„Éó„É´","type":"samples"},{"content":" Blowfish „Åß‰Ωï„ÅåÂá∫Êù•„Çã„ÅãË¶ã„Å¶„Åø„Çã„ÄÇ „Åì„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„ÅØ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ‰æã„ÇÑ„Ç§„É≥„Çπ„Éî„É¨„Éº„Ç∑„Éß„É≥„ÇíÂæó„Çã„Åì„Å®„ÅÆÂá∫Êù•„Çã Blowfish „Çí‰ΩøÁî®„Åó„Å¶‰ΩúÊàê„Åï„Çå„Åü„Éö„Éº„Ç∏„ÅÆ„É™„É≥„ÇØ„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/examples/_index.ja/","section":"Showcase","summary":"Blowfish „Åß‰Ωï„ÅåÂá∫Êù•„Çã„ÅãË¶ã„Å¶„Åø„Çã„ÄÇ „Åì„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„ÅØ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ‰æã„ÇÑ„Ç§„É≥„Çπ„Éî„É¨„Éº„Ç∑„Éß„É≥„ÇíÂæó„Çã„Åì„Å®„ÅÆÂá∫Êù•„Çã Blowfish „Çí‰ΩøÁî®„Åó„Å¶‰ΩúÊàê„Åï„Çå„Åü„Éö„Éº„Ç∏„ÅÆ„É™„É≥„ÇØ„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ","title":"„Ç∑„Éß„Éº„Ç±„Éº„Çπ","type":"examples"},{"content":"Blowfish „ÅØ Hugo „ÅÆÂàÜÈ°û„Ç∑„Çπ„ÉÜ„É†„ÇíÂÆåÂÖ®„Å´„Çµ„Éù„Éº„Éà„Åó„ÄÅ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂàÜÈ°û„Ç∑„Çπ„ÉÜ„É†„ÅÆË®≠ÂÆö„Åß„ÇÇÈÅ©Âêà„Åß„Åç„Åæ„Åô„ÄÇ„Åì„ÅÆ„Çà„ÅÜ„Å™ÂàÜÈ°û„Ç∑„Çπ„ÉÜ„É†„ÅÆ„É™„Çπ„Éà„ÅØ„ÄÅÁî®Ë™û„É™„Çπ„Éà„ÅÆ‰∏ä„Å´Ë°®Á§∫„Åï„Çå„Çã„Ç´„Çπ„Çø„É†„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇÇ„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n„Åì„ÅÆ„Ç®„É™„Ç¢„ÅØ„Åù„Çå„Åû„Çå„ÅÆÂàÜÈ°û„Ç∑„Çπ„ÉÜ„É†„Å´ËøΩÂä†„ÅÆË™¨Êòé„Çí„Åô„ÇãÊôÇ„Å´Âà©Áî®„Åó„Åæ„Åô„ÄÇ‰ª•‰∏ã„ÅÆ È´òÂ∫¶„Å™„Çø„Ç∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÄÅ„Åì„ÅÆ„Ç≥„É≥„Çª„Éó„Éà„Çí„Åï„Çâ„Å´Áô∫Â±ï„Åï„Åõ„ÇãÊñπÊ≥ï„Çí„ÅîË¶ß„Åè„Å†„Åï„ÅÑ„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/tags/_index.ja/","section":"Tag","summary":"Blowfish „ÅØ Hugo „ÅÆÂàÜÈ°û„Ç∑„Çπ„ÉÜ„É†„ÇíÂÆåÂÖ®„Å´„Çµ„Éù„Éº„Éà„Åó„ÄÅ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂàÜÈ°û„Ç∑„Çπ„ÉÜ„É†„ÅÆË®≠ÂÆö„Åß„ÇÇÈÅ©Âêà„Åß„Åç„Åæ„Åô„ÄÇ„Åì„ÅÆ„Çà„ÅÜ„Å™ÂàÜÈ°û„Ç∑„Çπ„ÉÜ„É†„ÅÆ„É™„Çπ„Éà„ÅØ„ÄÅÁî®Ë™û„É™„Çπ„Éà„ÅÆ‰∏ä„Å´Ë°®Á§∫„Åï„Çå„Çã„Ç´„Çπ„Çø„É†„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇÇ„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ","title":"„Çø„Ç∞","type":"tags"},{"content":"Âú®‰Ω†ÁöÑÊñáÁ´†‰∏≠Ê∑ªÂä†‰∏çÂêå‰ΩúËÄÖÁöÑÁÆÄÂçïÁ§∫‰æã„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/authors/_index.zh-cn/","section":"Esempio di elenco di tassonomia degli autori","summary":"Âú®‰Ω†ÁöÑÊñáÁ´†‰∏≠Ê∑ªÂä†‰∏çÂêå‰ΩúËÄÖÁöÑÁÆÄÂçïÁ§∫‰æã„ÄÇ","title":"‰ΩúËÄÖÂàóË°®Á§∫‰æã","type":"authors"},{"content":" ‰∫ÜËß£Â¶Ç‰Ωï‰ΩøÁî®ÁÆÄÂçïËÄåÂº∫Â§ßÁöÑ Blowfish„ÄÇ Êú¨Á´†ËäÇÂåÖÂê´‰∫Ü‰Ω†ÈúÄË¶Å‰∫ÜËß£ÁöÑÊúâÂÖ≥ Blowfish ÁöÑÊâÄÊúâ‰ø°ÊÅØ„ÄÇÂ¶ÇÊûú‰Ω†ÊòØÊñ∞Áî®Êà∑ÔºåËØ∑Êü•ÈòÖ ÂÆâË£Ö ÊåáÂçóÔºåÊàñËÄÖËÆøÈóÆ Á§∫‰æã Êù•‰∫ÜËß£ Blowfish ËÉΩÂÅö‰ªÄ‰πà„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/docs/_index.zh-cn/","section":"Documenti","summary":"‰∫ÜËß£Â¶Ç‰Ωï‰ΩøÁî®ÁÆÄÂçïËÄåÂº∫Â§ßÁöÑ Blowfish„ÄÇ Êú¨Á´†ËäÇÂåÖÂê´‰∫Ü‰Ω†ÈúÄË¶Å‰∫ÜËß£ÁöÑÊúâÂÖ≥ Blowfish ÁöÑÊâÄÊúâ‰ø°ÊÅØ„ÄÇÂ¶ÇÊûú‰Ω†ÊòØÊñ∞Áî®Êà∑ÔºåËØ∑Êü•ÈòÖ ÂÆâË£Ö ÊåáÂçóÔºåÊàñËÄÖËÆøÈóÆ Á§∫‰æã Êù•‰∫ÜËß£ Blowfish ËÉΩÂÅö‰ªÄ‰πà„ÄÇ","title":"ÊñáÊ°£","type":"docs"},{"content":"Blowfish ÊîØÊåÅÂü∫‰∫é Hugo ÁöÑÊâÄÊúâÂàÜÁ±ªÊñπÊ≥ï„ÄÇÂêåÊó∂ÔºåÂΩìÂâçÁöÑÊ†áÁ≠æÈ¢ÑËßàÈ°µ‰πüÊîØÊåÅÂ±ïÁ§∫Ëá™ÂÆö‰πâÂÜÖÂÆπ„ÄÇ\nÂú®ËøôÈáåÂèØ‰ª•‰∏∫ÊØè‰∏™ÂàÜÁ±ªÊ∑ªÂä†È¢ùÂ§ñÁöÑÊèèËø∞‰ø°ÊÅØ„ÄÇÊü•Áúã‰∏ãÈù¢ÁöÑ È´òÁ∫ßÊ†áÁ≠æÈ°µÈù¢Ôºå‰∫ÜËß£Êõ¥Â§ö„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/tags/_index.zh-cn/","section":"Tag","summary":"Blowfish ÊîØÊåÅÂü∫‰∫é Hugo ÁöÑÊâÄÊúâÂàÜÁ±ªÊñπÊ≥ï„ÄÇÂêåÊó∂ÔºåÂΩìÂâçÁöÑÊ†áÁ≠æÈ¢ÑËßàÈ°µ‰πüÊîØÊåÅÂ±ïÁ§∫Ëá™ÂÆö‰πâÂÜÖÂÆπ„ÄÇ","title":"Ê†áÁ≠æ","type":"tags"},{"content":" Blowfish ËÆ©‰Ω†ÁöÑÂÜÖÂÆπÊ†©Ê†©Â¶ÇÁîü„ÄÇ üòç Êú¨ËäÇÂåÖÂê´‰∏Ä‰∫õÁ§∫‰æãÈ°µÈù¢ÔºåÂ±ïÁ§∫‰∫ÜBlowfishÂ¶Ç‰ΩïÂëàÁé∞‰∏çÂêåÁ±ªÂûãÁöÑÂÜÖÂÆπ„ÄÇ‰Ω†ËøòÂèØ‰ª•ÂèÇËÄÉ Ê†áÁ≠æÈ°µÈù¢ÁöÑÁ§∫‰æã„ÄÇ\nÊóÅÊ≥®Ôºö Ëøô‰∏™È°µÈù¢Âè™ÊòØ‰∏Ä‰∏™Ê†áÂáÜÁöÑBlowfishÊñáÁ´†ÂàóË°®ÔºåÂπ∂‰∏îÂ∑≤ÁªèÈÖçÁΩÆ‰∫ÜHugoÊù•ÁîüÊàê‰∏Ä‰∏™ samples ÂÜÖÂÆπÁ±ªÂûãÂπ∂ÊòæÁ§∫ÊñáÁ´†ÊëòË¶Å„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/samples/_index.zh-cn/","section":"Campioni","summary":"Blowfish ËÆ©‰Ω†ÁöÑÂÜÖÂÆπÊ†©Ê†©Â¶ÇÁîü„ÄÇ üòç Êú¨ËäÇÂåÖÂê´‰∏Ä‰∫õÁ§∫‰æãÈ°µÈù¢ÔºåÂ±ïÁ§∫‰∫ÜBlowfishÂ¶Ç‰ΩïÂëàÁé∞‰∏çÂêåÁ±ªÂûãÁöÑÂÜÖÂÆπ„ÄÇ‰Ω†ËøòÂèØ‰ª•ÂèÇËÄÉ Ê†áÁ≠æÈ°µÈù¢ÁöÑÁ§∫‰æã„ÄÇ","title":"Á§∫‰æã","type":"samples"},{"content":"„ÅÇ„Å™„Åü„ÅÆË®ò‰∫ã„Åß„Å©„ÅÆ„Çà„ÅÜ„Å´ËëóËÄÖ„ÅÆÂàÜÈ°û„ÇíÈñãÂßã„Åô„Çã„Åã„ÅÆÁ∞°Âçò„Å™‰æã„Åß„Åô„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/authors/_index.ja/","section":"Esempio di elenco di tassonomia degli autori","summary":"„ÅÇ„Å™„Åü„ÅÆË®ò‰∫ã„Åß„Å©„ÅÆ„Çà„ÅÜ„Å´ËëóËÄÖ„ÅÆÂàÜÈ°û„ÇíÈñãÂßã„Åô„Çã„Åã„ÅÆÁ∞°Âçò„Å™‰æã„Åß„Åô„ÄÇ","title":"ËëóËÄÖ„ÅÆÂàÜÈ°û„É™„Çπ„Éà„ÅÆ‰æã","type":"authors"},{"content":" „Ç∑„É≥„Éó„É´„ÄÅ„Åù„Çå„Åß„ÅÑ„Å¶Âº∑Âäõ„ÄÇ Blowfish „ÅÆÂà©Áî®ÊñπÊ≥ï„Å®ÁâπÂæ¥„Å´„Å§„ÅÑ„Å¶Â≠¶„Å∂„ÄÇ „Åì„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„ÅØ Blowfish „Å´„Å§„ÅÑ„Å¶Áü•„ÇãÂøÖË¶Å„ÅÆ„ÅÇ„ÇãÂÖ®„Å¶„ÅÆ„Åì„Å®„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÊñ∞„Åó„Åè‰ΩúÊàê„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅÈñãÂßã„Åô„Çã„Åü„ÇÅ„Å´ „Ç§„É≥„Çπ„Éà„Éº„É´„Ç¨„Ç§„Éâ„ÄÅ„Åæ„Åü„ÅØ Blowfish „Åå‰Ωï„ÅåÂá∫Êù•„Çã„Åã „Çµ„É≥„Éó„É´„Çª„ÇØ„Ç∑„Éß„É≥„Å´Ë®™„Çå„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/docs/_index.ja/","section":"Documenti","summary":"„Ç∑„É≥„Éó„É´„ÄÅ„Åù„Çå„Åß„ÅÑ„Å¶Âº∑Âäõ„ÄÇ Blowfish „ÅÆÂà©Áî®ÊñπÊ≥ï„Å®ÁâπÂæ¥„Å´„Å§„ÅÑ„Å¶Â≠¶„Å∂„ÄÇ „Åì„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„ÅØ Blowfish „Å´„Å§„ÅÑ„Å¶Áü•„ÇãÂøÖË¶Å„ÅÆ„ÅÇ„ÇãÂÖ®„Å¶„ÅÆ„Åì„Å®„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇÊñ∞„Åó„Åè‰ΩúÊàê„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅÈñãÂßã„Åô„Çã„Åü„ÇÅ„Å´ „Ç§„É≥„Çπ„Éà„Éº„É´„Ç¨„Ç§„Éâ„ÄÅ„Åæ„Åü„ÅØ Blowfish „Åå‰Ωï„ÅåÂá∫Êù•„Çã„Åã „Çµ„É≥„Éó„É´„Çª„ÇØ„Ç∑„Éß„É≥„Å´Ë®™„Çå„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ","title":"Ë≥áÊñô","type":"docs"},{"content":"„Åì„Å°„Çâ„ÅØÈ´òÂ∫¶„Å™„Çø„Ç∞„Åß„Åô„ÄÇ Blowfish „ÅÆ‰ªñ„ÅÆ„Éö„Éº„Ç∏„ÅÆÊßò„Å´„ÄÅÂÄã„ÄÖ„ÅÆÂàÜÈ°ûÊù°È†Ö„Å´„Ç´„Çπ„Çø„É†„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆËøΩÂä†„ÇÑ„Åù„Çå„ÇíÊù°È†Ö„É™„Çπ„Éà„ÅÆ‰∏ÄÁï™‰∏ä„Å´Ë°®Á§∫„Åô„Çã„Åì„Å®„ÅåÂèØËÉΩ„Åß„Åô„ÄÇüöÄ\n„Çø„Ç§„Éà„É´„ÇÑË™¨Êòé„Å™„Å© SEO „ÇÑ‰ªñ„ÅÆÁõÆÁöÑ„Å´Âà©Áî®„Åô„Çã„Åü„ÇÅ„ÅÆHugo „ÅÆ„É°„Çø„Éá„Éº„Çø„ÇíÂÆöÁæ©„Åô„Çã„Åü„ÇÅ„Å´„Åì„Çå„Çâ„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Éö„Éº„Ç∏„ÇÇÂà©Áî®ÂèØËÉΩ„Åß„Åô„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/tags/advanced/_index.ja/","section":"Tag","summary":"„Åì„Å°„Çâ„ÅØÈ´òÂ∫¶„Å™„Çø„Ç∞„Åß„Åô„ÄÇ Blowfish „ÅÆ‰ªñ„ÅÆ„Éö„Éº„Ç∏„ÅÆÊßò„Å´„ÄÅÂÄã„ÄÖ„ÅÆÂàÜÈ°ûÊù°È†Ö„Å´„Ç´„Çπ„Çø„É†„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆËøΩÂä†„ÇÑ„Åù„Çå„ÇíÊù°È†Ö„É™„Çπ„Éà„ÅÆ‰∏ÄÁï™‰∏ä„Å´Ë°®Á§∫„Åô„Çã„Åì„Å®„ÅåÂèØËÉΩ„Åß„Åô„ÄÇüöÄ","title":"È´òÂ∫¶„Å™„Çø„Ç∞","type":"tags"},{"content":"ËøôÊòØÈ´òÁ∫ßÊ†áËÆ∞„ÄÇÁ±ª‰ººÂÖ∂‰ªñ Blowfish ‰∏≠ÁöÑÂÖ∂‰ªñÂàóË°®È°µÈù¢Ôºå‰Ω†ÂèØ‰ª•Âú®ÂàÜÁ±ªÂàóË°®È°µÊ∑ªÂä†Ëá™ÂÆö‰πâÂÜÖÂÆπÔºåËøôÈÉ®ÂàÜÂÜÖÂÆπ‰ºöÊòæÁ§∫Âú®È°∂ÈÉ®„ÄÇüöÄ\n‰Ω†‰πüÂèØ‰ª•Áî®Ëøô‰∫õÂÜÖÂÆπÊù•ÂÆö‰πâ Hugo ÁöÑÂÖÉÊï∞ÊçÆÔºåÊØîÂ¶ÇÊ†áÈ¢òÂíåÊèèËø∞„ÄÇËøô‰∫õÂÜÖÂÆπÂèØ‰ª•Ë¢´Áî®Êù•Â¢ûÂº∫ SEO ÊàñÂÖ∂‰ªñÁõÆÁöÑ„ÄÇ\n","date":"1 gennaio 0001","externalUrl":null,"permalink":"/tags/advanced/_index.zh-cn/","section":"Tag","summary":"ËøôÊòØÈ´òÁ∫ßÊ†áËÆ∞„ÄÇÁ±ª‰ººÂÖ∂‰ªñ Blowfish ‰∏≠ÁöÑÂÖ∂‰ªñÂàóË°®È°µÈù¢Ôºå‰Ω†ÂèØ‰ª•Âú®ÂàÜÁ±ªÂàóË°®È°µÊ∑ªÂä†Ëá™ÂÆö‰πâÂÜÖÂÆπÔºåËøôÈÉ®ÂàÜÂÜÖÂÆπ‰ºöÊòæÁ§∫Âú®È°∂ÈÉ®„ÄÇüöÄ","title":"È´òÁ∫ß","type":"tags"}]